<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[spark2.2新版本编译打包]]></title>
      <url>http://flume.cn/2018/01/08/spark2-2%E6%96%B0%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>之前已经多次打包过spark了，但是每次重新打包的时候都忘记一些细节，并且spark1.6与2.2打包也有不同，与官网推荐有一些出入，现在就spark2.2.1的打包，总结如下：</p>
<p>由于直接下载预编译好的spark与我们的集群环境不够符合，因此需要下载源码后本地编译<br>参考：<br><a href="http://spark.apache.org/docs/latest/building-spark.html" target="_blank" rel="external">http://spark.apache.org/docs/latest/building-spark.html</a></p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>安装好了<strong>3.5版本以上的maven</strong> 与java8+ ,spark 2.2.0已经取消了 Java 7的支持，Scala使用 2.11版本<br>我的环境如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ scala -version</div><div class="line">Scala code runner version 2.11.11 -- Copyright 2002-2017, LAMP/EPFL</div><div class="line"></div><div class="line">Adam@Adam-PC MINGW64 /d/spark</div><div class="line">$ java -version</div><div class="line">java version <span class="string">"1.8.0_102"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_102-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.102-b14, mixed mode)</div><div class="line"></div><div class="line">Adam@Adam-PC MINGW64 /d/spark</div><div class="line">$ mvn -v</div><div class="line">Apache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-04T03:39:06+08:00)</div></pre></td></tr></table></figure></p>
<h4 id="1-下载源代码"><a href="#1-下载源代码" class="headerlink" title="1. 下载源代码"></a>1. 下载源代码</h4><p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.2.1/spark-2.2.1.tgz" target="_blank" rel="external">http://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.2.1/spark-2.2.1.tgz</a></p>
<p>解压到 <code>D:\spark\spark-2.2.1</code>,然后进入这个目录</p>
<h4 id="2-修改pom-xml文件"><a href="#2-修改pom-xml文件" class="headerlink" title="2. 修改pom.xml文件"></a>2. 修改pom.xml文件</h4><p>加入cloudera的代码仓库，其中可以在profile里面添加相应版本的文件，添加如下内容:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>cloudera-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Cloudera Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span>  </div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>cdh5.4.7<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>2.6.0-cdh5.4.7<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">hbase.version</span>&gt;</span>1.2.4-cdh5.4.7<span class="tag">&lt;/<span class="name">hbase.version</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>3.4.5-cdh5.4.7<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="3-使用make-distribution编译"><a href="#3-使用make-distribution编译" class="headerlink" title="3. 使用make-distribution编译"></a>3. 使用make-distribution编译</h4><p>设置maven的Memory usage<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> MAVEN_OPTS=<span class="string">"-Xmx2g -XX:ReservedCodeCacheSize=512m"</span></div></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./dev/change-scala-version.sh 2.11</div></pre></td></tr></table></figure>
<h4 id="4-编译方法一：使用make-distribution编译"><a href="#4-编译方法一：使用make-distribution编译" class="headerlink" title="4. 编译方法一：使用make-distribution编译"></a>4. 编译方法一：使用make-distribution编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./dev/make-distribution.sh --name ctcc --tgz -Pyarn -Phadoop-2.6 -Dhadoop.version=2.6.0-cdh5.4.7 -Dscala-2.11 -Phive -Phive-thriftserver</div></pre></td></tr></table></figure>
<h4 id="5-编译方法二：使用mvn编译"><a href="#5-编译方法二：使用mvn编译" class="headerlink" title="5. 编译方法二：使用mvn编译"></a>5. 编译方法二：使用mvn编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">./build/mvn  -Pyarn -Phadoop-2.6 -Dhadoop.version=2.6.0-cdh5.4.7 -Dscala-2.11 -Phive -Phive-thriftserver -DskipTests clean package</div><div class="line"></div><div class="line">// 然后将make-distribution.sh中@BUILD_COMMAND那部分注释掉</div><div class="line"></div><div class="line">./dev/make-distribution.sh --name hadoop-2.6.0-cdh5.4.7 --tgz -Phadoop-2.6  -Dhadoop.version=hadoop-2.6.0-cdh5.4.7 -Phive -Phive-thriftserver -Pyarn</div><div class="line"></div><div class="line">#### 6.编译完成</div><div class="line">编译成功后，就会发现多了一个 spark-2.2.1-bin-ctcc.tgz 的文件，解压后就能使用了，我们还要替换一些与hive相关的jar包，比如 hive-exec-1.2.1.spark2.jar 包，替换方法很简单，直接将自己打的包与 /jars 里的包替换一下就好了；</div><div class="line"></div><div class="line">#### 7. 客户端准备</div><div class="line">这一部分仅作为记录使用，每个公司使用情况不同，我们是提前准备好客户端，然后下发到每一台机器中，具体步骤如下：</div><div class="line">1. 替换掉有bug的jar包： hive-exec-1.2.1.spark2.jar等，这个是我们自己的hive的定制化；</div><div class="line">2. 在lib目录下增加一些需要的包，比如hbase相关的包；</div><div class="line">3. 在conf目录下配置统一的配置文件，比如 定制化的 hive-site.xml，hbase-site.xml 以及一些通用的配置，比如  spark-defaults.conf  spark-env.sh 等。小版本升级的情况下，可以将conf配置文件配置到其它位置，然后以软链接的形式链接过来。</div><div class="line"></div><div class="line">#### 一些报错的解决</div><div class="line">运行的过程中报错：</div><div class="line">``` sh</div><div class="line">[ERROR] Failed to execute goal on project spark-launcher_2.11: Could not resolve dependencies for project org.apache.spark:spark-launcher_2.11:jar:2.2.0: Could not find artifact org.apache.hadoop:hadoop-client:jar:2.6.0-cdh5.4.7 in central (https://repo1.maven.org/maven2) -&gt; [Help 1]</div></pre></td></tr></table></figure>
<p>原因是官网是已经无法找到 hadoop-client:jar:2.6.0-cdh5.4.7 这个版本的jar包</p>
<p>从 (<a href="https://repository.cloudera.com/content/repositories/releases/org/apache/hadoop/hadoop-client/2.6.0-cdh5.4.7/hadoop-client-2.6.0-cdh5.4.7.jar" target="_blank" rel="external">https://repository.cloudera.com/content/repositories/releases/org/apache/hadoop/hadoop-client/2.6.0-cdh5.4.7/hadoop-client-2.6.0-cdh5.4.7.jar</a>) 上下载，然后移动懂mvn 本地仓库中<br>C:\Users\Adam.m2\repository\org\apache\hadoop\hadoop-client\2.6.0-cdh5.4.7</p>
<p>如果第一次编译出错，在第二次重新编译的时候，会出现一个目录无法删除的情况，导致如下报错：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-clean-plugin:3.0.0:clean (default-clean) on project spark-tags_2.11: Failed to clean project: Failed to delete D:\spark\spark-2.2.0-ctcc\spark-2.2.0\common\tags\target\spark-tags_2.11-2.2.0.jar -&gt; [Help 1]</div></pre></td></tr></table></figure></p>
<p>解决方案：跟zinc没有退出有关，在windows当前进程中找到一个Java进程，占用约800M的内存，结束这个进程</p>
<p>再次编译，过段时间继续报错：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.2:compile (scala-compile-first) on project spark-network-yarn_2.11: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.2:compile failed. CompileFailed -&gt; [Help 1]</div></pre></td></tr></table></figure></p>
<p>解决方案：<br>删除 C:\Users\Adam.m2\repository\net\alchim31\maven\scala-maven-plugin\3.2.2 文件，然后重新编译 </p>
<p>会在根目录直接生成 spark-1.6.2-bin-2.6.0-cdh5.4.7.tgz</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Ansable安装管理Spark客户端]]></title>
      <url>http://flume.cn/2017/10/31/%E4%BD%BF%E7%94%A8Ansable%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86Spark%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      <content type="html"><![CDATA[<p>随着生产的spark升级到2.2.0，我要为很多用户同时提供spark2.2.0以及spark1.6.2的客户端，这是一个比较繁琐耗时的操作，很烦，况且其它开发项目比较紧张，我决定学习使用Ansable来统一管理它们。</p>
<h2 id="关于Ansable"><a href="#关于Ansable" class="headerlink" title="关于Ansable"></a>关于Ansable</h2><p>略 配置管理的思想，基于推送的模式</p>
<h2 id="安装spark客户端的思路"><a href="#安装spark客户端的思路" class="headerlink" title="安装spark客户端的思路"></a>安装spark客户端的思路</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (eachNode &lt;- sparkNodes: 所有客户端的机器) &#123;</div><div class="line">	<span class="number">1.</span> 安装jdk1<span class="number">.8</span></div><div class="line">	<span class="number">2.</span> 从主控机传输已经打包好的spark客户端</div><div class="line">	<span class="number">3.</span> 解压到 /usr/local/spark2<span class="number">.2</span></div><div class="line">	<span class="number">4.</span> 配置环境变量</div><div class="line">	<span class="number">5.</span> (可选)配置history-server等其它客户端</div><div class="line">	<span class="number">6.</span> 运行自动化测试程序测试，并生成测试报告</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>tele-spark-version-change 1.6|2.2<br>通过该命令实现spark版本切换，核心就是 export相应的环境变量和PATH</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol>
<li>首先，得打包编译更新好spark客户端，该配的东西配上，该改的jar包改掉，然后放到主控机的files目录下，修改ansible脚本的一些参数；</li>
<li>ssh到 102.133 （master机器，确保该机器与每台机器的ssh免密打通），cd到 spark_client_deploy.yml 所在目录</li>
<li><p>确定想要修改的机器集群名称，修改 hosts文件，比如，要增加新机器组的安装，则增加如下配置：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[yaxin2]</div><div class="line">10.257.101.128</div><div class="line">10.257.101.131</div><div class="line">10.257.101.132</div></pre></td></tr></table></figure>
</li>
<li><p>执行脚本即可：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook spark_client_deploy.yml</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果没有啥问题，就会发现如下输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">PLAY [deploy spark client(for version 1.6.2 or 2.2.1)] ************************ </div><div class="line"></div><div class="line">TASK: [ping] ****************************************************************** </div><div class="line">ok: [10.142.101.132]</div><div class="line">ok: [10.142.101.131]</div><div class="line">ok: [10.142.101.128]</div><div class="line">ok: [10.142.101.129]</div><div class="line">ok: [10.142.97.124]</div><div class="line">ok: [10.142.101.130]</div><div class="line"></div><div class="line">TASK: [mkdir] ***************************************************************** </div><div class="line">ok: [10.142.101.129]</div><div class="line">ok: [10.142.101.131]</div><div class="line">ok: [10.142.101.132]</div><div class="line">ok: [10.142.101.128]</div><div class="line">ok: [10.142.97.124]</div><div class="line">ok: [10.142.101.130]</div><div class="line"></div><div class="line">TASK: [test java8 is exist] *************************************************** </div><div class="line">changed: [10.142.101.129]</div><div class="line">changed: [10.142.101.130]</div><div class="line">changed: [10.142.101.132]</div><div class="line">changed: [10.142.101.128]</div><div class="line">changed: [10.142.101.131]</div><div class="line">changed: [10.142.97.124]</div><div class="line"></div><div class="line">TASK: [copy java8] ************************************************************ </div><div class="line">skipping: [10.142.101.128]</div><div class="line">skipping: [10.142.97.124]</div><div class="line">skipping: [10.142.101.129]</div><div class="line">skipping: [10.142.101.130]</div><div class="line">skipping: [10.142.101.131]</div><div class="line">skipping: [10.142.101.132]</div><div class="line"></div><div class="line">TASK: [extract java] ********************************************************** </div><div class="line">skipping: [10.142.101.129]</div><div class="line">skipping: [10.142.97.124]</div><div class="line">skipping: [10.142.101.128]</div><div class="line">skipping: [10.142.101.132]</div><div class="line">skipping: [10.142.101.130]</div><div class="line">skipping: [10.142.101.131]</div><div class="line"></div><div class="line">TASK: [copy ctcc-spark] ******************************************************* </div><div class="line">ok: [10.142.101.131]</div><div class="line">ok: [10.142.101.128]</div><div class="line">ok: [10.142.101.129]</div><div class="line">ok: [10.142.101.132]</div><div class="line">ok: [10.142.97.124]</div><div class="line">changed: [10.142.101.130]</div><div class="line"></div><div class="line">TASK: [rm old spark2] ********************************************************* </div><div class="line">changed: [10.142.101.130]</div><div class="line">ok: [10.142.101.128]</div><div class="line">ok: [10.142.101.131]</div><div class="line">ok: [10.142.97.124]</div><div class="line">ok: [10.142.101.132]</div><div class="line">ok: [10.142.101.129]</div><div class="line"></div><div class="line">TASK: [extract ctcc-spark] **************************************************** </div><div class="line">changed: [10.142.101.130]</div><div class="line">changed: [10.142.101.131]</div><div class="line">changed: [10.142.101.129]</div><div class="line">changed: [10.142.101.132]</div><div class="line">changed: [10.142.101.128]</div><div class="line">changed: [10.142.97.124]</div><div class="line"></div><div class="line">PLAY RECAP ******************************************************************** </div><div class="line">10.142.101.128             : ok=6    changed=2    unreachable=0    failed=0   </div><div class="line">10.142.101.129             : ok=6    changed=2    unreachable=0    failed=0   </div><div class="line">10.142.101.130             : ok=6    changed=4    unreachable=0    failed=0   </div><div class="line">10.142.101.131             : ok=6    changed=2    unreachable=0    failed=0   </div><div class="line">10.142.101.132             : ok=6    changed=2    unreachable=0    failed=0   </div><div class="line">10.142.97.124              : ok=6    changed=2    unreachable=0    failed=0</div></pre></td></tr></table></figure>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>使用Ansable极大的简化了工作量，而且使得生产的组件管理变得统一，当然这次Ansable的使用很简单，以后有需求可以做很多事情。</p>
<h2 id="附-安装脚本"><a href="#附-安装脚本" class="headerlink" title="附 安装脚本"></a>附 安装脚本</h2><figure class="highlight sh"><figcaption><span>spark_client_deploy.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"><span class="comment"># 自动在多台机器上安装spark客户端</span></div><div class="line">- name: deploy spark client(<span class="keyword">for</span> version 1.6.2 or 2.2.0)</div><div class="line">  vars:</div><div class="line">    ansible_ssh_user: op</div><div class="line">    ansible_ssh_pass: ******</div><div class="line">    spark_auto_path:  /home/op/spark</div><div class="line">      spark_version: spark2.2.1</div><div class="line">    spark_tar_file: ctcc-spark-2.2.1.tar.gz</div><div class="line">    jdk_tar_file: jdk-8u111-linux-x64.tar.gz</div><div class="line">  hosts: yaxin3_2.2.1</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  sudo: True</div><div class="line"></div><div class="line">  tasks:</div><div class="line">    - name: ping</div><div class="line">      ping:</div><div class="line"></div><div class="line">    - name: mkdir</div><div class="line">      file: path=&#123;&#123;spark_auto_path&#125;&#125; state=directory</div><div class="line"></div><div class="line">    - name: <span class="built_in">test</span> java8 is exist</div><div class="line">      shell: <span class="string">'/usr/local/jdk1.8.0_111/bin/java -version'</span></div><div class="line">      register: test_java_result</div><div class="line">      ignore_errors: True</div><div class="line"></div><div class="line">    - name: copy java8</div><div class="line">      copy: backup=no src=files/&#123;&#123;jdk_tar_file&#125;&#125; force=no dest=&#123;&#123;spark_auto_path&#125;&#125;/&#123;&#123;jdk_tar_file &#125;&#125;</div><div class="line">      when: test_java_result.rc != 0</div><div class="line"></div><div class="line">    - name: extract java</div><div class="line"><span class="comment">#       shell: 'sudo tar -xzvf /home/op/spark/jdk-8u111-linux-x64.tar.gz -C /usr/local/' </span></div><div class="line">      shell: <span class="string">'sudo tar -xzvf &#123;&#123;spark_auto_path&#125;&#125;/&#123;&#123;jdk_tar_file &#125;&#125; -C /usr/local/'</span></div><div class="line">      when: test_java_result.rc != 0</div><div class="line"></div><div class="line">    - name: copy ctcc-spark</div><div class="line">      copy: backup=yes src=files/&#123;&#123;spark_version&#125;&#125;/&#123;&#123;spark_tar_file&#125;&#125; dest=&#123;&#123;spark_auto_path&#125;&#125;/&#123;&#123;spark_tar_file&#125;&#125; mode=0755</div><div class="line"></div><div class="line">    - name: rm old spark2</div><div class="line">      file: path=/usr/<span class="built_in">local</span>/spark2.2 state=absent</div><div class="line"></div><div class="line">    - name: extract ctcc-spark</div><div class="line">      shell: <span class="string">'sudo tar -xzvf &#123;&#123;spark_auto_path&#125;&#125;/&#123;&#123;spark_tar_file&#125;&#125; -C /usr/local/'</span></div><div class="line"></div><div class="line">    <span class="comment"># - name: spark home</span></div><div class="line">    <span class="comment">#   shell: sudo echo 'export SPARK_HOME=/usr/local/spark2.2'  &gt;&gt; /etc/profile</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark往ES中写入数据的方法]]></title>
      <url>http://flume.cn/2017/07/17/spark%E5%BE%80ES%E4%B8%AD%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>他们之前把数据导入ES是通过单机的程序导的，或者通过logstash从kafka往ES导，但当数据量很大的时候就会变得很低效，我这两天调研了一下把数据从hdfs直接通过spark导入ES的方法，当然，也适合spark Streaming程序；<br>这里指出版本号是有必要的，spark版本：1.6.2 ES版本：5.2.1，由于ES的API变动比较频繁，因此最好参考官网文档。</p>
<h3 id="连接ES的方法列举"><a href="#连接ES的方法列举" class="headerlink" title="连接ES的方法列举"></a>连接ES的方法列举</h3><ol>
<li>ES官网中给出了一个与spark连接的方法：<a href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/spark.html，是通过RDD可以直接调用" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/hadoop/current/spark.html，是通过RDD可以直接调用</a> saveToEs 方法实现的；</li>
<li>如果数据量不大的话，可以参考ES提供的RestFulAPI来实现，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html</a> ；</li>
<li>本文主要说明我使用的方法，通过 TransportClient 和 bulk 批处理操作来实现，这种方法比较适合数据量很大的情况，又可以灵活处理。<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-docs-bulk.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-docs-bulk.html</a></li>
</ol>
<h3 id="使用TransportClient往ES批量导入的方法"><a href="#使用TransportClient往ES批量导入的方法" class="headerlink" title="使用TransportClient往ES批量导入的方法"></a>使用TransportClient往ES批量导入的方法</h3><p>样例代码如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.net.<span class="type">InetAddress</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</div><div class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.&#123;<span class="type">BulkRequestBuilder</span>, <span class="type">BulkResponse</span>&#125;</div><div class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.<span class="type">TransportClient</span></div><div class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.<span class="type">Settings</span></div><div class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.<span class="type">InetSocketTransportAddress</span></div><div class="line"><span class="keyword">import</span> org.elasticsearch.transport.client.<span class="type">PreBuiltTransportClient</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Author: wangxiaogang</div><div class="line">  * Date: 2017/7/11</div><div class="line">  * Email: Adamyuanyuan@gmail.com</div><div class="line">  * hdfs 中的数据根据格式写到ES中</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HdfsToEs</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">5</span>) &#123;</div><div class="line">      <span class="type">System</span>.err.println(<span class="string">"Usage: HdfsToEs &lt;file&gt; &lt;esIndex&gt; &lt;esType&gt; &lt;partition&gt;"</span>)</div><div class="line">      <span class="type">System</span>.exit(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">val</span> hdfsInputPath: <span class="type">String</span> = args(<span class="number">0</span>)</div><div class="line">    println(<span class="string">"hdfsInputPath: "</span> + hdfsInputPath)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"HdfsToEs"</span>)</div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line"></div><div class="line">    <span class="comment">//插入相关，索引 类型 id相关  以args方式提供接口。</span></div><div class="line">    <span class="keyword">val</span> esIndex: <span class="type">String</span> = args(<span class="number">1</span>)</div><div class="line">    <span class="keyword">val</span> esType: <span class="type">String</span> = args(<span class="number">2</span>)</div><div class="line">    <span class="keyword">val</span> partition: <span class="type">Int</span> = args(<span class="number">3</span>).toInt</div><div class="line">    <span class="keyword">val</span> bulkNum: <span class="type">Int</span> = args(<span class="number">4</span>).toInt</div><div class="line"></div><div class="line">    <span class="keyword">val</span> hdfsRdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(hdfsInputPath, partition)</div><div class="line">    <span class="keyword">val</span> startTime: <span class="type">Long</span> = <span class="type">System</span>.currentTimeMillis</div><div class="line"></div><div class="line">    println(<span class="string">"hdfsRDD partition: "</span> + hdfsRdd.getNumPartitions + <span class="string">" setted partition: "</span> + partition)</div><div class="line"></div><div class="line">    hdfsRdd.foreachPartition &#123;</div><div class="line">      eachPa =&gt; &#123;</div><div class="line"></div><div class="line">        <span class="comment">//        生产环境</span></div><div class="line">        <span class="keyword">val</span> settings: <span class="type">Settings</span> = <span class="type">Settings</span>.builder.put(<span class="string">"cluster.name"</span>, <span class="string">"production-es"</span>).put(<span class="string">"client.transport.sniff"</span>, <span class="literal">true</span>)</div><div class="line">          .put(<span class="string">"transport.type"</span>, <span class="string">"netty3"</span>).put(<span class="string">"http.type"</span>, <span class="string">"netty3"</span>).build</div><div class="line">        <span class="keyword">val</span> client: <span class="type">TransportClient</span> = <span class="keyword">new</span> <span class="type">PreBuiltTransportClient</span>(settings)</div><div class="line">          .addTransportAddress(<span class="keyword">new</span> <span class="type">InetSocketTransportAddress</span>(<span class="type">InetAddress</span>.getByName(<span class="string">"----"</span>), <span class="number">8300</span>))</div><div class="line">          .addTransportAddress(<span class="keyword">new</span> <span class="type">InetSocketTransportAddress</span>(<span class="type">InetAddress</span>.getByName(<span class="string">"----"</span>), <span class="number">8300</span>))</div><div class="line">          .addTransportAddress(<span class="keyword">new</span> <span class="type">InetSocketTransportAddress</span>(<span class="type">InetAddress</span>.getByName(<span class="string">"----"</span>), <span class="number">8300</span>))</div><div class="line">          .addTransportAddress(<span class="keyword">new</span> <span class="type">InetSocketTransportAddress</span>(<span class="type">InetAddress</span>.getByName(<span class="string">"----"</span>), <span class="number">8300</span>))</div><div class="line">          .addTransportAddress(<span class="keyword">new</span> <span class="type">InetSocketTransportAddress</span>(<span class="type">InetAddress</span>.getByName(<span class="string">"----"</span>), <span class="number">8300</span>))</div><div class="line"></div><div class="line">        <span class="keyword">var</span> bulkRequest: <span class="type">BulkRequestBuilder</span> = <span class="literal">null</span></div><div class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span></div><div class="line">        <span class="keyword">var</span> lineNum = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (eachLine &lt;- eachPa) &#123;</div><div class="line">          <span class="comment">// 每个bulk是10-15M为宜，数据封装为bulk后会较原来的数据略有增大，如果每行数据约为 1.5KB，则每 10000 行为一个bulk</span></div><div class="line">          <span class="keyword">if</span> (flag) &#123;</div><div class="line">            bulkRequest = client.prepareBulk</div><div class="line">            flag = <span class="literal">false</span></div><div class="line">          &#125;</div><div class="line">          <span class="keyword">val</span> strArray: <span class="type">Array</span>[<span class="type">String</span>] = eachLine.split(<span class="string">"###"</span>)</div><div class="line">          <span class="keyword">if</span> (strArray.length != <span class="number">25</span>) &#123;</div><div class="line">            <span class="comment">// 表示这行数据又问题，为了不影响整体，则跳过</span></div><div class="line">            println(<span class="string">"ERROR: strArray.length != 25: "</span> + strArray.length + <span class="string">" lineNum: "</span> + lineNum + <span class="string">" strArray(0): "</span> + strArray(<span class="number">0</span>))</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">          	<span class="comment">// LinkedHashMap让ES中的数据变得有序</span></div><div class="line">            <span class="keyword">val</span> esDataMap: java.util.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="keyword">new</span> java.util.<span class="type">LinkedHashMap</span>[<span class="type">String</span>, <span class="type">String</span>]</div><div class="line">            <span class="keyword">val</span> id: <span class="type">String</span> = strArray(<span class="number">0</span>) </div><div class="line">            esDataMap.put(<span class="string">"msisdn"</span>, id)</div><div class="line">            <span class="comment">// 数据合并后的格式为： msisdn###w0的前三###w1的前三###如果为空的话就是null...###w23的前三，共25列</span></div><div class="line">            <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">24</span>) &#123;</div><div class="line">              <span class="keyword">val</span> locTimesListStr = strArray(i)</div><div class="line">              <span class="keyword">val</span> esDataKey = <span class="string">"w"</span> + (i - <span class="number">1</span>)</div><div class="line">              <span class="keyword">if</span> (locTimesListStr == <span class="literal">null</span> || locTimesListStr.isEmpty || locTimesListStr.equals(<span class="string">"null"</span>)) &#123;</div><div class="line">                esDataMap.put(esDataKey, <span class="string">""</span>)</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                esDataMap.put(esDataKey, locTimesListStr)</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">            bulkRequest.add(client.prepareIndex(esIndex, esType, id).setSource(esDataMap))</div><div class="line">            lineNum += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> (lineNum % bulkNum == <span class="number">0</span>) &#123;</div><div class="line">              <span class="keyword">val</span> endTime: <span class="type">Long</span> = <span class="type">System</span>.currentTimeMillis</div><div class="line">              println(<span class="string">"bulk push， current lineNum: "</span> + lineNum + <span class="string">", currentTime s: "</span> + ((endTime - startTime) / <span class="number">1000</span>))</div><div class="line">              <span class="keyword">val</span> bbq: <span class="type">BulkResponse</span> = bulkRequest.execute.actionGet()</div><div class="line">              flag = <span class="literal">true</span></div><div class="line">              <span class="keyword">if</span> (bbq.hasFailures) &#123;</div><div class="line">                println(<span class="string">"bbq.hasFailures: "</span> + bbq.toString)</div><div class="line">                bulkRequest.execute.actionGet</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (bulkRequest != <span class="literal">null</span>) &#123;</div><div class="line">          bulkRequest.execute().actionGet()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        client.close()</div><div class="line">        <span class="keyword">val</span> endTime: <span class="type">Long</span> = <span class="type">System</span>.currentTimeMillis</div><div class="line">        println(<span class="string">"ths time is: "</span> + (endTime - startTime) / <span class="number">1000</span> + <span class="string">"s "</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    sc.stop()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>踩坑说明：在编写代码中踩了如下坑：</p>
<ol>
<li><p>依赖冲突的问题： ES5.2与Spark1.6有如下包会产生依赖： <code>netty-all:io.netty</code>，<code>com.fasterxml.jackson.core:jackson-core</code>, <code>org.apache.logging.log4j:log4j-core</code>.<br>解决方案：<br>通过 <code>mvn dependency:tree -Dverbose -Dincludes=com.fasterxml.jackson.core</code> 命令查出依赖原因，然后在pom.xml中增加所需的相关依赖的最高版本；</p>
</li>
<li><p>每个bulk的大小，根据网上的经验是10M-15M为宜，大概计算一下就好了；</p>
</li>
<li><p>后来在单机测试通过，但在集群模式中还是会出现 netty4的依赖冲突：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">17/07/17 10:21:57 ERROR util.SparkUncaughtExceptionHandler: Uncaught exception in thread Thread[elasticsearch[_client_][management][T#1],5,main]</div><div class="line">java.lang.NoSuchMethodError: io.netty.buffer.CompositeByteBuf.addComponents(ZLjava/lang/Iterable;)Lio/netty/buffer/CompositeByteBuf;</div><div class="line">        at org.elasticsearch.transport.netty4.Netty4Utils.toByteBuf(Netty4Utils.java:78)</div><div class="line">        at org.elasticsearch.transport.netty4.Netty4Transport.sendMessage(Netty4Transport.java:422)</div><div class="line">        at org.elasticsearch.transport.netty4.Netty4Transport.sendMessage(Netty4Transport.java:93)</div><div class="line">        at org.elasticsearch.transport.TcpTransport.internalSendMessage(TcpTransport.java:1058)</div><div class="line">        at org.elasticsearch.transport.TcpTransport.sendRequestToChannel(TcpTransport.java:1040)</div><div class="line">        at org.elasticsearch.transport.TcpTransport.executeHandshake(TcpTransport.java:1555)</div><div class="line">        at org.elasticsearch.transport.TcpTransport.openConnection(TcpTransport.java:502)</div><div class="line">        at org.elasticsearch.transport.TcpTransport.connectToNode(TcpTransport.java:460)</div><div class="line">        at org.elasticsearch.transport.TransportService.connectToNode(TransportService.java:318)</div><div class="line">        at org.elasticsearch.client.transport.TransportClientNodesService$SniffNodesSampler$1.run(TransportClientNodesService.java:488)</div><div class="line">        at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:527)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</div><div class="line">        at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>有一种解决方案我没有尝试成功，就是在pom中将冲突的依赖包exclusions掉，各位感兴趣可以尝试，成功了麻烦告知我一下。参考链接：<a href="https://www.elastic.co/blog/to-shade-or-not-to-shade" target="_blank" rel="external">https://www.elastic.co/blog/to-shade-or-not-to-shade</a>, 使用 maven-shade-plugin 工具打包。</p>
<p>上个方法我尝试几次不成功后，使用了比较暴力的方法，直接将ES的netty参数由netty4改成了netty3，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.put(&quot;transport.type&quot;, &quot;netty3&quot;).put(&quot;http.type&quot;, &quot;netty3&quot;).build</div></pre></td></tr></table></figure></p>
<p>好了，打包好之后，程序就可以完美运行了。</p>
<h3 id="ES中创建索引"><a href="#ES中创建索引" class="headerlink" title="ES中创建索引"></a>ES中创建索引</h3><p>就算如果ES中是自动创建索引的，也希望你能手动创建索引和字段属性，因为默认的字段属性是Text，ES会自动对它进行分词相关的操作，如果ES中存的字符串你不想让它被分隔的话，就用keyword替代为Text类型，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">PUT  /weekend-20170718</div><div class="line">&#123;</div><div class="line">  &quot;settings&quot; : &#123;</div><div class="line">    &quot;index&quot; : &#123;</div><div class="line">      &quot;number_of_shards&quot; : 5, </div><div class="line">      &quot;number_of_replicas&quot; : 1,</div><div class="line">      &quot;refresh_interval&quot; : &quot;60s&quot;</div><div class="line">    &#125;,</div><div class="line">  &quot;index.routing.allocation.include.zone&quot;: &quot;light&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;mappings&quot;: &#123;</div><div class="line">    &quot;offline&quot;: &#123;</div><div class="line">      &quot;properties&quot;: &#123;</div><div class="line">        &quot;msisdn&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;keyword&quot; </div><div class="line">        &#125;,&quot;w0&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;keyword&quot; </div><div class="line">        &#125; ...后面省略</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建好索引后检查一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /weekend-20170718/_mapping</div></pre></td></tr></table></figure>
<h3 id="集群中运行"><a href="#集群中运行" class="headerlink" title="集群中运行"></a>集群中运行</h3><p>这个比较简单，只需要注意以下几点就好了：</p>
<ol>
<li>使用jdk1.8版本；</li>
<li>注意内存的申请，可能会出现跑了一段时间后，内存不够用导致程序退出的情况；</li>
<li>观测好ES集群的状态，一段时间后，ES机器的GC比较高</li>
<li>最好别一下子跑所有数据，分几批跑，这样就算出问题，只需要重跑那一部分就好了</li>
</ol>
<p>数据：通过观察，导入的速度随着时间的增长呈下降趋势，整体来说，ES集群隔离的小集群共有五台物理机，共2.23亿条，751G的数据导入用了约4.5小时，平均速度为 45M/s, 1.38W条/s。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>感谢 技术交流群里 @叫我老陈行了吧，@岑玉海 等大神网友；</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-docs-bulk.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-docs-bulk.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark在yarn中运行jdk8]]></title>
      <url>http://flume.cn/2017/07/17/spark%E6%8C%87%E5%AE%9Ajava%E7%89%88%E6%9C%AC%E5%90%91yarn%E6%8F%90%E4%BA%A4%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>我们hadoop集群使用jdk版本为1.7，由于往5.X的ES中写数据必须要使用jdk1.8，该怎么办呢？<br>首先，把hadoop集群升级到jdk1.8是肯定可以的，但是这样代价太大。<br>我们通过如下两步操作，就可以在不升级集群的基础上，在yarn上运行用jdk1.8编译的spark程序。</p>
<ol>
<li>yarn集群的每台nodeManager都需要安装jdk1.8，比如我们这边的安装路径是 <code>/usr/local/jdk1.8.0_111</code></li>
<li>spark作业提交的时候，增加如下参数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--conf &quot;spark.yarn.appMasterEnv.JAVA_HOME=/usr/local/jdk1.8.0_111&quot; --conf &quot;spark.executorEnv.JAVA_HOME=/usr/local/jdk1.8.0_111&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样就能使用jdk1.8啦，亲测可用</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[返回区域实时人数的思路与总结]]></title>
      <url>http://flume.cn/2017/06/29/%E8%BF%94%E5%9B%9E%E5%8C%BA%E5%9F%9F%E5%AE%9E%E6%97%B6%E4%BA%BA%E6%95%B0%E7%9A%84%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>先说一下整个位置服务的背景，需求比较复杂，细节比较多，在这里简明扼要说一下：</p>
<ol>
<li>用户A(spId)在中国地图上画了100个圆圈(locationId)，想让我们实时告诉他这些圈内新来的人和他的位置信息，哪些是游客哪些是土著；</li>
<li>A的100个圆圈会随时修改，增大，变小，或者再多加100个圈圈，我们要不停程序，秒级给他这些数据；</li>
<li>A觉得这样推送的数据量太大，因为有的人本来就住这个圈里，所以对每个不同的圈，里面的人在 7天（可调）之内不重复；</li>
<li>用户B也想使用这个服务，在中国地图上画了100个圈，B的圈和A的圈可能重复可能不重复，需求是一样的；</li>
<li>用户C也想使用这个服务，不过他觉得画个圈不符合他的要求，他要在地图上随便画100个什么图形，然后给他他想要的数据；</li>
<li>用户D也想使用这个服务，不过他不想要知道这个图形里的人的细节，而是只想实时知道这个图形当下有多少人。</li>
</ol>
<p><strong>本文只关注返回区域实时人数的需求：</strong></p>
<p>需求分为两大类，第一类是返回刚进入这个区域的人（返回明细），这个实现起来比较简单，因为它没有窗口的概念，只需要有数据过来，通过redis和mysql，经过一系列计算，判断它在景区并且是新来的人的话，直接推送到下游就好了；<br>第二个需求是实时返回这个区域的当前人数（返回人数）。这个听起来好像挺简单，比如当前上海迪士尼有56000个人，就给订阅者 56000这个数字就好了，但仔细思考一下就会发现较难实现，主要原因如下：</p>
<ol>
<li>实时上传过来的数据并不是全量数据，如果以5s为一批，这批上传的数据可能只占全国总量2亿用户中的100W条，这样就导致无法在一批数据中就得到结果；</li>
<li>用户上传数据的频率也是不一致的，有的可能一分钟会发多条，有的可能四五十分钟才会上传一条，有的干脆好久都不会上传；</li>
<li>多个订阅者同时订阅多个景区，每个订阅者的数据都要是对的；</li>
<li>数据量太大，导致难以用时间窗口把它装住，数据还是得流进来，五秒内就得流出去；</li>
</ol>
<h2 id="一些简单可能的方案"><a href="#一些简单可能的方案" class="headerlink" title="一些简单可能的方案"></a>一些简单可能的方案</h2><p>为了满足上述需求，之前提出过一些方案：</p>
<ol>
<li>每次处理一个小时的数据，因为大概一个小时以内，所有的用户基本都会上传一遍数据，这样通过去重就能知道上个小时该区域的人数的，但这是相当于批处理，没有实时性，是最差的选择了；</li>
<li>使用时间窗口，维护所有用户当前的位置信息，每隔一段时间计算，然后输出（类型与Apache Beam的定义模式），这个由于数据量太大，难以实现，因为有其它方案，所以也没有尝试；</li>
<li>使用外部的一个数据库，维护所有用户的当前位置信息，然后每次计算，输出；如果用户量在千万级别以下的话，觉得用Mysql就可以了，但是2亿的用户，Mysql难以胜任，如果用Hbase或redis保存所有人状态的话，的话，每次统计计算多个区域的人数信息需要的计算量也很大，后来也没有尝试；</li>
</ol>
<h2 id="基于双层redis的方案"><a href="#基于双层redis的方案" class="headerlink" title="基于双层redis的方案"></a>基于双层redis的方案</h2><h3 id="方案思路"><a href="#方案思路" class="headerlink" title="方案思路"></a>方案思路</h3><p>首先引入两个状态：用户这次是否在景区 thisTime 和 用户上次是否在景区 lastTime，基于这两个状态，可以得到如下表格</p>
<table>
<thead>
<tr>
<th>用户位置判断</th>
<th>本次是否在该区域</th>
<th>上次是否在该区域</th>
<th>处理逻辑</th>
</tr>
</thead>
<tbody>
<tr>
<td>情况1</td>
<td>0</td>
<td>0</td>
<td>不处理</td>
</tr>
<tr>
<td>情况2</td>
<td>0</td>
<td>1</td>
<td>原子删除（一级总表和二级表）</td>
</tr>
<tr>
<td>情况3</td>
<td>1</td>
<td>0</td>
<td>原子增加（一级总表和二级表）</td>
</tr>
<tr>
<td>情况4</td>
<td>1</td>
<td>1</td>
<td>不处理</td>
</tr>
</tbody>
</table>
<p>如上表格所示，每个人都维护这次与上次两个状态，如果这个人这次不在该区域，上次也不在该区域，说明什么都不需要做，如果这个人这次不在该区域，上次在，说明这个人离开了这个区域，则就要把它从该区域中剔除；同理可得，如果这次在，上次不在，就把该用户加到该区域。这样一来，我们就可以对每个区域的人了如指掌，而且在理论上，这是目前位置最精确的判断方法。</p>
<h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h3><p>这套方案在这个问题上是可行的，虽然用户的位置轨迹类似于用户登陆网页的轨迹，但是又有极大的不同，因为每个人虽然都可离开这个网站，但是每个人都不会跳出地球！如果是网站的话，我只知道你访问了我这个网页所做的操作，但我不知道你什么时候没有访问我的网页，比如你从baidu.com跑到了google，baidu的数据里是不知道的，但你从这个区域跑到另外一个区域，我们的数据里是知道的，这就让该方案可行。</p>
<h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>如下图右侧是实现方案的简化版，我们使用了双层redis的方法实现了这个思路，第一层redis的数据结构为hash，订阅者id(spId)命名(当然实际名称多了些前缀)，key是电话号码msisdn，value是它对应的区域id(locationId)，第二层redis的数据结构为Set，以区域id(locationId)命名，里面直接是 msisdn。<br><img src="/2017/06/29/返回区域实时人数的思路与总结/wzfw2_2.png" alt="wzfw2_2.png" title=""><br>判断本次是否在景区，直接根据位置算法进行计算就可以知道了，判断上次是否在景区，只需要循环去第一层redis中查有没有这个msisdn，如果有就返回它的locationId，如果没有，就说明该用户不在任何景区。如果要往该景区增加这个人，则需要同时往一级redis和二级对应的某一个redis中同时增加，同理，删除的话同时删除。值得注意的是，redis本身支持的事务并不支持回滚，所以还是要自己去控制它，通过返回值来进行原子删除和增加。上述操作的时间复杂度均为O(1)，道理上讲还是很快的。然后每个set都代表一个景区，想知道它的人数，so easy，O(1)的时间复杂度就能搞定了，连具体是谁都能列出来。</p>
<p>当然具体的代码实现就繁杂很多了：</p>
<ol>
<li>因为是不同的订阅者订阅好多景区，一个用户可能同时在多个订阅者订阅的好多个景区，这就要循环判断很多，会存在RDD的一条输入，输出是多条的情况；</li>
<li>除了上述四种情况，还有几种情况需要考虑到，比如这个人从这个区域跑到同一个订阅者订阅的另一个区域的话，就需要使用 redis set的move操作，同时改变一级hash表的值。如果跑到另一个订阅者的另一个区域的话，又会有它相应的逻辑。<br>但大部分情况下还是以上四种逻辑，毕竟中国很大，订阅的区域间距还是比较远的。</li>
<li>为了防止各种原因导致redis中脏数据的产生，在存入的时候会加一个时间戳，如果时间过长，就会将其中的数据删除。<br>实现逻辑大概代码流程图如下：<img src="/2017/06/29/返回区域实时人数的思路与总结/wzfw2_3.png" alt="wzfw2_3.png" title="">
</li>
</ol>
<p>为什么要以双层redis的方法呢？单层的不行嘛？由于我们的数据量非常大，如果仅仅是单层的hash的话，每次去计算某个景区的人数，又要把所有的数据全部遍历一遍，这个性能消耗是非常大的，这里采用空间换时间的方法，用极少的空间，节省了大量的时间。说白了，如果数据量小的话，用mysql之类的关系型数据库最好了，查的时候只要类似于<code>select count(*) from spId where locationId = locationA</code>之类的语句就可以了。使用Hbase能不能达到这个要求呢？个人没有进行过更深入的调研，浅薄地认为因为hbase的数据本身是存在hdfs的，如果是全量数据的话，它缓存命中的概率是比较低的，这样延迟会比较大，那么大的数据，难以秒级全部响应，所以就再也没有深入调研。</p>
<h3 id="问题与提高"><a href="#问题与提高" class="headerlink" title="问题与提高"></a>问题与提高</h3><p>这个方案，理论上的结果是很精确的，但是它有一个小问题，就是在判断用户上次是否在该区域的时候，“在判断该用户上次是否在该区域之前，我们是不知道他上次是否在某个区域的”，这话听起来比较拗口，换一种方式表达：对于全国每一个用户的每一条数据，我们都要判断它上次是否在某个区域，这代表20W/s的redis读！当然我这边会做一些优化，先根据城市id进行过滤，仅仅读相关城市的数据，不过这个数据量也是比较大的，也到了1W/s的级别。</p>
<p>实际生产压测过程中，当全量数据上来后，由于redis的每次连接导致网络IO过多，响应会变慢，导致程序会逐渐产生延迟，也影响到了稳定运行的明细数据需求，所以存在问题！</p>
<p>由于我们的redis是与其它需求共用的，并且当时为了稳定使用的sentinel模式，也难以在有限的几天内就申请到cluster模式的redis集群，也难以使用pipeline来优化，还有几天就要上线了。所以提出了下面的基于数据过期的模糊方案来进行过渡。</p>
<h2 id="基于数据过期的模糊方案"><a href="#基于数据过期的模糊方案" class="headerlink" title="基于数据过期的模糊方案"></a>基于数据过期的模糊方案</h2><p>提出模糊方案的一个前提是，用户上传的数据本来就是模糊的，如果一个用户半个小时上传一次他的位置数据，我们无法得知他在这半个小时之间的位置，也无法得知他下半个小时在哪里</p>
<h3 id="方案思路-1"><a href="#方案思路-1" class="headerlink" title="方案思路"></a>方案思路</h3><p>用户每次进入某个区域后，就将它存入该区域集合中，不用考虑其它，区域中的数据是有时效的，超过30min(可调)后，区域中的数据就会被直接删除。</p>
<h3 id="实现方案-1"><a href="#实现方案-1" class="headerlink" title="实现方案"></a>实现方案</h3><p>对于每一个位置 locationId，我们使用redis的 sorted set数据结构，里面保存的值是msisdn，里面的score值是当前时间戳精确到分钟。它插入(zadd)的时间复杂度是O(log(N))，移除(ZREMRANGEBYSCORE)的时间复杂度是 O(log(N)+M)。每次有符合条件的数据，我们就直接插入到相应的locationId，然后异步地通过外部程序，对其中过期超过30min(可调)的数据进行批量删除，实际中这个删除是在spark Streaming的driver中实现每10s删除一次。</p>
<p>该方案虽然在插入时时间复杂度有所增加，但是极大得简化了redis的连接次数，ZREMRANGEBYSCORE操作也只是统一每隔10s执行一次，最终程序稳定运行在了生产。</p>
<h3 id="问题与提高-1"><a href="#问题与提高-1" class="headerlink" title="问题与提高"></a>问题与提高</h3><p>该方案的优点是简单易行，问题是它并不像上一个方案一样是理论上精确的，但由于原始数据并不精确，所以有它存在的道理。<br>关于超时删除时间，这个时间是可以调优的，调优方案很简单，就一个变量而已，通过批处理的方式对区域的数据进行精确的统计，然后对比两者的结果，最终找出一个最靠谱的超时删除时间。<br>当然，区域的订阅面积越大，redis的响应就越慢，所以当订阅面积大到一定程度，redis肯定也是扛不住的。</p>
<h2 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h2><ol>
<li>判断区域人数是一个比较通用的需求，比如判断当前网站在线用户数，当前频道观众，但是具体实现起来的确觉得不那么简单，我目前能想到的算法就这两个，总觉得会有更好的方法，不同的问题背景产生不同的方法；</li>
<li>我们设计与实现双层redis方法的时候，没有考虑到redis网络IO过多导致延迟的问题，以后一定要评估好性能瓶颈，提前申请机器；</li>
<li>有时候追求完美不是好事，完美得向现实妥协，最优的算法并不是最适合的，要在满足需求的基础上，以最少的代码完成这个事情，增加鲁棒性；</li>
<li>之前对时间窗口相关的不太深入，接下来深入理解一下structured Streaming与Apache Beam的API的逻辑；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[位置服务开发上线总结————实时数据推送]]></title>
      <url>http://flume.cn/2017/06/28/%E4%BD%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E4%B8%8A%E7%BA%BF%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="天作棋盘星作子，谁人能下？-地为琵琶路为弦，哪个敢弹！"><a href="#天作棋盘星作子，谁人能下？-地为琵琶路为弦，哪个敢弹！" class="headerlink" title="天作棋盘星作子，谁人能下？ 地为琵琶路为弦，哪个敢弹！"></a>天作棋盘星作子，谁人能下？ 地为琵琶路为弦，哪个敢弹！</h4><p>位置服务项目不止一期，也断断续续写了一年，不知从哪里谈起，在此着重记录一些问题以及一些解决方案，重要的是在解决问题过程中的思考。</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>需求比较复杂，细节比较多，在这里简明扼要说一下：</p>
<ol>
<li>用户A(spId)在中国地图上画了100个圆圈(locationId)，想让我们实时告诉他这些圈内新来的人和他的位置信息，哪些是游客哪些是土著；</li>
<li>A的100个圆圈会随时修改，增大，变小，或者再多加100个圈圈，我们要不停程序，秒级给他这些数据；</li>
<li>A觉得这样推送的数据量太大，因为有的人本来就住这个圈里，所以对每个不同的圈，里面的人在 7天（可调）之内不重复；</li>
<li>用户B也想使用这个服务，在中国地图上画了100个圈，B的圈和A的圈可能重复可能不重复，需求是一样的；</li>
<li>用户C也想使用这个服务，不过他觉得画个圈不符合他的要求，他要在地图上随便画100个什么图形，然后给他他想要的数据；</li>
<li>用户D也想使用这个服务，不过他不想要知道这个图形里的人的细节，而是只想实时知道这个图形当下有多少人。</li>
</ol>
<p>上面是位置服务二期的需求的简单总结，一期太简单不值一提，三期主要是数据的存储，以后再谈，这里只提二期。</p>
<p>最终，我们采用spark streaming来实现了上述需求，使用一个Spark Streaming程序支持多用户随时订阅随时修改，在yarn持续稳定运行超过一千个小时。</p>
<h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><p>用户的位置数据是实时得通过kafka传过来的，数据量大概为几十万条每秒，以一个电话号码msisdn表示一个用户，每条数据都代表一个用户当前所在的经纬度位置，以及一些省市相关的信息；<br>每个用户的数据，平均每隔半个多小时会上传一条，当然实际情况不是这样简单；</p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>整体架构如下图，我们借助kafka作为数据源的数据中转，redis作为数据缓存，mysql来实现实时订阅，flume来作为数据管道，Spring写的订阅服务以及基于SpringCloud的微服务来实现一些查询功能和监控功能，zabbix主要用户监控和报警，后期引入ES实现了数据多样化数据的存储；<br><img src="/2017/06/28/位置服务开发上线总结/wzfw2_1.png" alt="wzfw2_1.png" title=""></p>
<p>整体记录意义不大，这里着重介绍遇到的一些问题：</p>
<h2 id="1-spark-Streaming程序在yarn上稳定运行的问题"><a href="#1-spark-Streaming程序在yarn上稳定运行的问题" class="headerlink" title="1. spark Streaming程序在yarn上稳定运行的问题"></a>1. spark Streaming程序在yarn上稳定运行的问题</h2><p>这个问题的解决需要多方面的支持：</p>
<ol>
<li>首先我们是基于Kerberos的，在hdp2.6上如果nn有主备的话，有一个大坑，导致超过两天就不行，需要hadoop打个patch或者spark打个patch，传送门：<a href="http://flume.cn/2016/11/24/Spark%E8%B8%A9%E5%9D%91%E4%B9%8BStreaming%E5%9C%A8Kerberos%E7%9A%84hadoop%E4%B8%ADrenew%E5%A4%B1%E8%B4%A5/">Spark踩坑之Streaming在Kerberos的hadoop中renew失败</a></li>
<li>spark Streaming的稳定运行需要yarn的稳定，如果你依赖kafka的话，需要kafka稳定，我们遇到多次kafka找不到broker的错误，导致spark崩溃，所以要做好监控</li>
<li>spark Streaming开发连接redis与mysql的时候也踩了一些坑，请看踩坑集锦；</li>
<li>如果你的日志是INFO模式的话，请改成WARN模式，过多的日志会让程序变得不稳定，当时忘记把日志模式改成WARN，导致程序跑了两个月的日志是几百G。。。</li>
<li>无论如何，由于程序依赖的组件较多，不敢说spark Streaming永远稳定，所以要做好程序的监控与失败后的拉起以及数据的恢复，我们这边写了一个通用的脚本，通过yarn的API实时监控Streaming程序的状态，然后发送zabbix记录与报警，如果发现挂了，就自动拉起，以防万一；</li>
</ol>
<h2 id="2-判断一个用户是否在该区域的算法"><a href="#2-判断一个用户是否在该区域的算法" class="headerlink" title="2. 判断一个用户是否在该区域的算法"></a>2. 判断一个用户是否在该区域的算法</h2><p>圆形：只需要判断圆形中心点和用户所在的点的半径是否小于圆形的半径即可。<br>任意规则图形：根据PNPoly 算法实现。<br>都是现成的算法用Scala简单实现了而已。<a href="http://flume.cn/2016/11/24/%E9%80%9A%E8%BF%87%E7%BB%8F%E7%BA%AC%E5%BA%A6%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E7%AE%97%E6%B3%95%E7%9A%84scala%E5%AE%9E%E7%8E%B0/">传送门</a></p>
<p>值得一提的是，如果全国的每条数据都对每个区域来判断，这个计算量太大了，我们在进行区域判断之前做了一个优化，优化方案如下：<br>订阅者订阅的每个区域都会有一个它所属的城市列表(如果在多个城市之间，则它属于多个城市)，这样我们会通过实时扫描数据库，统一实时得去维护一个 HashMap，它的数据结构如下：<br>util.HashMap[Int, util.LinkedList[PositionSubData]]，这里以城市id为key，以订阅景点的数据结构 PositionSubData 的列表为value，代表这个城市里的所有区域信息。<br>这样的话，每次有新数据过来，首先判断一下它在不在订阅到的城市，如果在该城市，再只要判断它所属的那几个景区就好了。</p>
<h2 id="3-spark开发过程中的一些踩坑经验"><a href="#3-spark开发过程中的一些踩坑经验" class="headerlink" title="3. spark开发过程中的一些踩坑经验"></a>3. spark开发过程中的一些踩坑经验</h2><p>网上有很多经验，这里总结网上没有的，或者不常发现的：</p>
<ol>
<li>通过RDD的flatMap方法，可以实现map方法和filter方法效果的结合，也可以实现每一条输入数据，可以输出多条数据的情况；<a href="http://flume.cn/2017/06/22/spark%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E6%80%BB%E7%BB%93%E4%B9%8BflatMap/">传送门</a></li>
<li>不是所有的方法都用foreachRDD就可以的，因为有监控的需求，必须要在transform方法中实现一些复杂的逻辑，我们知道spark是lazy的，所以在编写过程中(尤其与外部redis或者mysql进行交互)要注意很多细节；这里不详细展开，看我其它相关总结；</li>
<li>如果有多个action操作的话，一定要cache，否则前面会执行多次，不仅仅会浪费计算，更会导致结果是错误的（如果依赖redis或者mysql类似的外部数据的话）；</li>
<li>很多时候会觉得，这个需求在流处理里是根本无法实现的感觉，但到最后发现没有什么需求是不能实现的，不过总会有比你的方案更优的方案；</li>
<li>前期组件的性能调研非常重要，预估需要的性能非常重要，写到后面大数据量上来了后才发现，组件扛不住，就坑了。。。</li>
</ol>
<h2 id="4-返回区域实时人数的思路与总结"><a href="#4-返回区域实时人数的思路与总结" class="headerlink" title="4. 返回区域实时人数的思路与总结"></a>4. 返回区域实时人数的思路与总结</h2><p><a href="http://flume.cn/2017/06/29/%E8%BF%94%E5%9B%9E%E5%8C%BA%E5%9F%9F%E5%AE%9E%E6%97%B6%E4%BA%BA%E6%95%B0%E7%9A%84%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%80%BB%E7%BB%93/">传送门</a></p>
<h1 id="思考与未来"><a href="#思考与未来" class="headerlink" title="思考与未来"></a>思考与未来</h1><p>Spark Streaming基本上可以实现大部分的业务需求，但是一些时间窗口相关的需求难以搞定，需要借助外部存储机制来完善，接下来主要做以下几件事：</p>
<ol>
<li>实时程序的部署监控报警的统一化；现在从kafka导数据到其它组件还没有做到自动化，需要人肉运维，并且flume的配置也是基于命令行的，这些都需要统一；</li>
<li>调研与应用structured Streaming；</li>
<li>根据需求，完成流式计算平台，将简单的逻辑傻瓜化，用户只需要输入简单的一些指令或者sql语句，就能实现程序的调试，部署与上线；</li>
<li>跟着Apache Beam的发展，逐渐将业务逻辑与处理引擎分开，这是大势所趋。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark奇技淫巧总结之强大的flatMap]]></title>
      <url>http://flume.cn/2017/06/22/spark%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E6%80%BB%E7%BB%93%E4%B9%8BflatMap/</url>
      <content type="html"><![CDATA[<p>spark RDD与DStream API支持很多好用的算子，最常用的莫过于map和filter了，顾名思义可知：<br><strong>map</strong>： 返回一个新的分布式数据集，其中每个元素都是由源RDD中一个元素经func转换得到的；<br><strong>filter</strong>： 返回一个新的数据集，其中包含的元素来自源RDD中元素经func过滤后（func返回true时才选中）的结果；</p>
<p>举个例子：如下RDD a 的一个partition有10个元素，那么：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">val</span> a: <span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Seq</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"4"</span>, <span class="string">"3"</span>, <span class="string">"3"</span>, <span class="string">"1"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>))</div><div class="line"><span class="comment">// 后的结果肯定有 10个元素</span></div><div class="line"><span class="keyword">val</span> b: <span class="type">RDD</span>[<span class="type">String</span>] = a.map(func1()) </div><div class="line"><span class="comment">// 后的结果肯定 &lt;= 10个元素，并且元素的内容不会改变</span></div><div class="line"><span class="keyword">val</span> c: <span class="type">RDD</span>[<span class="type">String</span>] = a.filter(func2())</div></pre></td></tr></table></figure>
<p>通过类似如上样例代码，可知，如果你要转化内容，通过map，10个元素变化后还是10个元素，如果你想过滤内容，c 通过a过滤后，虽然一些值被过滤掉了，<strong>但是没被过滤掉的值依然没有变化</strong>。</p>
<p>先看flatMap的spark官网文档的官方解释：<br><strong>类似于map，但每个输入元素可以映射到0到n个输出元素（所以要求func必须返回一个Seq而不是单个元素）。</strong><br>RDD API的解释：<br><strong>Return a new RDD by first applying a function to all elements of this RDD, and then flattening the results.</strong></p>
<p>无论网上的一些例子还是解释，都给人一种flatMap只能把数据“压扁”的感觉。其实flatMap不仅仅能把数据压扁，还能把数据“拔高”，还能把数据“过滤”。flatMap不像map，只能1对1，也不像filter，只能1对1或0(还不能改变数据)，它是1对n(自然数)的。</p>
<h3 id="解决边处理边过滤的需求"><a href="#解决边处理边过滤的需求" class="headerlink" title="解决边处理边过滤的需求"></a>解决边处理边过滤的需求</h3><p>我在开发中遇到过很多次这种需求：<strong>既要改变内容，同时不符合要求的数据需要过滤</strong>，这种情况下该怎么办呢？</p>
<h4 id="简单方案"><a href="#简单方案" class="headerlink" title="简单方案"></a>简单方案</h4><p>先filter，然后map，或者先map，然后filter，这样都可以完成这种需求，但是它有以下问题：</p>
<ol>
<li>重复计算了，map和filter中很多类似的逻辑都要多算一遍，这在大量数据集下是不可容忍的；</li>
<li>对于有些判断，只可能判断一次，第二次计算结果会不一样，比如在transform中需要与外界redis等交互的判断，这种情况下，结果都是错误的；</li>
</ol>
<p>这种情况下，就可以用flatMap来解决，嘿嘿~</p>
<p>直接说解决方案吧：对数据进行flatMap进行转换，如果不符合要求要过滤，则直接返回 None即可，样例代码如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(classOf[<span class="type">JUnitRunner</span>])</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlatMapTest</span> <span class="keyword">extends</span> <span class="title">FunSuite</span> <span class="keyword">with</span> <span class="title">Matchers</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">    * 测试 rdd FlatMapTest 的过滤用法是否可行</div><div class="line">    */</div><div class="line">  test(<span class="string">"FlatMapTest should work"</span>) &#123;</div><div class="line">    println(<span class="string">"FlatMapTest  started"</span>)</div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"Simple Application"</span>).setMaster(<span class="string">"local"</span>)</div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line">    <span class="keyword">val</span> a: <span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Seq</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"4"</span>, <span class="string">"3"</span>, <span class="string">"3"</span>, <span class="string">"1"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>))</div><div class="line">    <span class="keyword">val</span> b: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">String</span>)] = a.map(f =&gt; (f, f + <span class="string">"asd"</span>))</div><div class="line">    <span class="keyword">val</span> c = b.mapPartitions &#123;</div><div class="line">      eachPar =&gt; &#123;</div><div class="line">        eachPar.flatMap(f =&gt;</div><div class="line">          <span class="keyword">if</span> (f._2.startsWith(<span class="string">"3"</span>)) &#123;</div><div class="line">            <span class="type">Some</span>(f._1, f._2 + <span class="string">"--b"</span>)</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="type">None</span></div><div class="line">          &#125;</div><div class="line">        )</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    c.cache()</div><div class="line">    c.foreach(println(_))</div><div class="line">    println(c.count())</div><div class="line">    c.unpersist()</div><div class="line">    println(<span class="string">"FlatMapTest ended"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述的代码就可以做到处理的过程中进行过滤了~</p>
<h3 id="解决一条数据对应多条数据的需求"><a href="#解决一条数据对应多条数据的需求" class="headerlink" title="解决一条数据对应多条数据的需求"></a>解决一条数据对应多条数据的需求</h3><p>我在开发中也遇到过这种需求：<strong>RDD中一个元素处理后可能会变成多个元素</strong>，比如一个用户可能会同时在多个景区存在，为了便于统计和输出，需要同时输出多个，这种情况下可以用flatMap来解决：</p>
<p>首先看看RDD flatMap的定义：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  Return a new RDD by first applying a function to all elements of this</div><div class="line"> *  RDD, and then flattening the results.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](f: <span class="type">T</span> =&gt; <span class="type">TraversableOnce</span>[<span class="type">U</span>]): <span class="type">RDD</span>[<span class="type">U</span>] = withScope &#123;</div><div class="line">  <span class="keyword">val</span> cleanF = sc.clean(f)</div><div class="line">  <span class="keyword">new</span> <span class="type">MapPartitionsRDD</span>[<span class="type">U</span>, <span class="type">T</span>](<span class="keyword">this</span>, (context, pid, iter) =&gt; iter.flatMap(cleanF))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它底层调用的是 Iterator 的flatMap<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Creates a new iterator by applying a function to all values produced by this iterator</span></div><div class="line"> *  and concatenating the results.</div><div class="line"> *</div><div class="line"> *  @param f the function to apply on each element.</div><div class="line"> *  @return  the iterator resulting from applying the given iterator-valued function</div><div class="line"> *           `f` to each value produced by this iterator and concatenating the results.</div><div class="line"> *  @note    Reuse: $consumesAndProducesIterator</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>[<span class="type">B</span>](f: <span class="type">A</span> =&gt; <span class="type">GenTraversableOnce</span>[<span class="type">B</span>]): <span class="type">Iterator</span>[<span class="type">B</span>] = <span class="keyword">new</span> <span class="type">AbstractIterator</span>[<span class="type">B</span>] &#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> cur: <span class="type">Iterator</span>[<span class="type">B</span>] = empty</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span></span>: <span class="type">Boolean</span> =</div><div class="line">    cur.hasNext || self.hasNext &amp;&amp; &#123; cur = f(self.next).toIterator; hasNext &#125;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next</span></span>(): <span class="type">B</span> = (<span class="keyword">if</span> (hasNext) cur <span class="keyword">else</span> empty).next()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，flatMap的返回也是 Iterator[B]，所以，只要我们以 Iterator 的方式返回，就可以返回多条数据了，在Scala中，只要你返回的格式是某种可以Iterator的，就满足要求了，在Scala中，所有的集合Iterable都是 trait Iterator的一种扩展，无论是 seq set 还是map，这就很方便了，样例代码如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  test(<span class="string">"FlatMapTest should work"</span>) &#123;</div><div class="line">    println(<span class="string">"FlatMapTest  started"</span>)</div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"Simple Application"</span>).setMaster(<span class="string">"local[3]"</span>)</div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line">    <span class="keyword">val</span> a: <span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Seq</span>(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"4"</span>, <span class="string">"3"</span>, <span class="string">"3"</span>, <span class="string">"1"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"5"</span>))</div><div class="line">    <span class="keyword">val</span> b: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">String</span>)] = a.map(f =&gt; (f, f + <span class="string">"asd"</span>))</div><div class="line">    <span class="keyword">val</span> c = b.mapPartitions &#123;</div><div class="line">      eachPar =&gt; &#123;</div><div class="line">        eachPar.flatMap(f =&gt; &#123;</div><div class="line">          <span class="keyword">val</span> returnSeq = <span class="type">ArrayBuffer</span>.empty[(<span class="type">String</span>, <span class="type">String</span>)]</div><div class="line">          <span class="keyword">if</span> (f._2.startsWith(<span class="string">"3"</span>)) &#123;</div><div class="line">            returnSeq += ((f._1, f._2 + <span class="string">"--b"</span>))</div><div class="line">            returnSeq += ((f._1, f._2 + <span class="string">"-4c"</span>))</div><div class="line">            returnSeq += ((f._2, f._1 + <span class="string">"-6d"</span>))</div><div class="line"><span class="comment">//            Seq(Some(f._1, f._2 + "--b"), Some(f._1, f._2 + "--c"), Some(f._2, f._1 + "--d"))</span></div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">          &#125;</div><div class="line">          returnSeq</div><div class="line">        &#125;</div><div class="line">        )</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    c.cache()</div><div class="line">    c.foreach(println(_))</div><div class="line">    println(c.count())</div><div class="line">    c.unpersist()</div><div class="line">    println(<span class="string">"FlatMapTest ended"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>当然，实际处理比这复杂多了，你可以在flatMap中随意发挥，进行各种对外的连接查询操作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenAPI微服务接入规范]]></title>
      <url>http://flume.cn/2017/05/22/OpenAPI%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>OpenAPI采用了微服务的架构，基于Spring Cloud为微服务系统中相互依赖的服务提供了丰富的连接选项。</p>
<h3 id="接口规范"><a href="#接口规范" class="headerlink" title="接口规范"></a>接口规范</h3><p>OpenAPI采用了微服务的架构，每个微服务使用统一的对外接口规范，不需要考虑安全与负载均衡等其它因素，只需要关注自己的业务逻辑即可，参数与对外返回应该保持一致；</p>
<h4 id="微服务统一命名"><a href="#微服务统一命名" class="headerlink" title="微服务统一命名"></a>微服务统一命名</h4><p>每个微服务都有一个统一的名称作为服务唯一标识符，也作为服务注册发现，负载均衡，服务熔断等功能的标识，OpenAPI将为微服务提供统一的查询界面，通过唯一的微服务名称查询服务的功能、调用方式以及参数：<br><img src="open-api1.png" alt="image"><br>样例：</p>
<ul>
<li>openapi-service-business-wzfw 位置服务API</li>
<li>openapi-service-business-test 其它业务API</li>
<li>openapi-service-compute-adhoc  计算API-即席分析</li>
<li>openapi-service-storage-hbase  存储API-hbase</li>
</ul>
<h4 id="微服务端口规范"><a href="#微服务端口规范" class="headerlink" title="微服务端口规范"></a>微服务端口规范</h4><p>接入的微服务端口号都在8000-9000之间，但不同类型的服务处在不同的区间，其中，存储API的端口默认为 8100-8200，业务API的端口默认为 8200-8300，计算API的端口默认为 8300-8400，其它类型微服务API的端口默认为 8400-8500</p>
<h4 id="接口命名"><a href="#接口命名" class="headerlink" title="接口命名"></a>接口命名</h4><p>微服务开发的时候，不需要在自己的URL中指定URL前缀，URL前缀由网关层统一路由，只需要指定接口即可</p>
<p>微服务API的接口应统一以小写字符串为接口名，不要用下划线，而用“-”，<br>比如：GET /current-location</p>
<p>注：网关层统一URL前缀路由方案：每个业务的URL前缀应该与微服务的统一命名有一致的对应关系，对应统一命名的后两段，比如：<br>位置服务： 统一命名：openapi-service-business-wzfw 那它的URL前缀就是：/business/wzfw/</p>
<h4 id="参数命名"><a href="#参数命名" class="headerlink" title="参数命名"></a>参数命名</h4><p>除了微服务自己的请求参数，每个微服务都会接收到一个可选的 OpenAPI的请求id openRequestId，<strong>其它参数不能有相同的参数名称</strong>。openRequestId 是由Open网关层生成的字符串类型，代表用户的这一次请求，便于问题追踪与故障排查以及其它需求；<br>除此之外，没有其它限制</p>
<h4 id="返回规范"><a href="#返回规范" class="headerlink" title="返回规范"></a>返回规范</h4><p>返回接口也均推荐采用RestFul API的风格，具体有以下几点约定：</p>
<h5 id="响应码永远是200"><a href="#响应码永远是200" class="headerlink" title="响应码永远是200"></a>响应码永远是200</h5><p>服务端在成功接收到客户端的请求之后，在能够处理和捕获的情况下，http头的响应码永远是200，具体成功与否及进一步的信息放入返回的内容。如果客户端获取到的返回码不是200，代表链路上某一个环节出了问题。</p>
<h5 id="不允许抛出异常"><a href="#不允许抛出异常" class="headerlink" title="不允许抛出异常"></a>不允许抛出异常</h5><p>微服务的最外层不允许抛出异常，最好捕获所有指定的异常并主动返回，如果有未知异常发生，则建议捕获后将异常作为message信息返回；</p>
<h5 id="统一返回格式"><a href="#统一返回格式" class="headerlink" title="统一返回格式"></a>统一返回格式</h5><p>所有返回都要有 code、openRequestId、data、message这四个参数，String方式返回以下形式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    code: int , # 返回码 正常为 2开头，比如200，错误情况尽量兼容RestFul的返回码，可以自定义</div><div class="line">    message: String # 如果出错的情况，则返回错误信息，如果不出错的话，则返回""</div><div class="line">    openRequestId: String, # 这个openRequestId是open网关层传入的全局id，代表这一次请求</div><div class="line">    data: json, # 真正的数据，以json格式表示，一般会有 msisdn 字段</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，这里的code返回码，应该遵循统一的格式。</p>
<p>比如：GET /business/wzfw/current-locationd的正确返回：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"code"</span>: <span class="number">200</span>,</div><div class="line">  <span class="attr">"message"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"openRequestId"</span>: <span class="string">"business_wzfw_work-location_000001"</span>,</div><div class="line">  <span class="attr">"data"</span>: &#123;</div><div class="line">    <span class="attr">"msisdn"</span>: <span class="string">"17321452140"</span>,</div><div class="line">    <span class="attr">"zipCode"</span>: <span class="number">21</span>,</div><div class="line">    <span class="attr">"provId"</span>: <span class="number">831</span>,</div><div class="line">    <span class="attr">"cityCode"</span>: <span class="number">83101</span>,</div><div class="line">    <span class="attr">"location"</span>: <span class="string">"31.14570,121.54082"</span>,</div><div class="line">    <span class="attr">"occurTime"</span>: <span class="string">"2017-05-23T09:52:07.000Z"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>错误返回：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"code"</span>: <span class="number">404001</span>,</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"该数据不存在.17322222222"</span>,</div><div class="line">  <span class="attr">"openRequestId"</span>: <span class="string">"business_wzfw_work-location_000001"</span>,</div><div class="line">  <span class="attr">"data"</span>: <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="统一错误码（持续更新）"><a href="#统一错误码（持续更新）" class="headerlink" title="统一错误码（持续更新）"></a>统一错误码（持续更新）</h5><h4 id="统一日志、收集与分析"><a href="#统一日志、收集与分析" class="headerlink" title="统一日志、收集与分析"></a>统一日志、收集与分析</h4><p>为了对每个微服务进行日志的统一分析，我们使用了基于ELK技术栈的日志收集与分析的系统，为了更好的进行统一日志收集与分析，微服务需要遵循统一的约定来记录日志，各个微服务只需要将日志记录到本地文件中即可，我们会统一进行数据抓取，数据收集与数据分析；</p>
<p>根据日志作用，将日志具体分成以下3类，分别放在指定目录的不同文件夹下：</p>
<ul>
<li>业务日志<br>  OpenApi业务调用日志，为后期日志分析，提供数据源。</li>
<li>普通日志<br>  开发、调试相关日志，方便程序排除故障，程序调优等。</li>
<li>组件日志<br>  系统内部相关组件日志，例如Spring日志，tomcat日志、eureka日志、ribbon日志、hystrix日志等</li>
</ul>
<p>以已经开发完成的位置服务为例：<br>业务日志 ./logs/business/wzfw/stat/  使用统一的格式统计web层的请求，便于数据分析与统计<br>普通日志 ./logs/business/wzfw/code/ 开发者在代码中用于debug的日志，便于排查<br>组件日志 ./logs/business/wzfw/other/  Spring等其它引用框架自带的日志，作为留存<br>其中业务日志是必须需要的；</p>
<h3 id="接入规范"><a href="#接入规范" class="headerlink" title="接入规范"></a>接入规范</h3><p>为了更好地进行微服务的开发，在遵循上述接口规范的基础上，在技术层面上会简要列出下述接入规范，供开发者开发以及已经开发好的项目接入进行参考；</p>
<p>注：与基于Dubbo框架的微服务架构不同，基于spring-cloud的OpenAPI微服务架构做得的不仅仅是协议的转换，还提供了服务自动注册与发现，自动负载均衡，服务自动熔断，统一日志收集与分析以及监控告警等功能，在项目庞大的时候会引入统一配置管理。因此，为了更好更简单地使用这些额外的功能，推荐使用Java技术栈的spring-boot框架进行开发，会达到事半功倍的效果。当然，OpenAPI也支持其它语言与框架的接入。</p>
<h4 id="使用spring-boot接入"><a href="#使用spring-boot接入" class="headerlink" title="使用spring-boot接入"></a>使用spring-boot接入</h4><p>Spring Boot让我们的Spring应用变的更轻量化，有经验的Java程序员一天就可以上手，Java项目改造为spring-boot项目也很简单，spring-boot的主要优点如下：</p>
<ul>
<li>为所有Spring开发者更快的入门</li>
<li>开箱即用，提供各种默认配置来简化项目配置</li>
<li>内嵌式容器简化Web项目</li>
<li>没有冗余代码生成和XML配置的要求</li>
</ul>
<h4 id="项目改造为spring-boot工程"><a href="#项目改造为spring-boot工程" class="headerlink" title="项目改造为spring-boot工程"></a>项目改造为spring-boot工程</h4><p>我们大部分的微服务都是以Java开发的，首先希望最好的接入方案是将项目改造为spring-boot工程，使用spring-boot进行开发，简单高效，只需要了解业务逻辑即可，这个是效果最好的接入方案，建议采用下列方式引入spring boot依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="微服务统一命名-1"><a href="#微服务统一命名-1" class="headerlink" title="微服务统一命名"></a>微服务统一命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.application.name=openapi-service-business-wzfw</div><div class="line">server.port=82XX</div></pre></td></tr></table></figure>
<p>通过spring.application.name属性，我们可以指定微服务的名称后续在调用的时候只需要使用该名称就可以进行服务的访问。</p>
<h4 id="接入服务发现与服务注册"><a href="#接入服务发现与服务注册" class="headerlink" title="接入服务发现与服务注册"></a>接入服务发现与服务注册</h4><p>对于spring-boot来说，接入服务发现与服务注册功能和简单，只需要以下两步：</p>
<ol>
<li><p>pom.xml中增加依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加Eureka的依赖 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置文件中增加一行eurake的配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 指定注册中心的地址</div><div class="line">eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样，简单的两步操作，就可以使你的服务被微服务统一管理了。</p>
<h4 id="使用负载均衡功能"><a href="#使用负载均衡功能" class="headerlink" title="使用负载均衡功能"></a>使用负载均衡功能</h4><p>有些微服务访问压力比较大，需要被多个负载均衡同时处理业务，需要负载均衡的能力，当你的服务注册到eurake中后，使用负载均衡功能非常简单，只需要换一个机器，将你的服务部署, 然后注册到OpenAPI就可以了，OpenAPI网关这里会自动通过 ribbon对你的服务进行负载均衡。</p>
<p>负载均衡的默认策略是进行轮寻负载，如果有独特的负载均衡方式，请联系OpenAPI管理员进行其它的负载均衡方案。</p>
<h4 id="使用断路器功能"><a href="#使用断路器功能" class="headerlink" title="使用断路器功能"></a>使用断路器功能</h4><p>当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。OpenAPI基于开源的Hystrix来实现断路器的功能；</p>
<p>使用断路器功能，微服务开发者不需要修改任何代码，只需要为OpenAPI管理员提出需求，制定熔断策略，我们会对代码进行非侵入式的熔断管理，从而防止错误在整个系统中的蔓延；</p>
<h4 id="使用统一日志收集与分析服务"><a href="#使用统一日志收集与分析服务" class="headerlink" title="使用统一日志收集与分析服务"></a>使用统一日志收集与分析服务</h4><p>其中，如果使用Spring-boot开发的话，统一使用 slf4j + logback 的技术来进行日志记录，通过统一的logback配置文件可以极大地提高开发效率；业务日志统一使用面向切面编程技术（AOP）来记录日志。如果用python相关web框架实现微服务的话，也要做到统计日志格式的统一。</p>
<p>具体日志格式以附件中 logback.xml 的配置文件为准。</p>
<h3 id="Dubbo微服务接入"><a href="#Dubbo微服务接入" class="headerlink" title="Dubbo微服务接入"></a>Dubbo微服务接入</h3><p>王超</p>
<h3 id="Python微服务接入"><a href="#Python微服务接入" class="headerlink" title="Python微服务接入"></a>Python微服务接入</h3><p>黄泽实例</p>
<h3 id="其它微服务接入"><a href="#其它微服务接入" class="headerlink" title="其它微服务接入"></a>其它微服务接入</h3><p>将 eurake的原理与API介绍给他们</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OpenApi之我浅薄见解]]></title>
      <url>http://flume.cn/2017/03/29/OpenApi%E4%B9%8B%E6%88%91%E6%B5%85%E8%96%84%E8%A7%81%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>说到OpenAPI，顾名思义，主要包含两个内容：</p>
<p>Open：权限和安全<br>API：对外提供统一的访问接口，我们将我们的能力封装成一系列API</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阿里巴巴Java开发手册学习笔记（下）]]></title>
      <url>http://flume.cn/2017/03/24/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      <content type="html"><![CDATA[<h1 id="异常日志"><a href="#异常日志" class="headerlink" title="异常日志"></a>异常日志</h1><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h4 id="【强制】不要捕获-Java-类库中定义的继承自-RuntimeException-的运行时异常类，如：IndexOutOfBoundsException-NullPointerException，这类异常由程序员预检查来规避，保证程序健壮性。"><a href="#【强制】不要捕获-Java-类库中定义的继承自-RuntimeException-的运行时异常类，如：IndexOutOfBoundsException-NullPointerException，这类异常由程序员预检查来规避，保证程序健壮性。" class="headerlink" title="【强制】不要捕获 Java 类库中定义的继承自 RuntimeException 的运行时异常类，如：IndexOutOfBoundsException / NullPointerException，这类异常由程序员预检查来规避，保证程序健壮性。"></a>【强制】不要捕获 Java 类库中定义的继承自 RuntimeException 的运行时异常类，如：IndexOutOfBoundsException / NullPointerException，这类异常由程序员预检查来规避，保证程序健壮性。</h4><p>正例： if(obj != null) {…}<br>反例： try { obj.method() } catch(NullPointerException e){…}</p>
<h4 id="【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。"><a href="#【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。" class="headerlink" title="【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。"></a>【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。</h4><p>思考：Scala中用模式匹配处理异常的效率是否会高？</p>
<h4 id="【强制】对大段代码进行-try-catch-，这是不负责任的表现。"><a href="#【强制】对大段代码进行-try-catch-，这是不负责任的表现。" class="headerlink" title="【强制】对大段代码进行 try - catch ，这是不负责任的表现。"></a>【强制】对大段代码进行 try - catch ，这是不负责任的表现。</h4><p>catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</p>
<h4 id="【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之；"><a href="#【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之；" class="headerlink" title="【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之；"></a>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之；</h4><p>如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。<br>思考：</p>
<h4 id="【强制】有-try-块放到了事务代码中，-catch-异常后，如果需要回滚事务，一定要注意手动回滚事务。"><a href="#【强制】有-try-块放到了事务代码中，-catch-异常后，如果需要回滚事务，一定要注意手动回滚事务。" class="headerlink" title="【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。"></a>【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</h4><h4 id="【强制】-finally-块必须对资源对象、流对象进行关闭，有异常也要做-try-catch-。"><a href="#【强制】-finally-块必须对资源对象、流对象进行关闭，有异常也要做-try-catch-。" class="headerlink" title="【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try - catch 。"></a>【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try - catch 。</h4><p>说明：如果 JDK 7，可以使用 try - with - resources 方式。<br>思考：finally中的语句，也根据情况要做try-cache</p>
<h4 id="【强制】不能在-finally-块中使用-return-，-finally-块中的-return-返回后方法结束执行，不会再执行-try-块中的-return-语句。"><a href="#【强制】不能在-finally-块中使用-return-，-finally-块中的-return-返回后方法结束执行，不会再执行-try-块中的-return-语句。" class="headerlink" title="【强制】不能在 finally 块中使用 return ， finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。"></a>【强制】不能在 finally 块中使用 return ， finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</h4><p>思考：finally中的return有效，但是就算有效，也没有意义，因为无论如何，都会返回同样的值</p>
<h4 id="【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。"><a href="#【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。" class="headerlink" title="【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。"></a>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。</h4><p>说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p>
<h4 id="推荐】方法的返回值可以为-null-，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回-null-值。调用方需要进行-null-判断防止-NPE-问题。"><a href="#推荐】方法的返回值可以为-null-，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回-null-值。调用方需要进行-null-判断防止-NPE-问题。" class="headerlink" title="推荐】方法的返回值可以为 null ，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。"></a>推荐】方法的返回值可以为 null ，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。</h4><p>说明：本规约明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回 null 的情况<br>思考：如果返回的是null，需要添加说明。</p>
<h4 id="【推荐】防止-NPE-，是程序员的基本修养，注意-NPE-产生的场景："><a href="#【推荐】防止-NPE-，是程序员的基本修养，注意-NPE-产生的场景：" class="headerlink" title="【推荐】防止 NPE ，是程序员的基本修养，注意 NPE 产生的场景："></a>【推荐】防止 NPE ，是程序员的基本修养，注意 NPE 产生的场景：</h4><p>1 ） 返回类型为包装数据类型，有可能是 null ，返回 int 值时注意判空。<br>反例： public int f() {  return Integer 对象}; 如果为 null ，自动解箱抛 NPE 。<br>2 ） 数据库的查询结果可能为 null 。<br>3 ） 集合里的元素即使 isNotEmpty ，取出的数据元素也可能为 null 。<br>4 ） <strong>远程调用返回对象，一律要求进行 NPE 判断。</strong><br>5 ） 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。<br>6 ） <strong>级联调用</strong> obj . getA() . getB() . getC()； 一连串调用，易产生 NPE 。</p>
<h4 id="【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的-http-api-开放接口必须使用“错误码”-；-而应用内部推荐异常抛出-；-跨应用间-RPC-调用优先考虑使用-Result-方式，封装-isSuccess-、“错误码”、“错误简短信息”。"><a href="#【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的-http-api-开放接口必须使用“错误码”-；-而应用内部推荐异常抛出-；-跨应用间-RPC-调用优先考虑使用-Result-方式，封装-isSuccess-、“错误码”、“错误简短信息”。" class="headerlink" title="【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http / api 开放接口必须使用“错误码” ； 而应用内部推荐异常抛出 ； 跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess 、“错误码”、“错误简短信息”。"></a>【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http / api 开放接口必须使用“错误码” ； 而应用内部推荐异常抛出 ； 跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess 、“错误码”、“错误简短信息”。</h4><p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：<br>1 ） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。<br>2 ） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message ，对于调用<br>端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输<br>的性能损耗也是问题。</p>
<h4 id="【推荐】定义时区分-unchecked-checked-异常，避免直接使用-RuntimeException-抛出，更不允许抛出-Exception-或者-Throwable-，应使用有业务含义的自定义异常。"><a href="#【推荐】定义时区分-unchecked-checked-异常，避免直接使用-RuntimeException-抛出，更不允许抛出-Exception-或者-Throwable-，应使用有业务含义的自定义异常。" class="headerlink" title="【推荐】定义时区分 unchecked /  checked 异常，避免直接使用 RuntimeException 抛出，更不允许抛出 Exception 或者 Throwable ，应使用有业务含义的自定义异常。"></a>【推荐】定义时区分 unchecked /  checked 异常，避免直接使用 RuntimeException 抛出，更不允许抛出 Exception 或者 Throwable ，应使用有业务含义的自定义异常。</h4><h4 id="【参考】避免出现重复的代码-（Don-’-t-Repeat-Yourself）-，即-DRY-原则。"><a href="#【参考】避免出现重复的代码-（Don-’-t-Repeat-Yourself）-，即-DRY-原则。" class="headerlink" title="【参考】避免出现重复的代码 （Don ’ t Repeat Yourself） ，即 DRY 原则。"></a>【参考】避免出现重复的代码 （Don ’ t Repeat Yourself） ，即 DRY 原则。</h4><p>说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副<br>本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。<br>正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：<br>private boolean checkParam(DTO dto){…}</p>
<h2 id="日志规约"><a href="#日志规约" class="headerlink" title="日志规约"></a>日志规约</h2><h4 id="【强制】应用中不可直接使用日志系统-（Log-4-j-、-Logback）-中的-API-，而应依赖使用日志框架SLF4J中的-API-，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。"><a href="#【强制】应用中不可直接使用日志系统-（Log-4-j-、-Logback）-中的-API-，而应依赖使用日志框架SLF4J中的-API-，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。" class="headerlink" title="【强制】应用中不可直接使用日志系统 （Log 4 j 、 Logback） 中的 API ，而应依赖使用日志框架SLF4J中的 API ，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。"></a>【强制】应用中不可直接使用日志系统 （Log 4 j 、 Logback） 中的 API ，而应依赖使用日志框架SLF4J中的 API ，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</h4><p>import org.slf4j.Logger;<br>import org.slf4j.LoggerFactory;<br>private static final Logger logger = LoggerFactory.getLogger(Abc.class);<br>思考：回头要注意，使用门面模式的日志框架</p>
<h4 id="【强制】日志文件推荐至少保存-15-天，因为有些异常具备以“周”为频次发生的特点。"><a href="#【强制】日志文件推荐至少保存-15-天，因为有些异常具备以“周”为频次发生的特点。" class="headerlink" title="【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。"></a>【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</h4><h4 id="【强制】应用中的扩展日志-（-如打点、临时监控、访问日志等-）-命名方式："><a href="#【强制】应用中的扩展日志-（-如打点、临时监控、访问日志等-）-命名方式：" class="headerlink" title="【强制】应用中的扩展日志 （ 如打点、临时监控、访问日志等 ） 命名方式："></a>【强制】应用中的扩展日志 （ 如打点、临时监控、访问日志等 ） 命名方式：</h4><p>appName_logType<em>logName.log 。<br>logType :日志类型，推荐分类有 stats / desc / monitor / visit 等 ；<br>logName :日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。<br>正例： mppserver 应用中单独监控时区转换异常，如：<br>mppserver </em> monitor _ timeZoneConvert . log<br>说明：推荐对日志进行分类，错误日志和业务日志尽量分开存放，便于开发人员查看，也便于<br>通过日志对系统进行及时监控。<br>思考：原来我想到的别人已经想到了，一定践行；</p>
<h4 id="【强制】对-trace-debug-info-级别的日志输出，必须使用条件输出形式或者使用占位符的方式。"><a href="#【强制】对-trace-debug-info-级别的日志输出，必须使用条件输出形式或者使用占位符的方式。" class="headerlink" title="【强制】对 trace / debug / info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。"></a>【强制】对 trace / debug / info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。</h4><p>说明： logger . debug( “ Processing trade with id : “ +  id + “  symbol : “ +  symbol);<br>如果日志级别是 warn ，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，<br>会执行 toString() 方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。<br>正例： （ 条件 ）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">	logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" symbol: "</span> + symbol);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>正例： （ 占位符 ）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; symbol : &#123;&#125; "</span>, id, symbol);</div></pre></td></tr></table></figure></p>
<p>思考：这一点非常重要，学到了，既然这样，就直接统一使用占位符的方式吧；</p>
<h4 id="【强制】避免重复打印日志，浪费磁盘空间，务必在-log4j-xml-中设置-additivity-false。"><a href="#【强制】避免重复打印日志，浪费磁盘空间，务必在-log4j-xml-中设置-additivity-false。" class="headerlink" title="【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity = false。"></a>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity = false。</h4><p>正例： <logger name="com.taobao.dubbo.config" additivity="false"> </logger></p>
<h4 id="【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么往上抛。"><a href="#【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么往上抛。" class="headerlink" title="【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么往上抛。"></a>【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么往上抛。</h4><p>正例： logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);<br>思考：一定要注意保留这两类信息：e.getMessage();</p>
<h4 id="【推荐】可以使用-warn-日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。"><a href="#【推荐】可以使用-warn-日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。" class="headerlink" title="【推荐】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。"></a>【推荐】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。</h4><p>注意日志输出的级别， error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。</p>
<h4 id="【推荐】谨慎地记录日志。生产环境禁止输出-debug-日志-；-有选择地输出-info-日志-；-如果使用-warn-来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。"><a href="#【推荐】谨慎地记录日志。生产环境禁止输出-debug-日志-；-有选择地输出-info-日志-；-如果使用-warn-来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。" class="headerlink" title="【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志 ； 有选择地输出 info 日志 ； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。"></a>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志 ； 有选择地输出 info 日志 ； 如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。</h4><p>说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请<br>思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p>
<h1 id="Mysql规约"><a href="#Mysql规约" class="headerlink" title="Mysql规约"></a>Mysql规约</h1><h2 id="建表规约"><a href="#建表规约" class="headerlink" title="建表规约"></a>建表规约</h2><h4 id="【强制】表达是与否概念的字段，必须使用-is-xxx-的方式命名，数据类型是-unsigned-tinyint（1表示是，0表示否），此规则同样适用于-odps-建表。"><a href="#【强制】表达是与否概念的字段，必须使用-is-xxx-的方式命名，数据类型是-unsigned-tinyint（1表示是，0表示否），此规则同样适用于-odps-建表。" class="headerlink" title="【强制】表达是与否概念的字段，必须使用 is _ xxx 的方式命名，数据类型是 unsigned tinyint（1表示是，0表示否），此规则同样适用于 odps 建表。"></a>【强制】表达是与否概念的字段，必须使用 is _ xxx 的方式命名，数据类型是 unsigned tinyint（1表示是，0表示否），此规则同样适用于 odps 建表。</h4><p>说明：任何字段如果为非负数，必须是 unsigned 。</p>
<h4 id="【强制】表名、字段名必须使用小写字母或数字-；-禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。"><a href="#【强制】表名、字段名必须使用小写字母或数字-；-禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。" class="headerlink" title="【强制】表名、字段名必须使用小写字母或数字 ； 禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。"></a>【强制】表名、字段名必须使用小写字母或数字 ； 禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</h4><p>正例： getter <em> admin ， task </em> config ， level 3_ name<br>反例： GetterAdmin ， taskConfig ， level <em>3</em> name<br>思考：因为以前遇到坑，不同数据库大小写规则不一样，所以都用小写</p>
<h4 id="【强制】表名不使用复数名词。"><a href="#【强制】表名不使用复数名词。" class="headerlink" title="【强制】表名不使用复数名词。"></a>【强制】表名不使用复数名词。</h4><p>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>
<h4 id="【强制】唯一索引名为-uk-字段名-；-普通索引名则为-idx-字段名。"><a href="#【强制】唯一索引名为-uk-字段名-；-普通索引名则为-idx-字段名。" class="headerlink" title="【强制】唯一索引名为 uk 字段名 ； 普通索引名则为 idx 字段名。"></a>【强制】唯一索引名为 uk <em>字段名 ； 普通索引名则为 idx </em>字段名。</h4><p>说明： uk <em> 即  unique key；idx </em> 即 index 的简称。</p>
<h4 id="【强制】小数类型为-decimal-，禁止使用-float-和-double-。"><a href="#【强制】小数类型为-decimal-，禁止使用-float-和-double-。" class="headerlink" title="【强制】小数类型为 decimal ，禁止使用 float 和 double 。"></a>【强制】小数类型为 decimal ，禁止使用 float 和 double 。</h4><p>说明： float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不<br>正确的结果。<br>如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>
<h4 id="【强制】如果存储的字符串长度几乎相等，使用-char-定长字符串类型。"><a href="#【强制】如果存储的字符串长度几乎相等，使用-char-定长字符串类型。" class="headerlink" title="【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。"></a>【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</h4><h4 id="【强制】-varchar-是可变长字符串，不预先分配存储空间，长度不要超过-5000，如果存储长度大于此值，定义字段类型为-text-，独立出来一张表，用主键来对应，避免影响其它字段索引效率。"><a href="#【强制】-varchar-是可变长字符串，不预先分配存储空间，长度不要超过-5000，如果存储长度大于此值，定义字段类型为-text-，独立出来一张表，用主键来对应，避免影响其它字段索引效率。" class="headerlink" title="【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text ，独立出来一张表，用主键来对应，避免影响其它字段索引效率。"></a>【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text ，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</h4><h4 id="【强制】表必备三字段：-id-gmt-create-gmt-modified。"><a href="#【强制】表必备三字段：-id-gmt-create-gmt-modified。" class="headerlink" title="【强制】表必备三字段： id ,  gmt_create,gmt_modified。"></a>【强制】表必备三字段： id ,  gmt_create,gmt_modified。</h4><p>说明：其中 id 必为主键，类型为 unsigned bigint 、单表时自增、步长为 1。 gmt_create,gmt_modified 的类型均为 date_time 类型。</p>
<h4 id="【推荐】表的命名最好是加上“业务名称-表的作用”。"><a href="#【推荐】表的命名最好是加上“业务名称-表的作用”。" class="headerlink" title="【推荐】表的命名最好是加上“业务名称_表的作用”。"></a>【推荐】表的命名最好是加上“业务名称_表的作用”。</h4><p>正例： tiger_task/tiger_reader/mpp_config</p>
<h4 id="【推荐】库名与应用名称尽量一致。"><a href="#【推荐】库名与应用名称尽量一致。" class="headerlink" title="【推荐】库名与应用名称尽量一致。"></a>【推荐】库名与应用名称尽量一致。</h4><h4 id="【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循："><a href="#【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：" class="headerlink" title="【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循："></a>【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：</h4><p>1 ） 不是频繁修改的字段。<br>2 ） 不是 varchar 超长字段，更不能是 text 字段。<br>正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存<br>储类目名称，避免关联查询。</p>
<h4 id="【推荐】单表行数超过-500-万行或者单表容量超过-2-GB-，才推荐进行分库分表。"><a href="#【推荐】单表行数超过-500-万行或者单表容量超过-2-GB-，才推荐进行分库分表。" class="headerlink" title="【推荐】单表行数超过 500 万行或者单表容量超过 2 GB ，才推荐进行分库分表。"></a>【推荐】单表行数超过 500 万行或者单表容量超过 2 GB ，才推荐进行分库分表。</h4><p>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>
<h2 id="索引规约"><a href="#索引规约" class="headerlink" title="索引规约"></a>索引规约</h2><p>这一块，现在理解不深，需要使用的时候再理解</p>
<h4 id="【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。"><a href="#【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。" class="headerlink" title="【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。"></a>【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。</h4><p>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明<br>显的 ；</p>
<h4 id="【强制】-超过三个表禁止-join-。需要-join-的字段，数据类型保持绝对一致-；-多表关联查询时，保证被关联的字段需要有索引。"><a href="#【强制】-超过三个表禁止-join-。需要-join-的字段，数据类型保持绝对一致-；-多表关联查询时，保证被关联的字段需要有索引。" class="headerlink" title="【强制】 超过三个表禁止 join 。需要 join 的字段，数据类型保持绝对一致 ； 多表关联查询时，保证被关联的字段需要有索引。"></a>【强制】 超过三个表禁止 join 。需要 join 的字段，数据类型保持绝对一致 ； 多表关联查询时，保证被关联的字段需要有索引。</h4><p>说明：即使双表 join 也要注意表索引、 SQL 性能。</p>
<h4 id="【强制】在-varchar-字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。"><a href="#【强制】在-varchar-字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。" class="headerlink" title="【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。"></a>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。</h4><p>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left( 列名, 索引长度 )) / count( * ) 的区分度来确定。</p>
<h4 id="【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。"><a href="#【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。" class="headerlink" title="【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。"></a>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</h4><p>说明：索引文件具有 B - Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p>
<h4 id="【参考】创建索引时避免有如下极端误解："><a href="#【参考】创建索引时避免有如下极端误解：" class="headerlink" title="【参考】创建索引时避免有如下极端误解："></a>【参考】创建索引时避免有如下极端误解：</h4><p>1 ） 误认为一个查询就需要建一个索引。<br>2 ） 误认为索引会消耗空间、严重拖慢更新和新增速度。<br>3 ） 误认为唯一索引一律需要在应用层通过“先查后插”方式解决。</p>
<h2 id="SQL规约"><a href="#SQL规约" class="headerlink" title="SQL规约"></a>SQL规约</h2><h4 id="【强制】不要使用count-列名-或count-常量-来替代count-，count-就是-SQL92定义的标准统计行数的语法，跟数据库无关，跟-NULL-和非-NULL-无关。"><a href="#【强制】不要使用count-列名-或count-常量-来替代count-，count-就是-SQL92定义的标准统计行数的语法，跟数据库无关，跟-NULL-和非-NULL-无关。" class="headerlink" title="【强制】不要使用count(列名)或count(常量)来替代count()，count()就是 SQL92定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。"></a>【强制】不要使用count(列名)或count(常量)来替代count(<em>)，count(</em>)就是 SQL92定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</h4><p>说明： count(*)会统计值为NULL的行，而count(列名)不会统计此列为NULL值的行。</p>
<h4 id="【强制】使用-ISNULL-来判断是否为-NULL-值。注意：-NULL-与任何值的直接比较都为-NULL。"><a href="#【强制】使用-ISNULL-来判断是否为-NULL-值。注意：-NULL-与任何值的直接比较都为-NULL。" class="headerlink" title="【强制】使用 ISNULL() 来判断是否为 NULL 值。注意： NULL 与任何值的直接比较都为 NULL。"></a>【强制】使用 ISNULL() 来判断是否为 NULL 值。注意： NULL 与任何值的直接比较都为 NULL。</h4><p>说明：<br>1 ） NULL&lt;&gt;NULL 的返回结果是 NULL ，而不是 false 。<br>2 ） NULL=NULL 的返回结果是 NULL ，而不是 true 。<br>3 ） NULL&lt;&gt;1 的返回结果是 NULL ，而不是 true 。</p>
<h4 id="【强制】不得使用外键与级联，一切外键概念必须在应用层解决。"><a href="#【强制】不得使用外键与级联，一切外键概念必须在应用层解决。" class="headerlink" title="【强制】不得使用外键与级联，一切外键概念必须在应用层解决。"></a>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</h4><h4 id="【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。"><a href="#【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。" class="headerlink" title="【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。"></a>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</h4><h4 id="【强制】数据订正时，删除和修改记录时，要先-select-，避免出现误删除，确认无误才能执行更新语句。"><a href="#【强制】数据订正时，删除和修改记录时，要先-select-，避免出现误删除，确认无误才能执行更新语句。" class="headerlink" title="【强制】数据订正时，删除和修改记录时，要先 select ，避免出现误删除，确认无误才能执行更新语句。"></a>【强制】数据订正时，删除和修改记录时，要先 select ，避免出现误删除，确认无误才能执行更新语句。</h4><h4 id="【推荐】-in-操作能避免则避免，若实在避免不了，需要仔细评估-in-后边的集合元素数量，控制在-1000-个之内。"><a href="#【推荐】-in-操作能避免则避免，若实在避免不了，需要仔细评估-in-后边的集合元素数量，控制在-1000-个之内。" class="headerlink" title="【推荐】 in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。"></a>【推荐】 in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。</h4><h4 id="【参考】如果有全球化需要，所有的字符存储与表示，均以-utf-8-编码，那么字符计数方法"><a href="#【参考】如果有全球化需要，所有的字符存储与表示，均以-utf-8-编码，那么字符计数方法" class="headerlink" title="【参考】如果有全球化需要，所有的字符存储与表示，均以 utf -8 编码，那么字符计数方法"></a>【参考】如果有全球化需要，所有的字符存储与表示，均以 utf -8 编码，那么字符计数方法</h4><p>说明：<br>    SELECT LENGTH( “轻松工作” )； 返回为 12<br>    SELECT CHARACTER_LENGTH( “轻松工作” )； 返回为 4<br>    如果要使用表情，那么使用 utfmb 4 来进行存储，注意它与 utf -8 编码的区别。</p>
<h4 id="【参考】TRUNCATE-TABLE-比-DELETE-速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发-trigger-，有可能造成事故，故不建议在开发代码中使用此语句。"><a href="#【参考】TRUNCATE-TABLE-比-DELETE-速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发-trigger-，有可能造成事故，故不建议在开发代码中使用此语句。" class="headerlink" title="【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发 trigger ，有可能造成事故，故不建议在开发代码中使用此语句。"></a>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发 trigger ，有可能造成事故，故不建议在开发代码中使用此语句。</h4><p>说明： TRUNCATE TABLE 在功能上与不带  WHERE 子句的  DELETE 语句相同。</p>
<h2 id="ORM规约"><a href="#ORM规约" class="headerlink" title="ORM规约"></a>ORM规约</h2><h4 id="【强制】在表查询中，一律不要使用-作为查询的字段列表，需要哪些字段必须明确写明。"><a href="#【强制】在表查询中，一律不要使用-作为查询的字段列表，需要哪些字段必须明确写明。" class="headerlink" title="【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。"></a>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</h4><p>说明：1 ） 增加查询分析器解析成本。2 ） 增减字段容易与 resultMap 配置不一致。<br>思考：这一点我做得不好，一定需要注意；</p>
<h4 id="【强制】-POJO-类的-boolean-属性不能加-is-，而数据库字段必须加-is-，要求在-resultMap中进行字段与属性之间的映射。"><a href="#【强制】-POJO-类的-boolean-属性不能加-is-，而数据库字段必须加-is-，要求在-resultMap中进行字段与属性之间的映射。" class="headerlink" title="【强制】 POJO 类的 boolean 属性不能加 is ，而数据库字段必须加 is _，要求在 resultMap中进行字段与属性之间的映射。"></a>【强制】 POJO 类的 boolean 属性不能加 is ，而数据库字段必须加 is _，要求在 resultMap中进行字段与属性之间的映射。</h4><p>说明：参见定义 POJO 类以及数据库字段定义规定，在 sql . xml 增加映射，是必须的。</p>
<h4 id="【强制】不要用-resultClass-当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义-；-反过来，每一个表也必然有一个与之对应。"><a href="#【强制】不要用-resultClass-当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义-；-反过来，每一个表也必然有一个与之对应。" class="headerlink" title="【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义 ； 反过来，每一个表也必然有一个与之对应。"></a>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义 ； 反过来，每一个表也必然有一个与之对应。</h4><p>说明：配置映射关系，使字段与 DO 类解耦，方便维护。</p>
<h4 id="【强制】-xml-配置中参数注意使用：-，-param-不要使用-此种方式容易出现SQL注入。"><a href="#【强制】-xml-配置中参数注意使用：-，-param-不要使用-此种方式容易出现SQL注入。" class="headerlink" title="【强制】 xml 配置中参数注意使用：#{}，# param # 不要使用${} 此种方式容易出现SQL注入。"></a>【强制】 xml 配置中参数注意使用：#{}，# param # 不要使用${} 此种方式容易出现SQL注入。</h4><h4 id="【强制】不允许直接拿-HashMap-与-Hashtable-作为查询结果集的输出。"><a href="#【强制】不允许直接拿-HashMap-与-Hashtable-作为查询结果集的输出。" class="headerlink" title="【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。"></a>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</h4><p>思考：为啥？</p>
<h4 id="【强制】更新数据表记录时，必须同时更新记录对应的-gmt-modified-字段值为当前时间。"><a href="#【强制】更新数据表记录时，必须同时更新记录对应的-gmt-modified-字段值为当前时间。" class="headerlink" title="【强制】更新数据表记录时，必须同时更新记录对应的 gmt _ modified 字段值为当前时间。"></a>【强制】更新数据表记录时，必须同时更新记录对应的 gmt _ modified 字段值为当前时间。</h4><h4 id="【推荐】不要写一个大而全的数据更新接口，传入为-POJO-类，不管是不是自己的目标更新字段，都进行-update-table-set-c1-value1-c2-value2-c3-value3-这是不对的。"><a href="#【推荐】不要写一个大而全的数据更新接口，传入为-POJO-类，不管是不是自己的目标更新字段，都进行-update-table-set-c1-value1-c2-value2-c3-value3-这是不对的。" class="headerlink" title="【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。"></a>【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。</h4><p>执行 SQL时，尽量不要更新无改动的字段，一是易出错 ； 二是效率低 ； 三是 binlog 增加存储。</p>
<h4 id="【参考】-Transactional-事务不要滥用。事务会影响数据库的-QPS-，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。"><a href="#【参考】-Transactional-事务不要滥用。事务会影响数据库的-QPS-，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。" class="headerlink" title="【参考】@ Transactional 事务不要滥用。事务会影响数据库的 QPS ，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。"></a>【参考】@ Transactional 事务不要滥用。事务会影响数据库的 QPS ，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</h4><h4 id="【参考】-lt-isEqual-gt-中的-compareValue-是与属性值对比的常量，一般是数字，表示相等时带上此条件-；-lt-isNotEmpty-gt-表示不为空且不为-null-时执行-；-lt-isNotNull-gt-表示不为-null-值时执行。"><a href="#【参考】-lt-isEqual-gt-中的-compareValue-是与属性值对比的常量，一般是数字，表示相等时带上此条件-；-lt-isNotEmpty-gt-表示不为空且不为-null-时执行-；-lt-isNotNull-gt-表示不为-null-值时执行。" class="headerlink" title="【参考】&lt; isEqual &gt;中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件 ； &lt; isNotEmpty &gt;表示不为空且不为 null 时执行 ； &lt; isNotNull &gt;表示不为 null 值时执行。"></a>【参考】&lt; isEqual &gt;中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件 ； &lt; isNotEmpty &gt;表示不为空且不为 null 时执行 ； &lt; isNotNull &gt;表示不为 null 值时执行。</h4><h2 id="工程规约"><a href="#工程规约" class="headerlink" title="工程规约"></a>工程规约</h2><h4 id="【强制】定义-GAV-遵从以下规则："><a href="#【强制】定义-GAV-遵从以下规则：" class="headerlink" title="【强制】定义 GAV 遵从以下规则："></a>【强制】定义 GAV 遵从以下规则：</h4><p>1 ） GroupID 格式：com.{公司/BU}.业务线.[子业务线]，最多4级。<br>说明：{公司/BU}例如：alibaba/taobao/tmall/aliexpress等BU一级；子业务线可选。<br>正例：com.taobao.jstorm或com.alibaba.dubbo.register<br>2）ArtifactID格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。<br>正例：dubbo-client/fastjson-api/jstorm-tool<br>3）Version：详细规定参考下方。</p>
<p>思考：com.ctcc.bigdata   openapi-storage</p>
<h4 id="【强制】二方库版本号命名方式：主版本号-次版本号-修订号"><a href="#【强制】二方库版本号命名方式：主版本号-次版本号-修订号" class="headerlink" title="【强制】二方库版本号命名方式：主版本号.次版本号.修订号"></a>【强制】二方库版本号命名方式：主版本号.次版本号.修订号</h4><p>1 ） 主版本号 ：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。<br>2 ） 次版本号 ：当做了向下兼容的功能性新增 （ 新增类、接口等 ） 。<br>3 ） 修订号 ：修复 bug ，没有修改方法签名的功能加强，保持  API 兼容性。<br>说明：起始版本号必须为： 1.0.0 ，而不是 0.0.1</p>
<h4 id="【强制】线上应用不要依赖-SNAPSHOT-版本-（-安全包除外-）；"><a href="#【强制】线上应用不要依赖-SNAPSHOT-版本-（-安全包除外-）；" class="headerlink" title="【强制】线上应用不要依赖 SNAPSHOT 版本 （ 安全包除外 ）；"></a>【强制】线上应用不要依赖 SNAPSHOT 版本 （ 安全包除外 ）；</h4><p>正式发布的类库必须使用 RELEASE版本号升级+1 的方式，且版本号不允许覆盖升级，必须去中央仓库进行查证。<br>说明：不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p>
<h4 id="【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的-POJO-对象。"><a href="#【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的-POJO-对象。" class="headerlink" title="【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。"></a>【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</h4><h4 id="【强制】依赖于一个二方库群时，必须定义一个统一版本变量，避免版本号不一致。"><a href="#【强制】依赖于一个二方库群时，必须定义一个统一版本变量，避免版本号不一致。" class="headerlink" title="【强制】依赖于一个二方库群时，必须定义一个统一版本变量，避免版本号不一致。"></a>【强制】依赖于一个二方库群时，必须定义一个统一版本变量，避免版本号不一致。</h4><p>说明：依赖 springframework - core ,- context ,- beans ，它们都是同一个版本，可以定义一个变量来保存版本：${ spring . version }，定义依赖的时候，引用该版本。</p>
<h4 id="【强制】禁止在子项目的-pom-依赖中出现相同的-GroupId-，相同的-ArtifactId-，但是不同的Version-。"><a href="#【强制】禁止在子项目的-pom-依赖中出现相同的-GroupId-，相同的-ArtifactId-，但是不同的Version-。" class="headerlink" title="【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId ，相同的 ArtifactId ，但是不同的Version 。"></a>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId ，相同的 ArtifactId ，但是不同的Version 。</h4><p>说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war ，只能有一个版本号出现在最后的 lib 目录中。曾经出现过线下调试是正确的，发布到线上出故障的先例。</p>
<h2 id="服务器规约"><a href="#服务器规约" class="headerlink" title="服务器规约"></a>服务器规约</h2><h4 id="【推荐】高并发服务器建议调小-TCP-协议的-time-wait-超时时间。"><a href="#【推荐】高并发服务器建议调小-TCP-协议的-time-wait-超时时间。" class="headerlink" title="【推荐】高并发服务器建议调小 TCP 协议的 time _ wait 超时时间。"></a>【推荐】高并发服务器建议调小 TCP 协议的 time _ wait 超时时间。</h4><p>说明：操作系统默认 240 秒后，才会关闭处于 time <em> wait 状态的连接，在高并发访问下，服务器端会因为处于 time </em> wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。</p>
<h4 id="【推荐】调大服务器所支持的最大文件句柄数-（File-Descriptor-，简写为-fd）-。"><a href="#【推荐】调大服务器所支持的最大文件句柄数-（File-Descriptor-，简写为-fd）-。" class="headerlink" title="【推荐】调大服务器所支持的最大文件句柄数 （File Descriptor ，简写为 fd） 。"></a>【推荐】调大服务器所支持的最大文件句柄数 （File Descriptor ，简写为 fd） 。</h4><p>说明：主流操作系统的设计是将 TCP / UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd 。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“ open too many files ”错误，导致新的连接无法建立。 建议将 linux服务器所支持的最大句柄数调高数倍 （ 与服务器的内存数量相关 ） 。<br>思考：kafka ，flume等中间件也要这么配</p>
<h4 id="【推荐】给-JVM-设置-XX-HeapDumpOnOutOfMemoryError-参数，让-JVM-碰到-OOM-场景时输出dump-信息。"><a href="#【推荐】给-JVM-设置-XX-HeapDumpOnOutOfMemoryError-参数，让-JVM-碰到-OOM-场景时输出dump-信息。" class="headerlink" title="【推荐】给 JVM 设置- XX :+ HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。"></a>【推荐】给 JVM 设置- XX :+ HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。</h4><p>说明： OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。</p>
<h4 id="【参考】服务器内部重定向使用-forward；-外部重定向地址使用-URL-拼装工具类来生成，否则会带来-URL-维护不一致的问题和潜在的安全风险。"><a href="#【参考】服务器内部重定向使用-forward；-外部重定向地址使用-URL-拼装工具类来生成，否则会带来-URL-维护不一致的问题和潜在的安全风险。" class="headerlink" title="【参考】服务器内部重定向使用 forward； 外部重定向地址使用 URL 拼装工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。"></a>【参考】服务器内部重定向使用 forward； 外部重定向地址使用 URL 拼装工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。</h4><h2 id="安全规约"><a href="#安全规约" class="headerlink" title="安全规约"></a>安全规约</h2><h4 id="【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。"><a href="#【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。" class="headerlink" title="【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。"></a>【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。</h4><p>说明：防止没有做水平权限校验就可随意访问、操作别人的数据，比如查看、修改别人的订单。</p>
<h4 id="【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。"><a href="#【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。" class="headerlink" title="【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。"></a>【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。</h4><p>说明：查看个人手机号码会显示成:158<em>**</em>9119，隐藏中间 4 位，防止隐私泄露。<br>思考：在openAPI项目中一定要注意；</p>
<h4 id="【强制】用户输入的-SQL-参数严格使用参数绑定或者-METADATA-字段值限定，防止-SQL-注入，"><a href="#【强制】用户输入的-SQL-参数严格使用参数绑定或者-METADATA-字段值限定，防止-SQL-注入，" class="headerlink" title="【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，"></a>【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，</h4><p>禁止字符串拼接 SQL 访问数据库。</p>
<h4 id="【强制】用户请求传入的任何参数必须做有效性验证。"><a href="#【强制】用户请求传入的任何参数必须做有效性验证。" class="headerlink" title="【强制】用户请求传入的任何参数必须做有效性验证。"></a>【强制】用户请求传入的任何参数必须做有效性验证。</h4><p>说明：忽略参数校验可能导致：<br>  page size 过大导致内存溢出<br>  恶意 order by 导致数据库慢查询<br>  任意重定向<br>  SQL 注入<br>  反序列化注入<br>  正则输入源串拒绝服务 ReDoS<br>说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的效果。</p>
<h4 id="【强制】禁止向-HTML-页面输出未经安全过滤或未正确转义的用户数据。"><a href="#【强制】禁止向-HTML-页面输出未经安全过滤或未正确转义的用户数据。" class="headerlink" title="【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。"></a>【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</h4><h4 id="【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。"><a href="#【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。" class="headerlink" title="【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。"></a>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。</h4><p>说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其<br>它用户，并造成短信平台资源浪费。</p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这两天断断续续看完了全部，看得时候觉得受益匪浅，但是这种东西要消化成自己的知识，一定要践行，等编码到具体部分的时候再复习，写出优秀的代码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[flume1.7使用KafkaSource采集大量数据]]></title>
      <url>http://flume.cn/2017/03/23/flume1-7%E4%BD%BF%E7%94%A8KafkaSource%E9%87%87%E9%9B%86%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>我们需要把spark Streaming的大量数据写入HDFS或者ES，为了增加稳定性，先将数据写入 kafka集群，然后使用 flume导入HDFS，数据量平均为 20W/s;</p>
<p>由于kafka版本为0.10，为了提高效率，我们使用了1.7版本的flume，它是直接消费kafka集群的，有以下坑：</p>
<h4 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h4><p>先说说高效的配置方法吧：<br>同时参照<a href="https://flume.apache.org/FlumeUserGuide.html#kafka-source" target="_blank" rel="external">flume官网文档</a>和<a href="http://kafka.apache.org/documentation/#consumerapi" target="_blank" rel="external">kafka官网文档</a>。由于新出来，所以官网是最好的，并且因为kafka的consumer配置非常多，在flume官网中默认的配置很少，所以还是需要根据具体情况配置一些好用的参数。</p>
<h4 id="Commit-cannot-be-completed-due-to-group-rebalance"><a href="#Commit-cannot-be-completed-due-to-group-rebalance" class="headerlink" title="Commit cannot be completed due to group rebalance"></a>Commit cannot be completed due to group rebalance</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">2017-03-23 10:32:32,509 (PollableSourceRunner-KafkaSource-r1) [ERROR - org.apache.kafka.clients.consumer.internals.ConsumerCoordinator$OffsetCommitResponseHandler.handle(ConsumerCoordinator.java:550)] Error ILLEGAL_GENERATION occurred while committing offsets for group flume_test</div><div class="line">2017-03-23 10:32:32,509 (PollableSourceRunner-KafkaSource-r1) [ERROR - org.apache.flume.source.kafka.KafkaSource.doProcess(KafkaSource.java:314)] KafkaSource EXCEPTION, &#123;&#125;</div><div class="line">org.apache.kafka.clients.consumer.CommitFailedException: Commit cannot be completed due to group rebalance</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator$OffsetCommitResponseHandler.handle(ConsumerCoordinator.java:552)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator$OffsetCommitResponseHandler.handle(ConsumerCoordinator.java:493)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.AbstractCoordinator$CoordinatorResponseHandler.onSuccess(AbstractCoordinator.java:665)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.AbstractCoordinator$CoordinatorResponseHandler.onSuccess(AbstractCoordinator.java:644)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.RequestFuture$1.onSuccess(RequestFuture.java:167)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.RequestFuture.fireSuccess(RequestFuture.java:133)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.RequestFuture.complete(RequestFuture.java:107)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler.onComplete(ConsumerNetworkClient.java:380)</div><div class="line">        at org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:274)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.clientPoll(ConsumerNetworkClient.java:320)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.poll(ConsumerNetworkClient.java:213)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.poll(ConsumerNetworkClient.java:193)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.poll(ConsumerNetworkClient.java:163)</div><div class="line">        at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.commitOffsetsSync(ConsumerCoordinator.java:358)</div><div class="line">        at org.apache.kafka.clients.consumer.KafkaConsumer.commitSync(KafkaConsumer.java:968)</div><div class="line">        at org.apache.flume.source.kafka.KafkaSource.doProcess(KafkaSource.java:304)</div><div class="line">        at org.apache.flume.source.AbstractPollableSource.process(AbstractPollableSource.java:60)</div><div class="line">        at org.apache.flume.source.PollableSourceRunner$PollingRunner.run(PollableSourceRunner.java:133)</div><div class="line">        at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>
<p>原因是我的数据量特别大，导致每次消费consumer进行poll的时候耗时太久，导致发送hearbeat间隔太长，coordinator认为consumer死了，就发生了rebalance；</p>
<p>解决方法：<br>增大参数：heartbeat.interval.ms - This tells Kafka wait the specified amount of milliseconds before it consider the consumer will be considered “dead”</p>
<p>缩小参数：max.partition.fetch.bytes - This will limit the amount of messages (up to) the consumer will receive when polling. </p>
<p>实际解决的时候，我并没有缩小 max.partition.fetch.bytes 参数，因为我觉得一次多拉点也好</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://blog.csdn.net/xianzhen376/article/details/51802736" target="_blank" rel="external">http://blog.csdn.net/xianzhen376/article/details/51802736</a><br><a href="https://github.com/ajkret/kafka-sample" target="_blank" rel="external">https://github.com/ajkret/kafka-sample</a><br><a href="http://stackoverflow.com/questions/35658171/kafka-commitfailedexception-consumer-exception" target="_blank" rel="external">http://stackoverflow.com/questions/35658171/kafka-commitfailedexception-consumer-exception</a><br><a href="http://kaimingwan.com/post/kafka/kafkawen-ti-shou-ji" target="_blank" rel="external">http://kaimingwan.com/post/kafka/kafkawen-ti-shou-ji</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阿里巴巴Java开发手册学习笔记（上）]]></title>
      <url>http://flume.cn/2017/03/13/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>本人自认为代码还算写得比较符合规范，但是相信阿里会有总结更深的见解，因此对自己之前没有注意到的，自己没有遵循的，做一个笔记与整理，以加深理解。</p>
<h1 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h1><h2 id="命名规约"><a href="#命名规约" class="headerlink" title="命名规约"></a>命名规约</h2><h4 id="【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"><a href="#【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。" class="headerlink" title="【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"></a>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</h4><p>重点在，不要嫌名字长，我以前写得比较短<br>正例： <code>MAX _ STOCK _ COUNT</code></p>
<h4 id="【强制】抽象类命名使用-Abstract-或-Base-开头-；-异常类命名使用-Exception-结尾-；-测试类命名以它要测试的类的名称开始，以-Test-结尾。"><a href="#【强制】抽象类命名使用-Abstract-或-Base-开头-；-异常类命名使用-Exception-结尾-；-测试类命名以它要测试的类的名称开始，以-Test-结尾。" class="headerlink" title="【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类命名以它要测试的类的名称开始，以 Test 结尾。"></a>【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类命名以它要测试的类的名称开始，以 Test 结尾。</h4><p>如果是接口的话，如何？</p>
<h4 id="接口和实现类的命名有两套规则"><a href="#接口和实现类的命名有两套规则" class="headerlink" title="接口和实现类的命名有两套规则"></a>接口和实现类的命名有两套规则</h4><blockquote>
<p>1 ） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部<br>的实现类用 Impl 的后缀与接口区别。<br>正例： CacheServiceImpl 实现 CacheService 接口。<br>2 ）  【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。<br>正例： AbstractTranslator 实现  Translatable 。</p>
</blockquote>
<p>一定注意，之前写scala的时候，并没有考虑到这一点，DAO和Service暴露出来一定是接口，然后用Impl后缀的实现类实现。</p>
<h4 id="【参考】枚举类名建议带上-Enum-后缀，枚举成员名称需要全大写，单词间用下划线隔开。"><a href="#【参考】枚举类名建议带上-Enum-后缀，枚举成员名称需要全大写，单词间用下划线隔开。" class="headerlink" title="【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。"></a>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</h4><blockquote>
<p>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br>正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS /  UNKOWN _ REASON 。</p>
</blockquote>
<h4 id="【强制】-POJO-类中布尔类型的变量，都不要加-is-，否则部分框架解析会引起序列化错误。"><a href="#【强制】-POJO-类中布尔类型的变量，都不要加-is-，否则部分框架解析会引起序列化错误。" class="headerlink" title="【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。"></a>【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。</h4><blockquote>
<p>反例：定义为基本数据类型 boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC<br>框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异<br>常。</p>
</blockquote>
<h4 id="【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。"><a href="#【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。" class="headerlink" title="【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。"></a>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</h4><p>点分隔符之间仅有一个自然语义的英语单词，包名统一使用单数形式，但类名可以使用复数形式</p>
<h4 id="【强制】杜绝完全不规范的缩写，避免望文不知义"><a href="#【强制】杜绝完全不规范的缩写，避免望文不知义" class="headerlink" title="【强制】杜绝完全不规范的缩写，避免望文不知义"></a>【强制】杜绝完全不规范的缩写，避免望文不知义</h4><blockquote>
<p>反例：  AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成  condi ，此类<br>随意缩写严重降低了代码的可阅读性。</p>
</blockquote>
<p>的确是，一定要注意</p>
<h4 id="【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。"><a href="#【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。" class="headerlink" title="【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。"></a>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。</h4><blockquote>
<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br>正例： public class OrderFactory;<br>public class LoginProxy;<br>public class ResourceObserver;</p>
</blockquote>
<h4 id="【参考】各层命名规约："><a href="#【参考】各层命名规约：" class="headerlink" title="【参考】各层命名规约："></a>【参考】各层命名规约：</h4><blockquote>
<p>A) Service / DAO 层方法命名规约<br>1 ） 获取单个对象的方法用 get 做前缀。<br>2 ） 获取多个对象的方法用 list 做前缀。<br>3 ） 获取统计值的方法用 count 做前缀。<br>4 ） 插入的方法用 save（ 推荐 ） 或 insert 做前缀。<br>5 ） 删除的方法用 remove（ 推荐 ） 或 delete 做前缀。<br>6 ） 修改的方法用 update 做前缀。<br>B) 领域模型命名规约<br>1 ） 数据对象： xxxDO ， xxx 即为数据表名。<br>2 ） 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。<br>3 ） 展示对象： xxxVO ， xxx 一般为网页名称。<br>4 ） POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。</p>
</blockquote>
<p>到时候命名的时候再查阅一遍</p>
<h4 id="【推荐】接口类中的方法和属性不要加任何修饰符号-（public-也不要加-）-，保持代码的简洁性，并加上有效的-Javadoc-注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。"><a href="#【推荐】接口类中的方法和属性不要加任何修饰符号-（public-也不要加-）-，保持代码的简洁性，并加上有效的-Javadoc-注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。" class="headerlink" title="【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。"></a>【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</h4><blockquote>
<p>正例：接口方法签名： void f();<br>接口基础常量表示： String COMPANY = “ alibaba “ ;<br>反例：接口方法定义： public abstract void f();<br>说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p>
</blockquote>
<p>定义接口的时候，方法和属性，不要加任何修饰符号，注释要写清楚</p>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><h4 id="【强制】不允许出现任何魔法值-（-即未经定义的常量-）-直接出现在代码中。"><a href="#【强制】不允许出现任何魔法值-（-即未经定义的常量-）-直接出现在代码中。" class="headerlink" title="【强制】不允许出现任何魔法值 （ 即未经定义的常量 ） 直接出现在代码中。"></a>【强制】不允许出现任何魔法值 （ 即未经定义的常量 ） 直接出现在代码中。</h4><p>反例：  String key =”Id#taobao_”+ tradeId；<br>cache . put(key ,  value);</p>
<p>为什么要这样做？</p>
<h4 id="如果变量值仅在一个范围内变化用-Enum-类。如果还带有名称之外的延伸属性，必须使用-Enum-类，下面正例中的数字就是延伸信息，表示星期几。"><a href="#如果变量值仅在一个范围内变化用-Enum-类。如果还带有名称之外的延伸属性，必须使用-Enum-类，下面正例中的数字就是延伸信息，表示星期几。" class="headerlink" title="如果变量值仅在一个范围内变化用 Enum 类。如果还带有名称之外的延伸属性，必须使用 Enum 类，下面正例中的数字就是延伸信息，表示星期几。"></a>如果变量值仅在一个范围内变化用 Enum 类。如果还带有名称之外的延伸属性，必须使用 Enum 类，下面正例中的数字就是延伸信息，表示星期几。</h4><p>正例： public Enum {  MONDAY( 1 ) ,  TUESDAY( 2 ) ,  WEDNESDAY( 3 ) ,  THURSDAY( 4 ) ,  FRIDAY( 5 ) ,SATURDAY( 6 ) ,  SUNDAY( 7 ); }</p>
<h2 id="格式规范"><a href="#格式规范" class="headerlink" title="格式规范"></a>格式规范</h2><h4 id="【强制】单行字符数限制不超过-120-个，超出需要换行，换行时遵循如下原则："><a href="#【强制】单行字符数限制不超过-120-个，超出需要换行，换行时遵循如下原则：" class="headerlink" title="【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则："></a>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</h4><p>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。<br>2 ） 运算符与下文一起换行。<br>3 ） 方法调用的点符号与下文一起换行。<br>4 ） 在多个参数超长，逗号后进行换行。<br>5 ） 在括号前不要换行，见反例。</p>
<p>我之前是不能超过90个，目的是笔记本电脑看代码的时候比较方便，现在涨到120个了</p>
<h4 id="【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。"><a href="#【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。" class="headerlink" title="【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。"></a>【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。</h4><p>说明：没有必要插入多行空格进行隔开。不能有多插几行的强迫症</p>
<h2 id="OOP规约"><a href="#OOP规约" class="headerlink" title="OOP规约"></a>OOP规约</h2><h4 id="【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。"><a href="#【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。" class="headerlink" title="【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。"></a>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</h4><h4 id="【强制】所有的覆写方法，必须加-Override-注解。"><a href="#【强制】所有的覆写方法，必须加-Override-注解。" class="headerlink" title="【强制】所有的覆写方法，必须加 @Override 注解。"></a>【强制】所有的覆写方法，必须加 @Override 注解。</h4><p>反例： getObject() 与 get0bject() 的问题。一个是字母的 O ，一个是数字的 0，加@Override<br>可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编<br>译报错。</p>
<h4 id="【强制】相同参数类型，相同业务含义，才可以使用-Java-的可变参数，避免使用-Object-。"><a href="#【强制】相同参数类型，相同业务含义，才可以使用-Java-的可变参数，避免使用-Object-。" class="headerlink" title="【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object 。"></a>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object 。</h4><p>说明：可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程 ）<br>正例： public User getUsers(String type, Integer… ids)</p>
<h4 id="【强制】对外暴露的接口签名，原则上不允许修改方法签名，避免对接口调用方产生影响。"><a href="#【强制】对外暴露的接口签名，原则上不允许修改方法签名，避免对接口调用方产生影响。" class="headerlink" title="【强制】对外暴露的接口签名，原则上不允许修改方法签名，避免对接口调用方产生影响。"></a>【强制】对外暴露的接口签名，原则上不允许修改方法签名，避免对接口调用方产生影响。</h4><p>接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p>
<h4 id="【强制】不能使用过时的类或方法。"><a href="#【强制】不能使用过时的类或方法。" class="headerlink" title="【强制】不能使用过时的类或方法。"></a>【强制】不能使用过时的类或方法。</h4><h4 id="【强制】-Object-的-equals-方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals-。"><a href="#【强制】-Object-的-equals-方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals-。" class="headerlink" title="【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals 。"></a>【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals 。</h4><p>正例： “ test “ .equals(object);<br>反例：  object.equals( “ test “ );<br>说明：推荐使用 java . util . Objects # equals （JDK 7 引入的工具类 ）</p>
<h4 id="【强制】所有的相同类型的包装类对象之间值的比较，全部使用-equals-方法比较。"><a href="#【强制】所有的相同类型的包装类对象之间值的比较，全部使用-equals-方法比较。" class="headerlink" title="【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。"></a>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。</h4><p>说明：对于 Integer var =?在-128 至 127 之间的赋值， Integer 对象是在<br>IntegerCache . cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行<br>判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，<br>推荐使用 equals 方法进行判断。</p>
<p>为什么这是个大坑？？？因为使用 == 比较的话，会判断内存地址是否相同，这样会返回False</p>
<h4 id="8-【强制】关于基本数据类型与包装数据类型的使用标准如下："><a href="#8-【强制】关于基本数据类型与包装数据类型的使用标准如下：" class="headerlink" title="8. 【强制】关于基本数据类型与包装数据类型的使用标准如下："></a>8. 【强制】关于基本数据类型与包装数据类型的使用标准如下：</h4><p>1 ） 所有的 POJO 类属性必须使用包装数据类型。<br>2 ） RPC 方法的返回值和参数必须使用包装数据类型。<br>3 ） 所有的局部变量【推荐】使用基本数据类型。</p>
<p>包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p>
<h4 id="【强制】定义-DO-DTO-VO-等-POJO-类时，不要设定任何属性默认值。"><a href="#【强制】定义-DO-DTO-VO-等-POJO-类时，不要设定任何属性默认值。" class="headerlink" title="【强制】定义 DO / DTO / VO 等 POJO 类时，不要设定任何属性默认值。"></a>【强制】定义 DO / DTO / VO 等 POJO 类时，不要设定任何属性默认值。</h4><p>反例： POJO 类的 gmtCreate 默认值为 new Date(); 但是这个属性在数据提取时并没有置入具<br>体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>
<h4 id="【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在-init-方法中。"><a href="#【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在-init-方法中。" class="headerlink" title="【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。"></a>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</h4><h4 id="【强制】-POJO-类必须写-toString-方法。使用-IDE-的中工具：-source-gt-generate-toString时，如果继承了另一个-POJO-类，注意在前面加一下-super-toString-。"><a href="#【强制】-POJO-类必须写-toString-方法。使用-IDE-的中工具：-source-gt-generate-toString时，如果继承了另一个-POJO-类，注意在前面加一下-super-toString-。" class="headerlink" title="【强制】 POJO 类必须写 toString 方法。使用 IDE 的中工具： source &gt;  generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super . toString 。"></a>【强制】 POJO 类必须写 toString 方法。使用 IDE 的中工具： source &gt;  generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super . toString 。</h4><p>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString() 方法打印其属性值，便于排<br>查问题。</p>
<h4 id="【推荐】使用索引访问用-String-的-split-方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛-IndexOutOfBoundsException-的风险。"><a href="#【推荐】使用索引访问用-String-的-split-方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛-IndexOutOfBoundsException-的风险。" class="headerlink" title="【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。"></a>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。</h4><p>说明：<br>String str = “a,b,c,,”;<br>String[] ary = str.split(“,”);<br>//预期大于 3，结果是 3<br>System.out.println(ary.length);</p>
<h4 id="【推荐】类内方法定义顺序依次是：公有方法或保护方法-gt-私有方法-gt-getter-setter方法。"><a href="#【推荐】类内方法定义顺序依次是：公有方法或保护方法-gt-私有方法-gt-getter-setter方法。" class="headerlink" title="【推荐】类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt;  getter / setter方法。"></a>【推荐】类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt;  getter / setter方法。</h4><p>说明：构造方法放到最前面，公有方法是类的调用者和维护者最关心的方法，首屏展示最好 ； 保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法 ； 而私有方法外部一般不需要特别关心，是一个黑盒实现 ； 因为方法信息价值较低，所有 Service 和 DAO 的 getter / setter 方法放在类体最后。</p>
<h4 id="【推荐】在getter-setter-方法中，尽量不要增加业务逻辑，增加排查问题的难度。"><a href="#【推荐】在getter-setter-方法中，尽量不要增加业务逻辑，增加排查问题的难度。" class="headerlink" title="【推荐】在getter / setter 方法中，尽量不要增加业务逻辑，增加排查问题的难度。"></a>【推荐】在getter / setter 方法中，尽量不要增加业务逻辑，增加排查问题的难度。</h4><h4 id="【推荐】循环体内，字符串的联接方式，使用-StringBuilder-的-append-方法进行扩展。"><a href="#【推荐】循环体内，字符串的联接方式，使用-StringBuilder-的-append-方法进行扩展。" class="headerlink" title="【推荐】循环体内，字符串的联接方式，使用 StringBuilder 的 append 方法进行扩展。"></a>【推荐】循环体内，字符串的联接方式，使用 StringBuilder 的 append 方法进行扩展。</h4><h4 id="【推荐】-final-可提高程序响应效率，声明成-final-的情况："><a href="#【推荐】-final-可提高程序响应效率，声明成-final-的情况：" class="headerlink" title="【推荐】 final 可提高程序响应效率，声明成 final 的情况："></a>【推荐】 final 可提高程序响应效率，声明成 final 的情况：</h4><p>1 ） 不需要重新赋值的变量，包括类属性、局部变量。<br>2 ） 对象参数前加 final ，表示不允许修改引用的指向。<br>3 ） 类方法确定不允许被重写。</p>
<h4 id="【推荐】慎用-Object-的-clone-方法来拷贝对象。"><a href="#【推荐】慎用-Object-的-clone-方法来拷贝对象。" class="headerlink" title="【推荐】慎用 Object 的 clone 方法来拷贝对象。"></a>【推荐】慎用 Object 的 clone 方法来拷贝对象。</h4><p>说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象<br>的拷贝。</p>
<h4 id="【推荐】类成员与方法访问控制从严："><a href="#【推荐】类成员与方法访问控制从严：" class="headerlink" title="【推荐】类成员与方法访问控制从严："></a>【推荐】类成员与方法访问控制从严：</h4><p>1 ） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private 。<br>2 ） 工具类不允许有 public 或 default 构造方法。<br>3 ） 类非 static 成员变量并且与子类共享，必须是 protected 。<br>4 ） 类非 static 成员变量并且仅在本类使用，必须是 private 。<br>5 ） 类 static 成员变量如果仅在本类使用，必须是 private 。<br>6 ） 若是 static 成员变量，必须考虑是否为 final 。<br>7 ） 类成员方法只供类内部调用，必须是 private 。<br>8 ） 类成员方法只对继承类公开，那么限制为 protected 。<br>说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。<br>思<br>考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一<br>个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视<br>线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。</p>
<p><strong>这一点是非常重要的习惯，一定要加以养成</strong></p>
<h2 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h2><h4 id="【强制】关于-hashCode-和-equals-的处理，遵循如下规则："><a href="#【强制】关于-hashCode-和-equals-的处理，遵循如下规则：" class="headerlink" title="【强制】关于 hashCode 和 equals 的处理，遵循如下规则："></a>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</h4><p>1） 只要重写 equals ，就必须重写 hashCode 。<br>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的<br>对象必须重写这两个方法。<br>3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals 。<br>正例： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象<br>作为 key 来使用。</p>
<h4 id="【强制】-ArrayList-的-subList-结果不可强转成-ArrayList-，否则会抛出-ClassCastException"><a href="#【强制】-ArrayList-的-subList-结果不可强转成-ArrayList-，否则会抛出-ClassCastException" class="headerlink" title="【强制】  ArrayList 的 subList 结果不可强转成 ArrayList ，否则会抛出 ClassCastException"></a>【强制】  ArrayList 的 subList 结果不可强转成 ArrayList ，否则会抛出 ClassCastException</h4><p>异常： java . util . RandomAccessSubList cannot be cast to java . util . ArrayList ;<br>说明： subList 返回的是  ArrayList 的内部类  SubList ，并不是  ArrayList ，而是<br>ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</p>
<h4 id="【强制】-在-subList-场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生-ConcurrentModificationException-异常。"><a href="#【强制】-在-subList-场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生-ConcurrentModificationException-异常。" class="headerlink" title="【强制】 在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 ConcurrentModificationException 异常。"></a>【强制】 在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生 ConcurrentModificationException 异常。</h4><h4 id="【强制】使用集合转数组的方法，必须使用集合的-toArray-T-array-，传入的是类型完全一样的数组，大小就是-list-size-。"><a href="#【强制】使用集合转数组的方法，必须使用集合的-toArray-T-array-，传入的是类型完全一样的数组，大小就是-list-size-。" class="headerlink" title="【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array) ，传入的是类型完全一样的数组，大小就是 list . size() 。"></a>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array) ，传入的是类型完全一样的数组，大小就是 list . size() 。</h4><p>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[] 类，若强转其它<br>类型数组将出现 ClassCastException 错误。<br>正例：<br>List<string> list = new ArrayList<string>(2);<br>list.add(“guan”);<br>list.add(“bao”);<br>String[] array = new String[list.size()];<br>array = list.toArray(array);<br>说明：使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配<br>内存空间，并返回新数组地址 ； 如果数组元素大于实际所需，下标为 [ list . size() ] 的数组<br>元素将被置为 null ，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素<br>个数一致。</string></string></p>
<p>toArray 方法，一定要带参数，指定类型和大小；</p>
<h4 id="【强制】使用工具类-Arrays-asList-把数组转换成集合时，不能使用其修改集合相关的方法，它的-add-remove-clear-方法会抛出-UnsupportedOperationException-异常。"><a href="#【强制】使用工具类-Arrays-asList-把数组转换成集合时，不能使用其修改集合相关的方法，它的-add-remove-clear-方法会抛出-UnsupportedOperationException-异常。" class="headerlink" title="【强制】使用工具类 Arrays . asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add / remove / clear 方法会抛出 UnsupportedOperationException 异常。"></a>【强制】使用工具类 Arrays . asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add / remove / clear 方法会抛出 UnsupportedOperationException 异常。</h4><p>说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。 Arrays . asList<br>体现的是适配器模式，只是转换接口，后台的数据仍是数组。<br>String[] str = new String[] { “a”, “b” };<br>List list = Arrays.asList(str);<br>第一种情况： list.add(“c”);  运行时异常。<br>第二种情况： str[0]= “gujin”; 那么 list.get(0) 也会随之修改。</p>
<h4 id="【强制】泛型通配符-lt-extends-T-gt-来接收返回的数据，此写法的泛型集合不能使用-add-方法。"><a href="#【强制】泛型通配符-lt-extends-T-gt-来接收返回的数据，此写法的泛型集合不能使用-add-方法。" class="headerlink" title="【强制】泛型通配符&lt;?  extends T &gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法。"></a>【强制】泛型通配符&lt;?  extends T &gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法。</h4><p>说明：苹果装箱后返回一个<code>&lt;?  extends Fruits &gt;</code> 对象，此对象就不能往里加任何水果，包括苹果。</p>
<h4 id="【强制】不要在-foreach-循环里进行元素的-remove-add-操作。-remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。"><a href="#【强制】不要在-foreach-循环里进行元素的-remove-add-操作。-remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。" class="headerlink" title="【强制】不要在 foreach 循环里进行元素的 remove / add 操作。 remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。"></a>【强制】不要在 foreach 循环里进行元素的 remove / add 操作。 remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</h4><p>这个坑我以前踩过，如果早点看到就不会踩到了。。。</p>
<h4 id="【强制】-在-JDK-7-版本以上，-Comparator-要满足自反性，传递性，对称性，不然-Arrays-sort-，Collections-sort-会报-IllegalArgumentException-异常。"><a href="#【强制】-在-JDK-7-版本以上，-Comparator-要满足自反性，传递性，对称性，不然-Arrays-sort-，Collections-sort-会报-IllegalArgumentException-异常。" class="headerlink" title="【强制】 在 JDK 7 版本以上， Comparator 要满足自反性，传递性，对称性，不然 Arrays.sort ，Collections.sort 会报 IllegalArgumentException 异常。"></a>【强制】 在 JDK 7 版本以上， Comparator 要满足自反性，传递性，对称性，不然 Arrays.sort ，Collections.sort 会报 IllegalArgumentException 异常。</h4><p>说明：<br>1 ） 自反性： x ， y 的比较结果和 y ， x 的比较结果相反。<br>2 ） 传递性： x &gt; y , y &gt; z ,则 x &gt; z 。<br>3 ） 对称性： x = y ,则 x , z 比较结果和 y ， z 比较结果相同。</p>
<h4 id="【推荐】集合初始化时，尽量指定集合初始值大小。"><a href="#【推荐】集合初始化时，尽量指定集合初始值大小。" class="headerlink" title="【推荐】集合初始化时，尽量指定集合初始值大小。"></a>【推荐】集合初始化时，尽量指定集合初始值大小。</h4><p>说明： ArrayList 尽量使用 ArrayList(int initialCapacity) 初始化。</p>
<h4 id="【推荐】使用-entrySet-遍历-Map-类集合-KV-，而不是-keySet-方式进行遍历。"><a href="#【推荐】使用-entrySet-遍历-Map-类集合-KV-，而不是-keySet-方式进行遍历。" class="headerlink" title="【推荐】使用 entrySet 遍历 Map 类集合 KV ，而不是 keySet 方式进行遍历。"></a>【推荐】使用 entrySet 遍历 Map 类集合 KV ，而不是 keySet 方式进行遍历。</h4><p>说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value 。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK 8，使用 Map . foreach 方法。<br>正例： values() 返回的是 V 值集合，是一个 list 集合对象 ；keySet() 返回的是 K 值集合，是一个 Set 集合对象；entrySet() 返回的是 K - V 值组合集合。</p>
<h4 id="【推荐】高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格："><a href="#【推荐】高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格：" class="headerlink" title="【推荐】高度注意 Map 类集合 K / V 能不能存储 null 值的情况，如下表格："></a>【推荐】高度注意 Map 类集合 K / V 能不能存储 null 值的情况，如下表格：</h4><table>
<thead>
<tr>
<th>集合类</th>
<th>Key</th>
<th>Value</th>
<th>Super</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hashtable</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>Dictionary</td>
<td>线程安全</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>AbstractMap</td>
<td>分段锁技术</td>
</tr>
<tr>
<td>TreeMap</td>
<td>不允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
<tr>
<td>HashMap</td>
<td>允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全</td>
</tr>
</tbody>
</table>
<p>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，注意存储null 值时会抛出 NPE 异常。</p>
<h4 id="【参考】合理利用好集合的有序性-sort-和稳定性-order-，避免集合的无序性-unsort-和不稳定性-unorder-带来的负面影响。"><a href="#【参考】合理利用好集合的有序性-sort-和稳定性-order-，避免集合的无序性-unsort-和不稳定性-unorder-带来的负面影响。" class="headerlink" title="【参考】合理利用好集合的有序性 (sort) 和稳定性 (order) ，避免集合的无序性 (unsort) 和不稳定性 (unorder) 带来的负面影响。"></a>【参考】合理利用好集合的有序性 (sort) 和稳定性 (order) ，避免集合的无序性 (unsort) 和不稳定性 (unorder) 带来的负面影响。</h4><p>说明：稳定性指集合每次遍历的元素次序是一定的。有序性是指遍历的结果是按某种比较规则依次排列的。如： ArrayList 是 order / unsort；HashMap 是 unorder / unsort；TreeSet 是order / sort 。</p>
<h4 id="【参考】利用-Set-元素唯一的特性，可以快速对一个集合进行去重操作，避免使用-List-的contains-方法进行遍历、对比、去重操作。"><a href="#【参考】利用-Set-元素唯一的特性，可以快速对一个集合进行去重操作，避免使用-List-的contains-方法进行遍历、对比、去重操作。" class="headerlink" title="【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。"></a>【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。</h4><p>自评：这个好：使用 s.addAll(list); 方法。</p>
<h2 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h2><h4 id="【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。"><a href="#【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。" class="headerlink" title="【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。"></a>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</h4><p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p>
<h4 id="【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。"><a href="#【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。" class="headerlink" title="【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。"></a>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TimerTaskThread</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">super</span>.setName(<span class="string">"TimerTaskThread"</span>); ...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。"><a href="#【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。" class="headerlink" title="【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。"></a>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</h4><p>说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资<br>源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者<br>“过度切换”的问题。</p>
<h4 id="【强制】线程池不允许使用-Executors-去创建，而是通过-ThreadPoolExecutor-的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。"><a href="#【强制】线程池不允许使用-Executors-去创建，而是通过-ThreadPoolExecutor-的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。" class="headerlink" title="【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。"></a>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</h4><p>说明： Executors 返回的线程池对象的弊端如下：<br>1） FixedThreadPool 和 SingleThreadPool :<br>允许的请求队列长度为 Integer.MAX_VALUE ，可能会堆积大量的请求，从而导致 OOM 。<br>2） CachedThreadPool 和 ScheduledThreadPool :<br>允许的创建线程数量为 Integer.MAX_VALUE ，可能会创建大量的线程，从而导致 OOM 。</p>
<h4 id="【强制】-SimpleDateFormat-是线程不安全的类，一般不要定义为-static-变量，如果定义为static-，必须加锁，或者使用-DateUtils-工具类。"><a href="#【强制】-SimpleDateFormat-是线程不安全的类，一般不要定义为-static-变量，如果定义为static-，必须加锁，或者使用-DateUtils-工具类。" class="headerlink" title="【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static ，必须加锁，或者使用 DateUtils 工具类。"></a>【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static ，必须加锁，或者使用 DateUtils 工具类。</h4><h4 id="【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁-；-能锁区块，就不要锁整个方法体-；-能用对象锁，就不要用类锁。"><a href="#【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁-；-能锁区块，就不要锁整个方法体-；-能用对象锁，就不要用类锁。" class="headerlink" title="【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁 ； 能锁区块，就不要锁整个方法体 ； 能用对象锁，就不要用类锁。"></a>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁 ； 能锁区块，就不要锁整个方法体 ； 能用对象锁，就不要用类锁。</h4><h4 id="【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁"><a href="#【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁" class="headerlink" title="【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁"></a>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁</h4><p>说明：线程一需要对表 A 、 B 、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序<br>也必须是 A 、 B 、 C ，否则可能出现死锁。</p>
<h4 id="【强制】并发修改同一记录时，避免更新丢失，要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用-version-作为更新依据。"><a href="#【强制】并发修改同一记录时，避免更新丢失，要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用-version-作为更新依据。" class="headerlink" title="【强制】并发修改同一记录时，避免更新丢失，要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。"></a>【强制】并发修改同一记录时，避免更新丢失，要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</h4><p>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次<br>数不得小于 3 次。</p>
<h4 id="【强制】多线程并行处理定时任务时，-Timer-运行多个-TimeTask-时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用-ScheduledExecutorService-则没有这个问题。"><a href="#【强制】多线程并行处理定时任务时，-Timer-运行多个-TimeTask-时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用-ScheduledExecutorService-则没有这个问题。" class="headerlink" title="【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。"></a>【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</h4><p>都是经验啊，我还没有碰到这种坑</p>
<h4 id="【推荐】使用-CountDownLatch-进行异步转同步操作，每个线程退出前必须调用-countDown-方法，线程执行代码注意-catch-异常，确保-countDown-方法可以执行，避免主线程无法执行至-countDown-方法，直到超时才返回结果。"><a href="#【推荐】使用-CountDownLatch-进行异步转同步操作，每个线程退出前必须调用-countDown-方法，线程执行代码注意-catch-异常，确保-countDown-方法可以执行，避免主线程无法执行至-countDown-方法，直到超时才返回结果。" class="headerlink" title="【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行至 countDown 方法，直到超时才返回结果。"></a>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行至 countDown 方法，直到超时才返回结果。</h4><p>说明：注意，子线程抛出异常堆栈，不能在主线程 try - catch 到。</p>
<h4 id="【推荐】避免-Random-实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed-导致的性能下降。"><a href="#【推荐】避免-Random-实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed-导致的性能下降。" class="headerlink" title="【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。"></a>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。</h4><p>说明： Random 实例包括 java . util . Random 的实例或者  Math . random() 实例。<br>正例：在 JDK 7 之后，可以直接使用 API ThreadLocalRandom ，在  JDK 7 之前，可以做到每个<br>线程一个实例。</p>
<h4 id="【参考】-volatile-解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。"><a href="#【参考】-volatile-解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。" class="headerlink" title="【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。"></a>【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</h4><p>如果是 count ++操作，使用如下类实现：AtomicInteger count =  new AtomicInteger(); count . addAndGet( 1 );  如果是 JDK 8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好 （ 减少乐观锁的重试次数 ） 。</p>
<h4 id="【参考】-HashMap-在容量不够进行-resize-时由于高并发可能出现死链，导致-CPU-飙升，在开发过程中注意规避此风险。"><a href="#【参考】-HashMap-在容量不够进行-resize-时由于高并发可能出现死链，导致-CPU-飙升，在开发过程中注意规避此风险。" class="headerlink" title="【参考】  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。"></a>【参考】  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。</h4><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h4 id="【强制】在一个-switch-块内，每个-case-要么通过-break-return-等来终止，要么注释说明程序将继续执行到哪一个-case-为止-；-在一个-switch-块内，都必须包含一个-default-语句并且放在最后，即使它什么代码也没有。"><a href="#【强制】在一个-switch-块内，每个-case-要么通过-break-return-等来终止，要么注释说明程序将继续执行到哪一个-case-为止-；-在一个-switch-块内，都必须包含一个-default-语句并且放在最后，即使它什么代码也没有。" class="headerlink" title="【强制】在一个 switch 块内，每个 case 要么通过 break / return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止 ； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。"></a>【强制】在一个 switch 块内，每个 case 要么通过 break / return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止 ； 在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。</h4><h4 id="【推荐】推荐尽量少用-else-，-if-else-的方式可以改写成："><a href="#【推荐】推荐尽量少用-else-，-if-else-的方式可以改写成：" class="headerlink" title="【推荐】推荐尽量少用 else ，  if - else 的方式可以改写成："></a>【推荐】推荐尽量少用 else ，  if - else 的方式可以改写成：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(condition)&#123;</div><div class="line">	...</div><div class="line">	return obj;</div><div class="line">&#125;</div><div class="line">// 接着写 else 的业务逻辑代码;</div></pre></td></tr></table></figure>
<p>说明：如果非得使用 if()…else if()…else… 方式表达逻辑，【强制】请勿超过 3 层，<br>超过请使用状态设计模式。<br>正例：逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。<br>思考：以后实现一定注意，我以前没有注意过这一点。</p>
<h4 id="【推荐】除常用方法（如-getXxx-isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。"><a href="#【推荐】除常用方法（如-getXxx-isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。" class="headerlink" title="【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。"></a>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</h4><p>说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么<br>样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</p>
<p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//伪代码如下</div><div class="line">boolean existed = (file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...);</div><div class="line">if (existed) &#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line">反例：</div><div class="line">if ((file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...)) &#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的-try-catch-操作-（-这个-try-catch-是否可以移至循环体外-）-。"><a href="#【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的-try-catch-操作-（-这个-try-catch-是否可以移至循环体外-）-。" class="headerlink" title="【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try - catch 操作 （ 这个 try - catch 是否可以移至循环体外 ） 。"></a>【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try - catch 操作 （ 这个 try - catch 是否可以移至循环体外 ） 。</h4><h4 id="【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。"><a href="#【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。" class="headerlink" title="【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。"></a>【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。</h4><h4 id="【参考】方法中需要进行参数校验的场景："><a href="#【参考】方法中需要进行参数校验的场景：" class="headerlink" title="【参考】方法中需要进行参数校验的场景："></a>【参考】方法中需要进行参数校验的场景：</h4><p>1 ） 调用频次低的方法。<br>2 ） 执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致<br>中间执行回退，或者错误，那得不偿失。<br>3 ） 需要极高稳定性和可用性的方法。<br>4 ） 对外提供的开放接口，不管是 RPC / API / HTTP 接口。<br>5） 敏感权限入口。</p>
<h4 id="【参考】方法中不需要参数校验的场景："><a href="#【参考】方法中不需要参数校验的场景：" class="headerlink" title="【参考】方法中不需要参数校验的场景："></a>【参考】方法中不需要参数校验的场景：</h4><p>1 ） 极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参<br>数检查。<br>2 ） 底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错<br>误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一<br>台服务器中，所以 DAO 的参数校验，可以省略。<br>3 ） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参<br>数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p>
<h2 id="注释规约"><a href="#注释规约" class="headerlink" title="注释规约"></a>注释规约</h2><h4 id="【强制】类、类属性、类方法的注释必须使用-Javadoc-规范，使用-内容-格式，不得使用-xxx-方式。"><a href="#【强制】类、类属性、类方法的注释必须使用-Javadoc-规范，使用-内容-格式，不得使用-xxx-方式。" class="headerlink" title="【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*内容/格式，不得使用 // xxx 方式。"></a>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/<em>*内容</em>/格式，不得使用 // xxx 方式。</h4><p>说明：在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注<br>释 ； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高<br>阅读效率。</p>
<h4 id="【强制】所有的抽象方法-（-包括接口中的方法-）-必须要用-Javadoc-注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。"><a href="#【强制】所有的抽象方法-（-包括接口中的方法-）-必须要用-Javadoc-注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。" class="headerlink" title="【强制】所有的抽象方法 （ 包括接口中的方法 ） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。"></a>【强制】所有的抽象方法 （ 包括接口中的方法 ） 必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</h4><p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p>
<h4 id="【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。"><a href="#【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。" class="headerlink" title="【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。"></a>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</h4><h4 id="【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。"><a href="#【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。" class="headerlink" title="【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。"></a>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</h4><p>反例：“ TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p>
<h4 id="【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。"><a href="#【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。" class="headerlink" title="【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。"></a>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</h4><p>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，<br>就失去了导航的意义。</p>
<h4 id="【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。"><a href="#【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。" class="headerlink" title="【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。"></a>【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。</h4><p>说明：代码被注释掉有两种可能性：1 ） 后续会恢复此段代码逻辑。2 ） 永久不用。前者如果没<br>有备注信息，难以知晓注释动机。后者建议直接删掉 （ 代码仓库保存了历史代码 ） 。<br>思考：这一点我需要反思，很多时候代码舍不得删，搞得很乱，所以应该勤提交，使用git来保存历史代码；</p>
<h4 id="【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑-；-第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。"><a href="#【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑-；-第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。" class="headerlink" title="【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑 ； 第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。"></a>【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑 ； 第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。</h4><p>完全没有注释的大段代码对于阅读者形同<br>天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路 ； 注释也是给继任者看<br>的，使其能够快速接替自己的工作。</p>
<h4 id="【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。"><a href="#【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。" class="headerlink" title="【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。"></a>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</h4><p>1 ） 待办事宜 （TODO） : （ 标记人，标记时间， [ 预计处理时间 ]）<br>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc<br>还没有实现，但已经被广泛使用。只能应用于类，接口和方法 （ 因为它是一个 Javadoc 标签 ） 。<br>2 ） 错误，不能工作 （FIXME） : （ 标记人，标记时间， [ 预计处理时间 ]）<br>在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h4 id="【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。"><a href="#【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。" class="headerlink" title="【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。"></a>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</h4><p>说明：不要在方法体内定义： Pattern pattern =  Pattern . compile( 规则 );</p>
<h4 id="【强制】后台输送给页面的变量必须加-var-——中间的感叹号。"><a href="#【强制】后台输送给页面的变量必须加-var-——中间的感叹号。" class="headerlink" title="【强制】后台输送给页面的变量必须加 $!{var} ——中间的感叹号。"></a>【强制】后台输送给页面的变量必须加 $!{var} ——中间的感叹号。</h4><p>说明：如果 var = null 或者不存在，那么 ${var} 会直接显示在页面上。<br>思考：这里是 Velocity 模板引擎的一些内容，Velocity是一个基于Java的模板引擎，通过特定的语法，Velocity可以获取在java语言中定义的对象，从而实现界面和java代码的真正分离，这意味着可以使用velocity替代jsp的开发模式了。这使得前端开发人员可以和 Java 程序开发人员同步开发一个遵循 MVC 架构的 web 站点，在实际应用中，velocity还可以应用于很多其他的场景。，比如源代码生成、自动email和转换xml等。</p>
<h4 id="【强制】注意-Math-random-这个方法返回是-double-类型，注意取值的范围-0≤-x-lt-1-（-能够取到零值，注意除零异常-）-，如果想获取整数类型的随机数，不要将-x-放大-10-的若干倍然后取整，直接使用-Random-对象的-nextInt-或者-nextLong-方法。"><a href="#【强制】注意-Math-random-这个方法返回是-double-类型，注意取值的范围-0≤-x-lt-1-（-能够取到零值，注意除零异常-）-，如果想获取整数类型的随机数，不要将-x-放大-10-的若干倍然后取整，直接使用-Random-对象的-nextInt-或者-nextLong-方法。" class="headerlink" title="【强制】注意  Math . random() 这个方法返回是 double 类型，注意取值的范围 0≤ x &lt;1 （ 能够取到零值，注意除零异常 ） ，如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。"></a>【强制】注意  Math . random() 这个方法返回是 double 类型，注意取值的范围 0≤ x &lt;1 （ 能够取到零值，注意除零异常 ） ，如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</h4><h4 id="【强制】获取当前毫秒数-System-currentTimeMillis-而不是-new-Date-getTime"><a href="#【强制】获取当前毫秒数-System-currentTimeMillis-而不是-new-Date-getTime" class="headerlink" title="【强制】获取当前毫秒数 System . currentTimeMillis(); 而不是 new Date() . getTime();"></a>【强制】获取当前毫秒数 System . currentTimeMillis(); 而不是 new Date() . getTime();</h4><p>说明：如果想获取更加精确的纳秒级时间值，用 System . nanoTime() 。在 JDK 8 中，针对统计时间等场景，推荐使用 Instant类。</p>
<h4 id="【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。"><a href="#【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。" class="headerlink" title="【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。"></a>【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</h4><h4 id="【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。"><a href="#【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。" class="headerlink" title="【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。"></a>【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache-Eagle定义一个Application]]></title>
      <url>http://flume.cn/2017/03/10/Apache-Eagle%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAApplication/</url>
      <content type="html"><![CDATA[<p>为了监控大数据平台的大量组件与应用，我们决定引入 Apache Eagle()，Apache Eagle是由Ebay贡献并在2017年初成为了顶级项目。。。它的核心就是用一个实时计算平台（Storm），接收数据（kafka等），然后处理，然后存hbase，然后报警。由于缺乏文档，所以最简单的配置使用也是踩了不少坑：<br>当前版本：Eagle 0.5.0 Spark 1.6.2</p>
<h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><p><a href="http://10.142.78.74:8090/#/integration/applicationList" target="_blank" rel="external">http://10.142.78.74:8090/#/integration/applicationList</a></p>
<p><a href="http://10.142.78.100:8080/topology.html?id=SPARK_HISTORY_JOB_APP_TESTENV-38-1489136484" target="_blank" rel="external">http://10.142.78.100:8080/topology.html?id=SPARK_HISTORY_JOB_APP_TESTENV-38-1489136484</a></p>
<p><a href="http://10.142.78.100:60010/master-status" target="_blank" rel="external">http://10.142.78.100:60010/master-status</a></p>
<p><a href="http://www.yiibai.com/hbase/" target="_blank" rel="external">http://www.yiibai.com/hbase/</a></p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="alert-engine"><a href="#alert-engine" class="headerlink" title="alert engine"></a>alert engine</h3><h4 id="高层次设计"><a href="#高层次设计" class="headerlink" title="高层次设计"></a>高层次设计</h4><p>从高层来看，alert engine 是一个元数据驱动的storm拓扑，它包括了多个模块协同工作：</p>
<ul>
<li>Admin Service - 提供了元数据管理和拓扑管理的API。其中：Metadata store 是 admin service API的具体实现.</li>
<li>Alert Engine Topology on Storm ：通用的Storm 拓扑</li>
<li>Coordinator 协调器： alert engine拓扑的调度程序。它是一个后端调度程序，用于新策略的加载，资源分配，并且暴露了一些内部的API用于管理；</li>
<li>Zookeeper：作为通信和警报引擎之间的通信。</li>
</ul>
<img src="/2017/03/10/Apache-Eagle定义一个Application/eagle_1.png" alt="eagle_1.png" title="">
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Spark History Job Monitor主要分为两大步骤，在代码中的表现为一个 SparkHistoryJobSpout 和一个 SparkHistoryJobParseBolt：</p>
<p>SparkHistoryJobSpout：从 rm 提供的metric中，解析出 已经完成的spark job：COMPLETE_SPARK_JOB，得到 applicationID，发给下一个Bolt<br>SparkHistoryJobParseBolt：接收到上游发过来的appId后，通过spark的规则，将其</p>
<h2 id="配置-Spark-History-Job-Monitor"><a href="#配置-Spark-History-Job-Monitor" class="headerlink" title="配置 Spark History Job Monitor"></a>配置 Spark History Job Monitor</h2><p>分别点击 <code>Integration</code> -&gt; <code>Sites</code> -&gt; <code>Edit</code> 进入应用配置界面；<br>找到 <code>Spark History Job Monitor</code> 配置，点击右边的 <code>编辑</code>按钮，即可编辑<br>对于 Spark History Job Monitor，由于我们集群是Kerberos的，需要配置以下参数，</p>
<h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><h5 id="Execution-Mode-选择-Cluster-Mode"><a href="#Execution-Mode-选择-Cluster-Mode" class="headerlink" title="Execution Mode  选择 Cluster Mode"></a>Execution Mode  选择 Cluster Mode</h5><h5 id="Execution-File"><a href="#Execution-File" class="headerlink" title="Execution File"></a>Execution File</h5><p>默认为：  /usr/local/eagle-0.5.0-SNAPSHOT/lib/eagle-topology-0.5.0-SNAPSHOT-assembly.jar<br>可以不用改</p>
<h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><h5 id="resource-manager-url-指的是yarn的那个界面"><a href="#resource-manager-url-指的是yarn的那个界面" class="headerlink" title="resource manager url  指的是yarn的那个界面"></a>resource manager url  指的是yarn的那个界面</h5><pre><code>http://10.142.78.36:8090/
</code></pre><h5 id="hdfs-url-指的是-hdfs的路径"><a href="#hdfs-url-指的是-hdfs的路径" class="headerlink" title="hdfs url 指的是 hdfs的路径"></a>hdfs url 指的是 hdfs的路径</h5><pre><code>hdfs://10.142.78.98:54310/
</code></pre><h5 id="hdfs-base-path-for-spark-job-data-指的是spark-history-server配置的日志写在hdfs中的路径"><a href="#hdfs-base-path-for-spark-job-data-指的是spark-history-server配置的日志写在hdfs中的路径" class="headerlink" title="hdfs base path for spark job data  指的是spark history server配置的日志写在hdfs中的路径"></a>hdfs base path for spark job data  指的是spark history server配置的日志写在hdfs中的路径</h5><pre><code>hdfs:///user/op/sparkHistoryServe
</code></pre><h4 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h4><p>这里主要配的是一些storm以及spark的一些相关参数，可以先不用配</p>
<h4 id="Custom-如果hdfs是Kerberos的话，需要配置Kerberos相关参数"><a href="#Custom-如果hdfs是Kerberos的话，需要配置Kerberos相关参数" class="headerlink" title="Custom 如果hdfs是Kerberos的话，需要配置Kerberos相关参数"></a>Custom 如果hdfs是Kerberos的话，需要配置Kerberos相关参数</h4><p>需要增加如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dataSourceConfig.hdfs.keytab.file hdfs@HADOOP.CHINATELECOM.CN</div><div class="line">dataSourceConfig.hdfs.kerberos.principal /etc/hadoop/conf/hdfs.keytab</div></pre></td></tr></table></figure>
<h4 id="custom"><a href="#custom" class="headerlink" title="custom"></a>custom</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"workers"</span>: <span class="string">"3"</span>,</div><div class="line">    <span class="attr">"topology.numOfSpoutExecutors"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"topology.numOfSpoutTasks"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"topology.numOfParseBoltExecutors"</span>: <span class="string">"6"</span>,</div><div class="line">    <span class="attr">"topology.numOfParserBoltTasks"</span>: <span class="string">"6"</span>,</div><div class="line">    <span class="attr">"topology.spoutCrawlInterval"</span>: <span class="string">"60000"</span>,</div><div class="line">    <span class="attr">"topology.requestLimit"</span>: <span class="string">"100"</span>,</div><div class="line">    <span class="attr">"topology.message.timeout.secs"</span>: <span class="string">"600"</span>,</div><div class="line">    <span class="attr">"service.flushLimit"</span>: <span class="string">"500"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.rm.url"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.fs.defaultFS"</span>: <span class="string">"hdfs://xxxxx"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.baseDir"</span>: <span class="string">"/logs/spark-events"</span>,</div><div class="line">    <span class="attr">"spark.jobConf.additional.info"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.executor.memory"</span>: <span class="string">"1g"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.driver.memory"</span>: <span class="string">"1g"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.driver.cores"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.executor.cores"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.yarn.am.memory"</span>: <span class="string">"512m"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.yarn.am.cores"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.yarn.executor.memoryOverhead.factor"</span>: <span class="string">"10"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.yarn.driver.memoryOverhead.factor"</span>: <span class="string">"10"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.yarn.am.memoryOverhead.factor"</span>: <span class="string">"10"</span>,</div><div class="line">    <span class="attr">"spark.defaultVal.spark.yarn.overhead.min"</span>: <span class="string">"384m"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.namenode.rpc-address.xxxxx.nn1"</span>: <span class="string">"yyyyy"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.namenode.rpc-address.xxxxx.nn2"</span>: <span class="string">"zzzzz"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.client.failover.proxy.provider.xxxxx"</span>: <span class="string">"org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.nameservices"</span>: <span class="string">"xxxxx"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.ha.namenodes.xxxxx"</span>: <span class="string">"nn1,nn2"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.hdfs.kerberos.principal"</span>: <span class="string">"aaaaaaa"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.data.transfer.saslproperties.resolver.class"</span>: <span class="string">"org.apache.hadoop.security.WhitelistBasedResolver"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.hdfs.keytab.file"</span>: <span class="string">"/home/storm/.keytab/b_eagle.keytab"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.data.transfer.protection"</span>: <span class="string">"authentication,privacy"</span>,</div><div class="line">    <span class="attr">"dataSourceConfig.hdfs.dfs.encrypt.data.transfer.cipher.suites"</span>: <span class="string">"AES/CTR/NoPadding"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight json"><figcaption><span>我们的</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"workers"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"topology.numOfSpoutExecutors"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"topology.numOfSpoutTasks"</span>: <span class="string">"4"</span>,</div><div class="line">	<span class="attr">"topology.numOfParseBoltExecutors"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"topology.numOfParserBoltTasks"</span>: <span class="string">"4"</span>,</div><div class="line">	<span class="attr">"topology.spoutCrawlInterval"</span>: <span class="string">"10000"</span>,</div><div class="line">	<span class="attr">"topology.message.timeout.secs"</span>: <span class="string">"300"</span>,</div><div class="line">	<span class="attr">"service.flushLimit"</span>: <span class="string">"500"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.rm.url"</span>: <span class="string">"http://10.142.78.36:8090/"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.fs.defaultFS"</span>: <span class="string">"hdfs://ns"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.baseDir"</span>: <span class="string">"/user/op/sparkHistoryServer"</span>,</div><div class="line">	<span class="attr">"spark.jobConf.additional.info"</span>: <span class="string">""</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.executor.memory"</span>: <span class="string">"1g"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.driver.memory"</span>: <span class="string">"1g"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.driver.cores"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.executor.cores"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.yarn.am.memory"</span>: <span class="string">"512m"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.yarn.am.cores"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.yarn.executor.memoryOverhead.factor"</span>: <span class="string">"10"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.yarn.driver.memoryOverhead.factor"</span>: <span class="string">"10"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.yarn.am.memoryOverhead.factor"</span>: <span class="string">"10"</span>,</div><div class="line">	<span class="attr">"spark.defaultVal.spark.yarn.overhead.min"</span>: <span class="string">"384m"</span>,</div><div class="line"></div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.namenode.kerberos.principal"</span>: <span class="string">"hdfs/_HOST@HADOOP.CHINATELECOM.CN"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.hadoop.security.authorization"</span>: <span class="string">"true"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.data.transfer.protection"</span>: <span class="string">"authentication,privacy"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.namenode.rpc-address.ns.nn1"</span>: <span class="string">"NM-ITC-NF8460M3-303-011:54310"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.namenode.rpc-address.ns.nn2"</span>: <span class="string">"NM-ITC-NF8460M3-303-012:54310"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.nameservices"</span>: <span class="string">"ns"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.client.failover.proxy.provider.ns"</span>: <span class="string">"org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.java.security.krb5.kdc"</span>: <span class="string">"test-bdd-073"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.ha.namenodes.ns"</span>: <span class="string">"nn1,nn2"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.encrypt.data.transfer.cipher.suites"</span>: <span class="string">"AES/CTR/NoPadding"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.hdfs.kerberos.principal"</span>: <span class="string">"hdfs@HADOOP.CHINATELECOM.CN"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.dfs.data.transfer.saslproperties.resolver.class"</span>: <span class="string">"org.apache.hadoop.security.WhitelistBasedResolver"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.hadoop.security.authentication"</span>: <span class="string">"kerberos"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.java.security.krb5.conf"</span>: <span class="string">"/etc/krb5.conf"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.java.security.krb5.realm"</span>: <span class="string">"HADOOP.CHINATELECOM.CN"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.hdfs.hdfs.keytab.file"</span>: <span class="string">"/tmp/hdfs.keytab"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight json"><figcaption><span>,我们的 MR history job</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"workers"</span>: <span class="string">"2"</span>,</div><div class="line">	<span class="attr">"stormConfig.mrHistoryJobSpoutTasks"</span>: <span class="string">"4"</span>,</div><div class="line">	<span class="attr">"stormConfig.jobKafkaSinkTasks"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"stormConfig.taskAttemptKafkaSinkTasks"</span>: <span class="string">"1"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.fs.defaultFS"</span>: <span class="string">"hdfs://ns"</span>,</div><div class="line">	<span class="attr">"endpointConfig.basePath"</span>: <span class="string">"/history-yarn/done"</span>,</div><div class="line">	<span class="attr">"endpointConfig.mrHistoryServerUrl"</span>: <span class="string">"http://10.142.78.40:19890"</span>,</div><div class="line">	<span class="attr">"endpointConfig.timeZone"</span>: <span class="string">"Etc/GMT-8"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.MAP_REDUCE_JOB_STREAM.topic"</span>: <span class="string">"map_reduce_job_testenv"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.MAP_REDUCE_TASK_ATTEMPT_STREAM.topic"</span>: <span class="string">"map_reduce_task_attempt_testenv"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.brokerList"</span>: <span class="string">"10.142.78.100:9092"</span>,</div><div class="line">	<span class="attr">"dataSourceConfig.zkConnection"</span>: <span class="string">"10.142.78.98:2181,10.142.78.99:2181,10.142.78.100:2181"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.serializerClass"</span>: <span class="string">"kafka.serializer.StringEncoder"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.keySerializerClass"</span>: <span class="string">"kafka.serializer.StringEncoder"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.producerType"</span>: <span class="string">"async"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.numBatchMessages"</span>: <span class="string">"4096"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.maxQueueBufferMs"</span>: <span class="string">"5000"</span>,</div><div class="line">	<span class="attr">"dataSinkConfig.requestRequiredAcks"</span>: <span class="string">"0"</span>,</div><div class="line">	</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.namenode.kerberos.principal"</span>: <span class="string">"hdfs/_HOST@HADOOP.CHINATELECOM.CN"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.hadoop.security.authorization"</span>: <span class="string">"true"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.data.transfer.protection"</span>: <span class="string">"authentication,privacy"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.namenode.rpc-address.ns.nn1"</span>: <span class="string">"NM-ITC-NF8460M3-303-011:54310"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.namenode.rpc-address.ns.nn2"</span>: <span class="string">"NM-ITC-NF8460M3-303-012:54310"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.nameservices"</span>: <span class="string">"ns"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.client.failover.proxy.provider.ns"</span>: <span class="string">"org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.java.security.krb5.kdc"</span>: <span class="string">"test-bdd-073"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.ha.namenodes.ns"</span>: <span class="string">"nn1,nn2"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.encrypt.data.transfer.cipher.suites"</span>: <span class="string">"AES/CTR/NoPadding"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.hdfs.kerberos.principal"</span>: <span class="string">"hdfs@HADOOP.CHINATELECOM.CN"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.dfs.data.transfer.saslproperties.resolver.class"</span>: <span class="string">"org.apache.hadoop.security.WhitelistBasedResolver"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.hadoop.security.authentication"</span>: <span class="string">"kerberos"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.java.security.krb5.conf"</span>: <span class="string">"/etc/krb5.conf"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.java.security.krb5.realm"</span>: <span class="string">"HADOOP.CHINATELECOM.CN"</span>,</div><div class="line">	<span class="attr">"endpointConfig.hdfs.hdfs.keytab.file"</span>: <span class="string">"/tmp/hdfs.keytab"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p><a href="https://eagle.apache.org/" target="_blank" rel="external">https://eagle.apache.org/</a><br><a href="http://www.csdn.net/article/2015-10-29/2826076" target="_blank" rel="external">http://www.csdn.net/article/2015-10-29/2826076</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark on yarn 作业提交源码分析]]></title>
      <url>http://flume.cn/2017/02/28/spark-on-yarn-%E4%BD%9C%E4%B8%9A%E6%8F%90%E4%BA%A4%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>最近因为上线hdfs的federation功能，测试spark程序的时候遇到了问题，在分析此问题的过程中对spark on yarn提交作业的过程记录一下，以SparkPi为例，从spark-submit开始，通过debug日志分析详细的过程：<br>整个过程中主要涉及：spark源码（1.6.2）hadoop源码（2.6.0-cdh5.4.7） Kerberos相关</p>
<h4 id="从spark-sumbit开始"><a href="#从spark-sumbit开始" class="headerlink" title="从spark-sumbit开始"></a>从spark-sumbit开始</h4><p>提交命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spark-submit --master yarn-client --class SparkPi ./<span class="built_in">test</span>Jars/my.jar</div></pre></td></tr></table></figure></p>
<p>进入<code>./bin/spark-submit</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$&#123;SPARK_HOME&#125;</span>"</span>/bin/spark-class org.apache.spark.deploy.SparkSubmit <span class="string">"<span class="variable">$@</span>"</span></div></pre></td></tr></table></figure></p>
<p>以上脚本调用了spark-class脚本，并增加了参数 org.apache.spark.deploy.SparkSubmit。<br>进入 <code>./bin/spark-class</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 首先执行load-spark-env.sh载入 ./conf/spark-env.sh，保证只载入一次，如果之前手动载入过一次的话，就不会再覆盖载入</div><div class="line">. <span class="string">"<span class="variable">$&#123;SPARK_HOME&#125;</span>"</span>/bin/load-spark-env.sh</div><div class="line">// 寻找spark安装包，是这个样子：`spark-assembly.*hadoop.*\.jar$`，而且只能有一个</div><div class="line">...</div><div class="line">// 最后会通过java调用spark的 `org.apache.spark.launcher.Main`作为spark应用程序的主入口，首先循环读取ARG参数，加入到CMD中：</div><div class="line">CMD=()</div><div class="line"><span class="keyword">while</span> IFS= <span class="built_in">read</span> <span class="_">-d</span> <span class="string">''</span> -r ARG; <span class="keyword">do</span></div><div class="line">  CMD+=(<span class="string">"<span class="variable">$ARG</span>"</span>)</div><div class="line"><span class="keyword">done</span> &lt; &lt;(<span class="string">"<span class="variable">$RUNNER</span>"</span> -cp <span class="string">"<span class="variable">$LAUNCH_CLASSPATH</span>"</span> org.apache.spark.launcher.Main <span class="string">"<span class="variable">$@</span>"</span>)</div><div class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$&#123;CMD[@]&#125;</span>"</span></div></pre></td></tr></table></figure>
<p>翻译过来就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/java -cp /usr/lib/spark/lib/spark-assembly-1.6.2-hadoop2.6.0-cdh5.4.7.jar org.apache.spark.launcher.Main org.apache.spark.deploy.SparkSubmit --master yarn-client --class SparkPi ./testJars/my.jar</div></pre></td></tr></table></figure></p>
<p>将这个命令执行的结果返回给 CMD参数，然后执行</p>
<h4 id="launcher-Main"><a href="#launcher-Main" class="headerlink" title="launcher.Main"></a>launcher.Main</h4><p>这个类的目的是同时适应unix和windows操作系统</p>
<figure class="highlight java"><figcaption><span>org.apache.spark.launcher.Main.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (className.equals(<span class="string">"org.apache.spark.deploy.SparkSubmit"</span>)) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 创建一个命令解析器，这里会优先将提交的命令中的 --master之类的参数解析，然后保存到 SparkSubmitCommandBuilder 中</span></div><div class="line">        builder = <span class="keyword">new</span> SparkSubmitCommandBuilder(args);</div><div class="line">      &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      builder = <span class="keyword">new</span> SparkClassCommandBuilder(className, args);</div><div class="line">    &#125;</div><div class="line">    Map&lt;String, String&gt; env = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">    <span class="comment">// 使用解析器来解析参数，并且得到环境变量的HashMap值</span></div><div class="line">    List&lt;String&gt; cmd = builder.buildCommand(env);</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (isWindows()) &#123;</div><div class="line">      System.out.println(prepareWindowsCommand(cmd, env));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// In bash, use NULL as the arg separator since it cannot be used in an argument.</span></div><div class="line">      <span class="comment">// 根据输入的参数，准备bash的命令，然后打印出来，传给 spark-class脚本中的$CMD 变量，然后执行，</span></div><div class="line">      List&lt;String&gt; bashCmd = prepareBashCommand(cmd, env);</div><div class="line">      <span class="keyword">for</span> (String c : bashCmd) &#123;</div><div class="line">        System.out.print(c);</div><div class="line">        System.out.print(<span class="string">'\0'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>再来看看这个cmd到底是怎么build的：<br><figure class="highlight java"><figcaption><span>org.apache.spark.launcher.SparkSubmitCommandBuilder.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这段代码进入 buildSparkSubmitCommand</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">buildCommand</span><span class="params">(Map&lt;String, String&gt; env)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="keyword">if</span> (PYSPARK_SHELL_RESOURCE.equals(appResource) &amp;&amp; !printInfo) &#123;</div><div class="line">    <span class="keyword">return</span> buildPySparkShellCommand(env);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SPARKR_SHELL_RESOURCE.equals(appResource) &amp;&amp; !printInfo) &#123;</div><div class="line">    <span class="keyword">return</span> buildSparkRCommand(env);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> buildSparkSubmitCommand(env);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 看看buildSparkSubmitCommand函数<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"> <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">buildSparkSubmitCommand</span><span class="params">(Map&lt;String, String&gt; env)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="comment">// Load the properties file and check whether spark-submit will be running the app's driver</span></div><div class="line">  <span class="comment">// or just launching a cluster app. When running the driver, the JVM's argument will be</span></div><div class="line">  <span class="comment">// modified to cover the driver's configuration.</span></div><div class="line">  <span class="comment">// 先获取有效的配置，如果用户不自己制定的话，默认情况下会去 $SPARK_HOME/conf/spark-defaults.conf 中拿</span></div><div class="line">  Map&lt;String, String&gt; config = getEffectiveConfig();</div><div class="line">  <span class="keyword">boolean</span> isClientMode = isClientMode(config);</div><div class="line">  String extraClassPath = isClientMode ? config.get(SparkLauncher.DRIVER_EXTRA_CLASSPATH) : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  List&lt;String&gt; cmd = buildJavaCommand(extraClassPath);</div><div class="line">  <span class="comment">// Take Thrift Server as daemon</span></div><div class="line">  <span class="keyword">if</span> (isThriftServer(mainClass)) &#123;</div><div class="line">    addOptionString(cmd, System.getenv(<span class="string">"SPARK_DAEMON_JAVA_OPTS"</span>));</div><div class="line">  &#125;</div><div class="line">  addOptionString(cmd, System.getenv(<span class="string">"SPARK_SUBMIT_OPTS"</span>));</div><div class="line">  addOptionString(cmd, System.getenv(<span class="string">"SPARK_JAVA_OPTS"</span>));</div><div class="line"></div><div class="line">  <span class="comment">// 接下来的代码的意思是，很多没有手动指定的参数，会根据配置文件中拿，如果配置文件中没有，会给个默认值</span></div><div class="line">  <span class="keyword">if</span> (isClientMode) &#123;</div><div class="line">    <span class="comment">// Figuring out where the memory value come from is a little tricky due to precedence.</span></div><div class="line">    <span class="comment">// Precedence is observed in the following order:</span></div><div class="line">    <span class="comment">// - explicit configuration (setConf()), which also covers --driver-memory cli argument.</span></div><div class="line">    <span class="comment">// - properties file.</span></div><div class="line">    <span class="comment">// - SPARK_DRIVER_MEMORY env variable</span></div><div class="line">    <span class="comment">// - SPARK_MEM env variable</span></div><div class="line">    <span class="comment">// - default value (1g)</span></div><div class="line">    <span class="comment">// Take Thrift Server as daemon</span></div><div class="line">    String tsMemory =</div><div class="line">      isThriftServer(mainClass) ? System.getenv(<span class="string">"SPARK_DAEMON_MEMORY"</span>) : <span class="keyword">null</span>;</div><div class="line">    String memory = firstNonEmpty(tsMemory, config.get(SparkLauncher.DRIVER_MEMORY),</div><div class="line">      System.getenv(<span class="string">"SPARK_DRIVER_MEMORY"</span>), System.getenv(<span class="string">"SPARK_MEM"</span>), DEFAULT_MEM);</div><div class="line">    cmd.add(<span class="string">"-Xms"</span> + memory);</div><div class="line">    cmd.add(<span class="string">"-Xmx"</span> + memory);</div><div class="line">    addOptionString(cmd, config.get(SparkLauncher.DRIVER_EXTRA_JAVA_OPTIONS));</div><div class="line">    mergeEnvPathList(env, getLibPathEnvName(),</div><div class="line">      config.get(SparkLauncher.DRIVER_EXTRA_LIBRARY_PATH));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addPermGenSizeOpt(cmd);</div><div class="line">  cmd.add(<span class="string">"org.apache.spark.deploy.SparkSubmit"</span>);</div><div class="line">  cmd.addAll(buildSparkSubmitArgs());</div><div class="line">  <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="SparkSubmit类"><a href="#SparkSubmit类" class="headerlink" title="SparkSubmit类"></a>SparkSubmit类</h4><p>通过上述方法生成了命令到 $CMD 参数中后，就通过 <code>exec &quot;${CMD[@]}&quot;</code> 命令执行之前生成的命令，也就是 <code>org.apache.spark.deploy.SparkSubmit</code> 类。大概是这样子：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 在Unix中，分隔符为<span class="string">'\0'</span>，以下是大概写法</div><div class="line">/bin/java -Xms1g -XX:MaxPermSize=256m -cp /usr/lib/spark/lib/spark-assembly-1.6.2-hadoop2.6.0-cdh5.4.7.jar org.apache.spark.deploy.SparkSubmit --master yarn-client --class SparkPi ./<span class="built_in">test</span>Jars/my.jar</div></pre></td></tr></table></figure></p>
<p>进入main函数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> appArgs = <span class="keyword">new</span> <span class="type">SparkSubmitArguments</span>(args)</div><div class="line">    <span class="keyword">if</span> (appArgs.verbose) &#123;</div><div class="line">      <span class="comment">// scalastyle:off println</span></div><div class="line">      printStream.println(appArgs)</div><div class="line">      <span class="comment">// scalastyle:on println</span></div><div class="line">    &#125;</div><div class="line">    appArgs.action <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">SparkSubmitAction</span>.<span class="type">SUBMIT</span> =&gt; submit(appArgs)</div><div class="line">      <span class="keyword">case</span> <span class="type">SparkSubmitAction</span>.<span class="type">KILL</span> =&gt; kill(appArgs)</div><div class="line">      <span class="keyword">case</span> <span class="type">SparkSubmitAction</span>.<span class="type">REQUEST_STATUS</span> =&gt; requestStatus(appArgs)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>咱们调用的是 submit(appArgs)：如下代码，主要分为两步，第一步，准备提交的参数四元组，第二步，<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">submit</span></span>(args: <span class="type">SparkSubmitArguments</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="comment">// 这里的代码很长，主要目的是准备提交应用的环境，针对 yarn standalone Mesos等各类环境进行针对性处理，并对输入的args进行一些校验和修改，返回一个 4-tuple：</span></div><div class="line">    <span class="comment">// 1. 子程序的参数列表； 2. 子程序的classpath列表 3. 系统环境变量HashMap 4. mainClass</span></div><div class="line">    <span class="keyword">val</span> (childArgs, childClasspath, sysProps, childMainClass) = prepareSubmitEnvironment(args)</div><div class="line"></div><div class="line">    <span class="comment">// 如果有代理晕乎的话，需要创建一个代理用户，然后验证，后运行runMain</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doRunMain</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">      <span class="keyword">if</span> (args.proxyUser != <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">val</span> proxyUser = <span class="type">UserGroupInformation</span>.createProxyUser(args.proxyUser,</div><div class="line">          <span class="type">UserGroupInformation</span>.getCurrentUser())</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          proxyUser.doAs(<span class="keyword">new</span> <span class="type">PrivilegedExceptionAction</span>[<span class="type">Unit</span>]() &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">              runMain(childArgs, childClasspath, sysProps, childMainClass, args.verbose)</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125; <span class="keyword">catch</span> &#123;</div><div class="line">          <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt;</div><div class="line">            <span class="comment">// Hadoop's AuthorizationException suppresses the exception's stack trace, which</span></div><div class="line">            <span class="comment">// makes the message printed to the output by the JVM not very helpful. Instead,</span></div><div class="line">            <span class="comment">// detect exceptions with empty stack traces here, and treat them differently.</span></div><div class="line">            <span class="keyword">if</span> (e.getStackTrace().length == <span class="number">0</span>) &#123;</div><div class="line">              <span class="comment">// scalastyle:off println</span></div><div class="line">              printStream.println(<span class="string">s"ERROR: <span class="subst">$&#123;e.getClass().getName()&#125;</span>: <span class="subst">$&#123;e.getMessage()&#125;</span>"</span>)</div><div class="line">              <span class="comment">// scalastyle:on println</span></div><div class="line">              exitFn(<span class="number">1</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">throw</span> e</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        runMain(childArgs, childClasspath, sysProps, childMainClass, args.verbose)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="comment">// In standalone cluster mode, there are two submission gateways:</span></div><div class="line">     <span class="comment">//   (1) The traditional RPC gateway using o.a.s.deploy.Client as a wrapper</span></div><div class="line">     <span class="comment">//   (2) The new REST-based gateway introduced in Spark 1.3</span></div><div class="line">     <span class="comment">// The latter is the default behavior as of Spark 1.3, but Spark submit will fail over</span></div><div class="line">     <span class="comment">// to use the legacy gateway if the master endpoint turns out to be not a REST server.</span></div><div class="line">。。。</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>接下来执行的是runMain方法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//复用反射加载childMainClass</span></div><div class="line"><span class="comment">//调用反射机制加载main方法</span></div><div class="line"><span class="comment">//执行main方法,进入 SparkPi 的main方法，执行spark应用程序</span></div></pre></td></tr></table></figure>
<p>至此，正式完成spark应用程序的提交。</p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p><a href="http://www.cnblogs.com/xing901022/p/6426408.html" target="_blank" rel="external">http://www.cnblogs.com/xing901022/p/6426408.html</a><br><a href="http://blog.csdn.net/lovehuangjiaju/article/details/49123975" target="_blank" rel="external">http://blog.csdn.net/lovehuangjiaju/article/details/49123975</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Livy-server的搭建与简单测试]]></title>
      <url>http://flume.cn/2017/02/24/Livy-server%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>半年前搭建并测试过livy，简单阅读过部分源码，现在因为openAPI项目，要深入了解livy-server了</p>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>搭建在官网中有，很简单，跳过 <a href="https://github.com/cloudera/livy#rest-api" target="_blank" rel="external">https://github.com/cloudera/livy#rest-api</a><br>启动的时候遇到的一个问题是会报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.io.IOException: Cannot write log directory /home/op/livy-server-0.3.0/logs</div><div class="line">        at org.eclipse.jetty.util.RolloverFileOutputStream.setFile(RolloverFileOutputStream.java:219)</div><div class="line">        at org.eclipse.jetty.util.RolloverFileOutputStream.&lt;init&gt;(RolloverFileOutputStream.java:166)</div></pre></td></tr></table></figure></p>
<p>很简单，由于写日志的时候该目录不存在，所以只需要手动创建 logs目录即可</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动session"><a href="#启动session" class="headerlink" title="启动session"></a>启动session</h3><p>我使用 Postman 来模拟它的rest api进行功能测试：<br>首先需要申请一个 session：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import json, pprint, requests, textwrap</div><div class="line">host = 'http://someIp:8998'</div><div class="line">data = &#123;'kind': 'spark'&#125;</div><div class="line">headers = &#123;'Content-Type': 'application/json'&#125;</div><div class="line">r = requests.post(host + '/sessions', data=json.dumps(data), headers=headers)</div><div class="line">r.json()</div></pre></td></tr></table></figure>
<p>需要注意的是，如果用postman来模拟的话，应该在Body中使用双引号的形式，单引号无法识别，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;code&quot;: &quot;1+3&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>返回如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 2,</div><div class="line">  &quot;appId&quot;: null,</div><div class="line">  &quot;owner&quot;: null,</div><div class="line">  &quot;proxyUser&quot;: null,</div><div class="line">  &quot;state&quot;: &quot;starting&quot;,</div><div class="line">  &quot;kind&quot;: &quot;spark&quot;,</div><div class="line">  &quot;appInfo&quot;: &#123;</div><div class="line">    &quot;driverLogUrl&quot;: null,</div><div class="line">    &quot;sparkUiUrl&quot;: null</div><div class="line">  &#125;,</div><div class="line">  &quot;log&quot;: []</div><div class="line">&#125;</div><div class="line"></div><div class="line">返回的header也很重要：</div><div class="line"></div><div class="line">``` </div><div class="line">Content-Encoding → gzip</div><div class="line">Content-Type → application/json</div><div class="line">Date → Fri, 24 Feb 2017 09:17:07 GMT</div><div class="line">Location → /sessions/2</div><div class="line">Server → Jetty(9.2.16.v20160414)</div><div class="line">Transfer-Encoding → chunked</div></pre></td></tr></table></figure></p>
<p>进入对应机器，输入 <code>ps -ef | grep spark</code>，发现启动了三个相关的进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">op        2002 63840  6 17:00 pts/9    00:00:37 /usr/java/jdk1.7.0_75/bin/java -cp /usr/lib/hadoop/lib/*:/usr/lib/spark/conf/:/usr/lib/spark/lib/spark-assembly-1.6.2-hadoop2.6.0-cdh5.4.7.jar:/usr/lib/spark/lib/datanucleus-rdbms-3.2.9.jar:/usr/lib/spark/lib/datanucleus-core-3.2.10.jar:/usr/lib/spark/lib/datanucleus-api-jdo-3.2.6.jar:/etc/hadoop/conf/ -Xms1g -Xmx1g -XX:MaxPermSize=256m org.apache.spark.deploy.SparkSubmit --properties-file /tmp/livyConf1238183037406660708.properties --class com.cloudera.livy.rsc.driver.RSCDriverBootstrapper spark-internal</div><div class="line">op        2472 63840 10 17:05 pts/9    00:00:30 /usr/java/jdk1.7.0_75/bin/java -cp /usr/lib/hadoop/lib/*:/usr/lib/spark/conf/:/usr/lib/spark/lib/spark-assembly-1.6.2-hadoop2.6.0-cdh5.4.7.jar:/usr/lib/spark/lib/datanucleus-rdbms-3.2.9.jar:/usr/lib/spark/lib/datanucleus-core-3.2.10.jar:/usr/lib/spark/lib/datanucleus-api-jdo-3.2.6.jar:/etc/hadoop/conf/ -Xms1g -Xmx1g -XX:MaxPermSize=256m org.apache.spark.deploy.SparkSubmit --properties-file /tmp/livyConf8288202035580572985.properties --class com.cloudera.livy.rsc.driver.RSCDriverBootstrapper spark-internal</div></pre></td></tr></table></figure></p>
<p>这表明<strong>每提交一个livy的session，livy都会启动一个对应的进程，所以一定要考虑它的HA</strong></p>
<h3 id="通过get方式查询状态"><a href="#通过get方式查询状态" class="headerlink" title="通过get方式查询状态"></a>通过get方式查询状态</h3><p>可以通过get方式查询这个session的状态<br><code>http://10.142.78.39:8998/sessions/2</code><br>返回是它的状态为空闲<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 2,</div><div class="line">  &quot;appId&quot;: null,</div><div class="line">  &quot;owner&quot;: null,</div><div class="line">  &quot;proxyUser&quot;: null,</div><div class="line">  &quot;state&quot;: &quot;idle&quot;,</div><div class="line">  &quot;kind&quot;: &quot;spark&quot;,</div><div class="line">  &quot;appInfo&quot;: &#123;</div><div class="line">    &quot;driverLogUrl&quot;: null,</div><div class="line">    &quot;sparkUiUrl&quot;: null</div><div class="line">  &#125;,</div><div class="line">  &quot;log&quot;: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="提交Scala计算"><a href="#提交Scala计算" class="headerlink" title="提交Scala计算"></a>提交Scala计算</h3><p>session创建好了，就可以提交Scala计算了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">statements_url = session_url + &apos;/statements&apos;</div><div class="line">data = &#123;&apos;code&apos;: &apos;1 + 1&apos;&#125;</div><div class="line">r = requests.post(statements_url, data=json.dumps(data), headers=headers)</div><div class="line">r.json()</div></pre></td></tr></table></figure>
<p>提交后会马上返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 0,</div><div class="line">  &quot;state&quot;: &quot;waiting&quot;,</div><div class="line">  &quot;output&quot;: null</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>waiting 说明正在计算。。。<br>header中返回了Location<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Content-Encoding →gzip</div><div class="line">Content-Type →application/json</div><div class="line">Date →Fri, 24 Feb 2017 09:45:53 GMT</div><div class="line">Location →/sessions/2/statements/0</div><div class="line">Server →Jetty(9.2.16.v20160414)</div><div class="line">Transfer-Encoding →chunked</div></pre></td></tr></table></figure></p>
<p>获得location后，就可以通过location来获取结果啦：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">statement_url = host + r.headers[&apos;location&apos;]</div><div class="line">r = requests.get(statement_url, headers=headers)</div></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 0,</div><div class="line">  &quot;state&quot;: &quot;available&quot;,</div><div class="line">  &quot;output&quot;: &#123;</div><div class="line">    &quot;status&quot;: &quot;ok&quot;,</div><div class="line">    &quot;execution_count&quot;: 0,</div><div class="line">    &quot;data&quot;: &#123;</div><div class="line">      &quot;text/plain&quot;: &quot;res0: Int = 4&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果是4</p>
<p>根据官网，跑个SparkPi吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;code&quot;: &quot;val NUM_SAMPLES = 100000;val count = sc.parallelize(1 to NUM_SAMPLES).map &#123; i =&gt;  val x = Math.random();  val y = Math.random();  if (x*x + y*y &lt; 1) 1 else 0\n&#125;.reduce(_ + _);println(\&quot;Pi is roughly \&quot; + 4.0 * count / NUM_SAMPLES)&quot;&#125;</div></pre></td></tr></table></figure>
<p>获取后结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 3,</div><div class="line">  &quot;state&quot;: &quot;available&quot;,</div><div class="line">  &quot;output&quot;: &#123;</div><div class="line">    &quot;status&quot;: &quot;ok&quot;,</div><div class="line">    &quot;execution_count&quot;: 3,</div><div class="line">    &quot;data&quot;: &#123;</div><div class="line">      &quot;text/plain&quot;: &quot;Pi is roughly 3.14464\nNUM_SAMPLES: Int = 100000\ncount: Int = 78616&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我故意改错了代码，会返回错误的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 4,</div><div class="line">  &quot;state&quot;: &quot;available&quot;,</div><div class="line">  &quot;output&quot;: &#123;</div><div class="line">    &quot;status&quot;: &quot;error&quot;,</div><div class="line">    &quot;execution_count&quot;: 4,</div><div class="line">    &quot;ename&quot;: &quot;Error&quot;,</div><div class="line">    &quot;evalue&quot;: &quot;&lt;console&gt;:1: error: integer number too large&quot;,</div><div class="line">    &quot;traceback&quot;: [</div><div class="line">      &quot;       val NUM_SAMPLES = 10000000000;val count = sc.parallelize(1 to NUM_SAMPLES).map &#123; i =&gt;  val x = Math.random();  val y = Math.random();  if (x*x + y*y &lt; 1) 1 else 0\n&quot;,</div><div class="line">      &quot;                         ^&quot;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我故意往代码中加了一句睡眠<code>Thread.sleep(10000)</code>，当我马上请求结果的时候，会返回正在运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 6,</div><div class="line">  &quot;state&quot;: &quot;running&quot;,</div><div class="line">  &quot;output&quot;: null</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="关闭session"><a href="#关闭session" class="headerlink" title="关闭session"></a>关闭session</h3><p>好了，不玩了，关闭session吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">session_url = &apos;http://localhost:8998/sessions/0&apos;</div><div class="line">requests.delete(session_url, headers=headers)</div></pre></td></tr></table></figure></p>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;msg&quot;: &quot;deleted&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果session长时间不操作的话，会自动关闭，具体这个关闭策略是什么？待以后确认。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里只对livy的restAPI做了个简单的试验，具体的API见<a href="https://github.com/cloudera/livy#rest-api" target="_blank" rel="external">livy官网</a><br>选择livy作为server端，是因为它相比于zeppelin以及jobserver功能比较专注，对yarn-cluster模式的支持使得它具有更好的HA以及可扩展性，接下来就是深入它，基于它完成spark能力的开放！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大数据团队scala代码规范]]></title>
      <url>http://flume.cn/2017/01/09/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9B%A2%E9%98%9Fscala%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="一、-scala代码规范"><a href="#一、-scala代码规范" class="headerlink" title="一、 scala代码规范"></a>一、 scala代码规范</h3><p>Scala 是一种强大到令人难以置信的多范式编程语言。目前我们团队有很多项目需要使用scala语言进行编程，尤其是Spark相关开发项目，为了能够统一scala相关开发，本人基于Spark 贡献者及 <a href="http://databricks.com/" target="_blank" rel="external">Databricks</a> 工程团队总结出了以下指南，本人增加了单元测试的规范，希望对大家的开发有帮助。当然，这个指南并非绝对，根据我们团队需求与实际经验，持续更新。</p>
<h3 id="二、-选择此规范的理由"><a href="#二、-选择此规范的理由" class="headerlink" title="二、 选择此规范的理由"></a>二、 选择此规范的理由</h3><p>很早就有大家统一编程规范的想法，网上也有一些关于编程规范的文档供参考。最终选择了以 Databricks 公司的编程规范为模板制作。理由如下：</p>
<ul>
<li>目前公司使用scala语言主要用在Spark的开发，而这份指南是Spark 贡献者及 Databricks 工程团队一起工作时总结出来的；</li>
<li>跟我们之前写得代码，以及IDEA等编译器自动格式化相差不大；</li>
<li>这份指南经过多次的修改和总结，经过了实践的检验；</li>
<li>这份指南相比较而言简明概要，易于理解，遵循 Java 的地方就没有赘述，比较解耦，适用于根据公司代码体系来修改；</li>
</ul>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="TOC">目录</a></h2><ol>
<li><a href="#history">文档历史</a></li>
<li><a href="#syntactic">语法风格</a><ul>
<li><a href="#naming">命名约定</a></li>
<li><a href="#variable-naming">变量命名约定</a></li>
<li><a href="#linelength">一行长度</a></li>
<li><a href="#rule_of_30">30 法则</a></li>
<li><a href="#indent">空格与缩进</a></li>
<li><a href="#blanklines">空行</a></li>
<li><a href="#parentheses">括号</a></li>
<li><a href="#curly">大括号</a></li>
<li><a href="#long_literal">长整型字面量</a></li>
<li><a href="#doc">文档风格</a></li>
<li><a href="#ordering_class">类内秩序</a></li>
<li><a href="#imports">Imports</a></li>
<li><a href="#pattern-matching">模式匹配</a></li>
<li><a href="#infix">中缀方法</a></li>
<li><a href="#anonymous">匿名方法</a></li>
</ul>
</li>
<li><a href="#lang">Scala 语言特性</a><ul>
<li><a href="#case_class_immutability">样例类与不可变性</a></li>
<li><a href="#apply_method">apply 方法</a></li>
<li><a href="#override_modifier">override 修饰符</a></li>
<li><a href="#destruct_bind">解构绑定</a></li>
<li><a href="#call_by_name">按名称传参</a></li>
<li><a href="#multi-param-list">多参数列表</a></li>
<li><a href="#symbolic_methods">符号方法 (运算符重载)</a></li>
<li><a href="#type_inference">类型推导</a></li>
<li><a href="#return">Return 语句</a></li>
<li><a href="#recursion">递归及尾递归</a></li>
<li><a href="#implicits">Implicits</a></li>
<li><a href="#exception">异常处理 (Try 还是 try)</a></li>
<li><a href="#option">Options</a></li>
<li><a href="#chaining">单子链接</a></li>
</ul>
</li>
<li><a href="#concurrency">并发</a><ul>
<li><a href="#concurrency-scala-collection">Scala concurrent.Map</a></li>
<li><a href="#concurrency-sync-vs-map">显式同步 vs 并发集合</a></li>
<li><a href="#concurrency-sync-vs-atomic">显式同步 vs 原子变量 vs @volatile</a></li>
<li><a href="#concurrency-private-this">私有字段</a></li>
<li><a href="#concurrency-isolation">隔离</a></li>
</ul>
</li>
<li><a href="#perf">性能</a><ul>
<li><a href="#perf-microbenchmarks">Microbenchmarks</a></li>
<li><a href="#perf-whileloops">Traversal 与 zipWithIndex</a></li>
<li><a href="#perf-option">Option 与 null</a></li>
<li><a href="#perf-collection">Scala 集合库</a></li>
<li><a href="#perf-private">private[this]</a></li>
</ul>
</li>
<li><a href="#java">与 Java 的互操作性</a><ul>
<li><a href="#java-missing-features">Scala 中缺失的 Java 特性</a></li>
<li><a href="#java-traits">Traits 与抽象类</a></li>
<li><a href="#java-type-alias">类型别名</a></li>
<li><a href="#java-default-param-values">默认参数值</a></li>
<li><a href="#java-multi-param-list">多参数列表</a></li>
<li><a href="#java-varargs">可变参数</a></li>
<li><a href="#java-implicits">Implicits</a></li>
<li><a href="#java-companion-object">伴生对象, 静态方法与字段</a></li>
</ul>
</li>
<li><a href="#misc">其它</a><ul>
<li><a href="#misc_currentTimeMillis_vs_nanoTime">优先使用 nanoTime 而非 currentTimeMillis</a></li>
<li><a href="#misc_uri_url">优先使用 URI 而非 URL</a></li>
</ul>
</li>
<li><a href="#unit-test">单元测试</a><ul>
<li><a href="#unit-test-framework">单元测试框架</a></li>
<li><a href="#unit-test-style">单元测试风格</a></li>
</ul>
</li>
</ol>
<h2 id="文档历史"><a href="#文档历史" class="headerlink" title="文档历史"></a><a name="history">文档历史</a></h2><ul>
<li>2017-01-10: 最初版本。<a href="https://github.com/databricks/scala-style-guide/blob/master/README-ZH.md" target="_blank" rel="external">Databricks版本</a></li>
<li>2017-01-11: 增加 <a href="#unit-test">单元测试</a> 一节。</li>
</ul>
<h2 id="语法风格"><a href="#语法风格" class="headerlink" title="语法风格"></a><a name="syntactic">语法风格</a></h2><h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a><a name="naming">命名约定</a></h3><p>我们主要遵循 Java 和 Scala 的标准命名约定。</p>
<ul>
<li><p>类，trait, 对象应该遵循 Java 中类的命名约定，即 PascalCase 风格。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClusterManager</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expression</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>包名应该遵循 Java 中包名的命名约定，即使用全小写的 ASCII 字母。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.databricks.resourcemanager</div></pre></td></tr></table></figure>
</li>
<li><p>方法/函数应当使用驼峰式风格命名。</p>
</li>
<li><p>常量命名使用全大写字母，并将它们放在伴生对象中。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Configuration</span> </span>&#123;</div><div class="line">  <span class="keyword">val</span> <span class="type">DEFAULT_PORT</span> = <span class="number">10000</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>枚举命名与类命名一致，使用 PascalCase 风格。</p>
</li>
<li><p>注解也应遵循 Java 中的约定，即使用 PascalCase 风格。注意，这一点与 Scala 的官方指南不同。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotation</span> <span class="keyword">extends</span> <span class="title">StaticAnnotation</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="变量命名约定"><a href="#变量命名约定" class="headerlink" title="变量命名约定"></a><a name="variable-naming">变量命名约定</a></h3><ul>
<li><p>变量命名应当遵循驼峰式命名方法，并且变量名应当是不言而喻的，即变量名可以直观地反应它的涵义。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> serverPort = <span class="number">1000</span></div><div class="line"><span class="keyword">val</span> clientPort = <span class="number">2000</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以在小段的局部代码中使用单字符的变量名，比如在小段的循环体中（例如 10 行以内的代码），“i” 常常被用作循环索引。然而，即使在小段的代码中，也不要使用 “l” （Larry 中的 l）作为标识符，因为它看起来和 “1”，“|”，“I” 很像，难以区分，容易搞错。</p>
</li>
</ul>
<h3 id="一行长度"><a href="#一行长度" class="headerlink" title="一行长度"></a><a name="linelength">一行长度</a></h3><ul>
<li>一行长度的上限是 100 个字符。</li>
<li>唯一的例外是 import 语句和 URL (即便如此，也尽量将它们保持在 100 个字符以下)。</li>
</ul>
<h3 id="30-法则"><a href="#30-法则" class="headerlink" title="30 法则"></a><a name="rule_of_30">30 法则</a></h3><p>「如果一个元素包含的子元素超过 30 个，那么极有可能出现了严重的问题」 - <a href="http://www.amazon.com/Refactoring-Large-Software-Projects-Restructurings/dp/0470858923" target="_blank" rel="external">Refactoring in Large Software Projects</a>。</p>
<p>一般来说:</p>
<ul>
<li>一个方法包含的代码行数不宜超过 30 行。</li>
<li>一个类包含的方法数量不宜超过 30 个。</li>
</ul>
<h3 id="空格与缩进"><a href="#空格与缩进" class="headerlink" title="空格与缩进"></a><a name="indent">空格与缩进</a></h3><ul>
<li><p>一般情况下，使用两个空格的缩进。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  println(<span class="string">"Wow!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对于方法声明，如果一行无法容纳下所有的参数，那么使用 4 个空格来缩进它们。返回类型可以与最后一个参数在同一行，也可以放在下一行，使用两个空格缩进。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">newAPIHadoopFile</span></span>[<span class="type">K</span>, <span class="type">V</span>, <span class="type">F</span> &lt;: <span class="type">NewInputFormat</span>[<span class="type">K</span>, <span class="type">V</span>]](</div><div class="line">    path: <span class="type">String</span>,</div><div class="line">    fClass: <span class="type">Class</span>[<span class="type">F</span>],</div><div class="line">    kClass: <span class="type">Class</span>[<span class="type">K</span>],</div><div class="line">    vClass: <span class="type">Class</span>[<span class="type">V</span>],</div><div class="line">    conf: <span class="type">Configuration</span> = hadoopConfiguration): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">V</span>)] = &#123;</div><div class="line">  <span class="comment">// method body</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">newAPIHadoopFile</span></span>[<span class="type">K</span>, <span class="type">V</span>, <span class="type">F</span> &lt;: <span class="type">NewInputFormat</span>[<span class="type">K</span>, <span class="type">V</span>]](</div><div class="line">    path: <span class="type">String</span>,</div><div class="line">    fClass: <span class="type">Class</span>[<span class="type">F</span>],</div><div class="line">    kClass: <span class="type">Class</span>[<span class="type">K</span>],</div><div class="line">    vClass: <span class="type">Class</span>[<span class="type">V</span>],</div><div class="line">    conf: <span class="type">Configuration</span> = hadoopConfiguration)</div><div class="line">  : <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">V</span>)] = &#123;</div><div class="line">  <span class="comment">// method body</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果一行无法容纳下类头（即 extends 后面那部分），则把它们放到新的一行，用两个空格缩进，然后在类内空一行再开始函数或字段的定义（或是包的导入）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"></span></span></div><div class="line">    val param1: <span class="type">String</span>,  // 4 space indent for parameters</div><div class="line">    val param2: <span class="type">String</span>,</div><div class="line">    val param3: <span class="type">Array</span>[<span class="type">Byte</span>])</div><div class="line">  <span class="keyword">extends</span> <span class="type">FooInterface</span>  <span class="comment">// 2 space here</span></div><div class="line">  <span class="keyword">with</span> <span class="type">Logging</span> &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">firstMethod</span></span>(): <span class="type">Unit</span> = &#123; ... &#125;  <span class="comment">// blank line above</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用垂直对齐。它使你的注意力放在代码的错误部分并增大了后人修改代码的难度。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Don't align vertically</span></div><div class="line"><span class="keyword">val</span> plus     = <span class="string">"+"</span></div><div class="line"><span class="keyword">val</span> minus    = <span class="string">"-"</span></div><div class="line"><span class="keyword">val</span> multiply = <span class="string">"*"</span></div><div class="line"></div><div class="line"><span class="comment">// Do the following</span></div><div class="line"><span class="keyword">val</span> plus = <span class="string">"+"</span></div><div class="line"><span class="keyword">val</span> minus = <span class="string">"-"</span></div><div class="line"><span class="keyword">val</span> multiply = <span class="string">"*"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a><a name="blanklines">空行</a></h3><ul>
<li>一个空行可以出现在：<ul>
<li>连续的类成员或初始化器（initializers）之间：字段，构造函数，方法，嵌套类，静态初始化器及实例初始化器。<ul>
<li>例外：连续的两个字段之间的空行是可选的（前提是它们之间没有其它代码），这一类空行主要为这些字段做逻辑上的分组。</li>
</ul>
</li>
<li>在方法体内，根据需要，使用空行来为语句创建逻辑上的分组。</li>
<li>在类的第一个成员之前或最后一个成员之后，空行都是可选的（既不鼓励也不阻止）。</li>
</ul>
</li>
<li>使用一个或两个空行来分隔不同类的定义。</li>
<li>不鼓励使用过多的空行。</li>
</ul>
<h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a><a name="parentheses">括号</a></h3><ul>
<li><p>方法声明应该加括号（即使没有参数列表），除非它们是没有副作用（状态改变，IO 操作都认为是有副作用的）的访问器（accessor）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> </span>&#123;</div><div class="line">  <span class="comment">// Wrong: killJob changes state. Should have ().</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">killJob</span></span>: <span class="type">Unit</span></div><div class="line"></div><div class="line">  <span class="comment">// Correct:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">killJob</span></span>(): <span class="type">Unit</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数调用应该与函数声明在形式上保持一致，也就是说，如果一个方法声明时带了括号，那调用时也要把括号带上。注意这不仅仅是语法层面的人为约定，当返回对象中定义了 <code>apply</code> 方法时，这一点还会影响正确性。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(args: <span class="type">String</span>*): <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">foo</span></span>: <span class="type">Foo</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">Bar</span>().foo  <span class="comment">// This returns a Foo</span></div><div class="line"><span class="keyword">new</span> <span class="type">Bar</span>().foo()  <span class="comment">// This returns an Int!</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a><a name="curly">大括号</a></h3><p>即使条件语句或循环语句只有一行时，也请使用大括号。唯一的例外是，当你把 if/else 作为一个单行的三元操作符来使用并且没有副作用时，这时你可以不加大括号。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Correct:</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  println(<span class="string">"Wow!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Correct:</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) statement1 <span class="keyword">else</span> statement2</div><div class="line"></div><div class="line"><span class="comment">// Correct:</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  foo()</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Wrong:</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</div><div class="line">  println(<span class="string">"Wow!"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Wrong:</span></div><div class="line"><span class="keyword">try</span> foo() <span class="keyword">catch</span> &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="长整型字面量"><a href="#长整型字面量" class="headerlink" title="长整型字面量"></a><a name="long_literal">长整型字面量</a></h3><p>长整型字面量使用大写的 <code>L</code> 作为后缀，不要使用小写，因为它和数字 <code>1</code> 长得很像，常常难以区分。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> longValue = <span class="number">5432</span>L  <span class="comment">// Do this</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> longValue = <span class="number">5432</span>l  <span class="comment">// Do NOT do this</span></div></pre></td></tr></table></figure>
<h3 id="文档风格"><a href="#文档风格" class="headerlink" title="文档风格"></a><a name="doc">文档风格</a></h3><p>使用 Java Doc 风格，而非 Scala Doc 风格。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** This is a correct one-liner, short description. */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * This is correct multi-line JavaDoc comment. And</div><div class="line"> * this is my second line, and if I keep typing, this would be</div><div class="line"> * my third line.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/** In Spark, we don't use the ScalaDoc style so this</span></div><div class="line">  * is not correct.</div><div class="line">  */</div></pre></td></tr></table></figure>
<h3 id="类内秩序"><a href="#类内秩序" class="headerlink" title="类内秩序"></a><a name="ordering_class">类内秩序</a></h3><p>如果一个类很长，包含许多的方法，那么在逻辑上把它们分成不同的部分并加上注释头，以此组织它们。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataFrame</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">///////////////////////////////////////////////////////////////////////////</span></div><div class="line">  <span class="comment">// DataFrame operations</span></div><div class="line">  <span class="comment">///////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment">///////////////////////////////////////////////////////////////////////////</span></div><div class="line">  <span class="comment">// RDD operations</span></div><div class="line">  <span class="comment">///////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，强烈不建议把一个类写得这么长，一般只有在构建某些公共 API 时才允许这么做。</p>
<h3 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a><a name="imports">Imports</a></h3><ul>
<li><strong>导入时避免使用通配符</strong>, 除非你需要导入超过 6 个实体或者隐式方法。通配符导入会使代码在面对外部变化时不够健壮。</li>
<li>始终使用绝对路径来导入包 (如：<code>scala.util.Random</code>) ，而不是相对路径 (如：<code>util.Random</code>)。</li>
<li>此外，导入语句按照以下顺序排序：<ul>
<li><code>java.*</code> 和 <code>javax.*</code></li>
<li><code>scala.*</code></li>
<li>第三方库 (<code>org.*</code>, <code>com.*</code>, 等)</li>
<li>项目中的类 (对于 Spark 项目，即 <code>com.databricks.*</code> 或 <code>org.apache.spark</code>)</li>
</ul>
</li>
<li>在每一组导入语句内，按照字母序进行排序。</li>
<li><p>你可以使用 IntelliJ 的「import organizer」来自动处理，请使用以下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">java</div><div class="line">javax</div><div class="line">_______ blank line _______</div><div class="line">scala</div><div class="line">_______ blank line _______</div><div class="line">all other imports</div><div class="line">_______ blank line _______</div><div class="line">com.databricks  // or org.apache.spark if you are working on spark</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a><a name="pattern-matching">模式匹配</a></h3><ul>
<li><p>如果整个方法就是一个模式匹配表达式，可能的话，可以把 match 关键词与方法声明放在同一行，以此减少一级缩进。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(msg: <span class="type">Message</span>): <span class="type">Unit</span> = msg <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当以闭包形式调用一个函数时，如果只有一个 case 语句，那么把 case 语句与函数调用放在同一行。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list.zipWithIndex.map &#123; <span class="keyword">case</span> (elem, i) =&gt;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果有多个 case 语句，把它们缩进并且包起来。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">list.map &#123;</div><div class="line">  <span class="keyword">case</span> a: <span class="type">Foo</span> =&gt;  ...</div><div class="line">  <span class="keyword">case</span> b: <span class="type">Bar</span> =&gt;  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果唯一的目的就是想匹配某个对象的类型，那么不要展开所有的参数来做模式匹配，这样会使得重构变得更加困难，代码更容易出错。</p>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokemon</span>(<span class="params">name: <span class="type">String</span>, weight: <span class="type">Int</span>, hp: <span class="type">Int</span>, attack: <span class="type">Int</span>, defense: <span class="type">Int</span></span>)</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span>(<span class="params">name: <span class="type">String</span>, hp: <span class="type">Int</span></span>)</span></div><div class="line"></div><div class="line"><span class="comment">// 不要像下面那样做，因为</span></div><div class="line"><span class="comment">// 1. 当 pokemon 加入一个新的字段，我们需要改变下面的模式匹配代码</span></div><div class="line"><span class="comment">// 2. 非常容易发生误匹配，尤其是当所有字段的类型都一样的时候</span></div><div class="line">targets.foreach &#123;</div><div class="line">  <span class="keyword">case</span> target @ <span class="type">Pokemon</span>(_, _, hp, _, defense) =&gt;</div><div class="line">    <span class="keyword">val</span> loss = sys.min(<span class="number">0</span>, myAttack - defense)</div><div class="line">    target.copy(hp = hp - loss)</div><div class="line">  <span class="keyword">case</span> target @ <span class="type">Human</span>(_, hp) =&gt;</div><div class="line">    target.copy(hp = hp - myAttack)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 像下面这样做就好多了:</span></div><div class="line">targets.foreach &#123;</div><div class="line">  <span class="keyword">case</span> target: <span class="type">Pokemon</span> =&gt;</div><div class="line">    <span class="keyword">val</span> loss = sys.min(<span class="number">0</span>, myAttack - target.defense)</div><div class="line">    target.copy(hp = target.hp - loss)</div><div class="line">  <span class="keyword">case</span> target: <span class="type">Human</span> =&gt;</div><div class="line">    target.copy(hp = target.hp - myAttack)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="中缀方法"><a href="#中缀方法" class="headerlink" title="中缀方法"></a><a name="infix">中缀方法</a></h3><p><strong>避免中缀表示法</strong>，除非是符号方法（即运算符重载）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Correct</span></div><div class="line">list.map(func)</div><div class="line">string.contains(<span class="string">"foo"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Wrong</span></div><div class="line">list map (func)</div><div class="line">string contains <span class="string">"foo"</span></div><div class="line"></div><div class="line"><span class="comment">// 重载的运算符应该以中缀形式调用</span></div><div class="line">arrayBuffer += elem</div></pre></td></tr></table></figure>
<h3 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a><a name="anonymous">匿名方法</a></h3><p>对于匿名方法，<strong>避免使用过多的小括号和花括号</strong>。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Correct</span></div><div class="line">list.map &#123; item =&gt;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Correct</span></div><div class="line">list.map(item =&gt; ...)</div><div class="line"></div><div class="line"><span class="comment">// Wrong</span></div><div class="line">list.map(item =&gt; &#123;</div><div class="line">  ...</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Wrong</span></div><div class="line">list.map &#123; item =&gt; &#123;</div><div class="line">  ...</div><div class="line">&#125;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Wrong</span></div><div class="line">list.map(&#123; item =&gt; ... &#125;)</div></pre></td></tr></table></figure>
<h2 id="Scala-语言特性"><a href="#Scala-语言特性" class="headerlink" title="Scala 语言特性"></a><a name="lang">Scala 语言特性</a></h2><h3 id="样例类与不可变性"><a href="#样例类与不可变性" class="headerlink" title="样例类与不可变性"></a><a name="case_class_immutability">样例类与不可变性</a></h3><p>样例类（case class）本质也是普通的类，编译器会自动地为它加上以下支持：</p>
<ul>
<li>构造器参数的公有 getter 方法</li>
<li>拷贝构造函数</li>
<li>构造器参数的模式匹配</li>
<li>默认的 toString/hash/equals 实现</li>
</ul>
<p>对于样例类来说，构造器参数不应设为可变的，可以使用拷贝构造函数达到同样的效果。使用可变的样例类容易出错，例如，哈希表中，对象根据旧的哈希值被放在错误的位置上。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This is OK</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></div><div class="line"></div><div class="line"><span class="comment">// This is NOT OK</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, var age: <span class="type">Int</span></span>)</span></div><div class="line"></div><div class="line"><span class="comment">// 通过拷贝构造函数创建一个新的实例来改变其中的值</span></div><div class="line"><span class="keyword">val</span> p1 = <span class="type">Person</span>(<span class="string">"Peter"</span>, <span class="number">15</span>)</div><div class="line"><span class="keyword">val</span> p2 = p2.copy(age = <span class="number">16</span>)</div></pre></td></tr></table></figure>
<h3 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply 方法"></a><a name="apply_method">apply 方法</a></h3><p>避免在类里定义 apply 方法。这些方法往往会使代码的可读性变差，尤其是对于不熟悉 Scala 的人。它也难以被 IDE（或 grep）所跟踪。在最坏的情况下，它还可能影响代码的正确性，正如你在<a href="#parentheses">括号</a>一节中看到的。</p>
<p>然而，将 apply 方法作为工厂方法定义在伴生对象中是可以接受的。在这种情况下，apply 方法应该返回其伴生类的类型。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">  <span class="comment">// 下面这种定义是 OK 的</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name: <span class="type">String</span>): <span class="type">TreeNode</span> = ...</div><div class="line"></div><div class="line">  <span class="comment">// 不要像下面那样定义，因为它没有返回其伴生类的类型：TreeNode</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name: <span class="type">String</span>): <span class="type">String</span> = ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="override-修饰符"><a href="#override-修饰符" class="headerlink" title="override 修饰符"></a><a name="override_modifier">override 修饰符</a></h3><p>无论是覆盖具体的方法还是实现抽象的方法，始终都为方法加上 override 修饰符。实现抽象方法时，不加 override 修饰符，Scala 编译器也不会报错。即便如此，我们也应该始终把 override 修饰符加上，以此显式地表示覆盖行为。以此避免由于方法签名不同（而你也难以发现）而导致没有覆盖到本应覆盖的方法。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(data: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    print(data)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="keyword">import</span> scala.collection.<span class="type">Map</span></div><div class="line"></div><div class="line">  <span class="comment">// 下面的方法没有覆盖 Parent.hello,</span></div><div class="line">  <span class="comment">// 因为两个 Map 的类型是不同的。</span></div><div class="line">  <span class="comment">// 如果我们加上 override 修饰符，编译器就会帮你找出问题并报错。</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(data: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    print(<span class="string">"This is supposed to override the parent method, but it is actually not!"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解构绑定"><a href="#解构绑定" class="headerlink" title="解构绑定"></a><a name="destruct_bind">解构绑定</a></h3><p>解构绑定（有时也叫元组提取）是一种在一个表达式中为两个变量赋值的便捷方式。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> (a, b) = (<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>然而，请不要在构造函数中使用它们，尤其是当 <code>a</code> 和 <code>b</code> 需要被标记为 <code>transient</code> 的时候。Scala 编译器会产生一个额外的 Tuple2 字段，而它并不是暂态的（transient）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">  <span class="comment">// 以下代码无法 work，因为编译器会产生一个非暂态的 Tuple2 指向 a 和 b</span></div><div class="line">  <span class="meta">@transient</span> <span class="keyword">private</span> <span class="keyword">val</span> (a, b) = someFuncThatReturnsTuple2()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="按名称传参"><a href="#按名称传参" class="headerlink" title="按名称传参"></a><a name="call_by_name">按名称传参</a></h3><p><strong>避免使用按名传参</strong>. 显式地使用 <code>() =&gt; T</code> 。</p>
<p>背景：Scala 允许按名称来定义方法参数，例如：以下例子是可以成功执行的：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print</span></span>(value: =&gt; <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</div><div class="line">  println(value)</div><div class="line">  println(value + <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span></span>(): <span class="type">Int</span> = &#123;</div><div class="line">  a += <span class="number">1</span></div><div class="line">  a</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(inc())</div></pre></td></tr></table></figure>
<p>在上面的代码中，<code>inc()</code> 以闭包的形式传递给 <code>print</code> 函数，并且在 <code>print</code> 函数中被执行了两次，而不是以数值 <code>1</code> 传入。按名传参的一个主要问题是在方法调用处，我们无法区分是按名传参还是按值传参。因此无法确切地知道这个表达式是否会被执行（更糟糕的是它可能会被执行多次）。对于带有副作用的表达式来说，这一点是非常危险的。</p>
<h3 id="多参数列表"><a href="#多参数列表" class="headerlink" title="多参数列表"></a><a name="multi-param-list">多参数列表</a></h3><p><strong>避免使用多参数列表</strong>。它们使运算符重载变得复杂，并且会使不熟悉 Scala 的程序员感到困惑。例如：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Avoid this!</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)(<span class="params">secret: <span class="type">String</span></span>)</span></div></pre></td></tr></table></figure>
<p>一个值得注意的例外是，当在定义底层库时，可以使用第二个参数列表来存放隐式（implicit）参数。尽管如此，<a href="#implicits">我们应该避免使用 implicits</a>！</p>
<h3 id="符号方法（运算符重载）"><a href="#符号方法（运算符重载）" class="headerlink" title="符号方法（运算符重载）"></a><a name="symbolic_methods">符号方法（运算符重载）</a></h3><p><strong>不要使用符号作为方法名</strong>，除非你是在定义算术运算的方法（如：<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>），否则在任何其它情况下，都不要使用。符号化的方法名让人难以理解方法的意图是什么，来看下面两个例子：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 符号化的方法名难以理解</span></div><div class="line">channel ! msg</div><div class="line">stream1 &gt;&gt;= stream2</div><div class="line"></div><div class="line"><span class="comment">// 下面的方法意图则不言而喻</span></div><div class="line">channel.send(msg)</div><div class="line">stream1.join(stream2)</div></pre></td></tr></table></figure>
<h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a><a name="type_inference">类型推导</a></h3><p>Scala 的类型推导，尤其是左侧类型推导以及闭包推导，可以使代码变得更加简洁。尽管如此，也有一些情况我们是需要显式地声明类型的：</p>
<ul>
<li><strong>公有方法应该显式地声明类型</strong>，编译器推导出来的类型往往会使你大吃一惊。</li>
<li><strong>隐式方法应该显式地声明类型</strong>，否则在增量编译时，它会使 Scala 编译器崩溃。</li>
<li><strong>如果变量或闭包的类型并非显而易见，请显式声明类型</strong>。一个不错的判断准则是，如果评审代码的人无法在 3 秒内确定相应实体的类型，那么你就应该显式地声明类型。</li>
</ul>
<h3 id="Return-语句"><a href="#Return-语句" class="headerlink" title="Return 语句"></a><a name="return">Return 语句</a></h3><p><strong>闭包中避免使用 return</strong>。<code>return</code> 会被编译器转成 <code>scala.runtime.NonLocalReturnControl</code> 异常的 <code>try/catch</code> 语句，这可能会导致意外行为。请看下面的例子：</p>
  <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>(rpc: <span class="type">WebSocketRPC</span>): <span class="type">Option</span>[<span class="type">Response</span>] = &#123;</div><div class="line">  tableFut.onComplete &#123; table =&gt;</div><div class="line">    <span class="keyword">if</span> (table.isFailure) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">None</span> <span class="comment">// Do not do that!</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123; ... &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>.onComplete</code> 方法接收一个匿名闭包并把它传递到一个不同的线程中。这个闭包最终会抛出一个 <code>NonLocalReturnControl</code> 异常，并在 <strong>一个不同的线程中</strong>被捕获，而这里执行的方法却没有任何影响。</p>
<p>然而，也有少数情况我们是推荐使用 <code>return</code> 的。</p>
<ul>
<li><p>使用 <code>return</code> 来简化控制流，避免增加一级缩进。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSomething</span></span>(obj: <span class="type">Any</span>): <span class="type">Any</span> = &#123;</div><div class="line">  <span class="keyword">if</span> (obj eq <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// do something ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>return</code> 来提前终止循环，这样就不用额外构造状态标志。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (cond) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="递归及尾递归"><a href="#递归及尾递归" class="headerlink" title="递归及尾递归"></a><a name="recursion">递归及尾递归</a></h3><p><strong>避免使用递归</strong>，除非问题可以非常自然地用递归来描述（比如，图和树的遍历）。</p>
<p>对于那些你意欲使之成为尾递归的方法，请加上 <code>@tailrec</code> 注解以确保编译器去检查它是否真的是尾递归（你会非常惊讶地看到，由于使用了闭包和函数变换，许多看似尾递归的代码事实并非尾递归）。</p>
<p>大多数的代码使用简单的循环和状态机会更容易推理，使用尾递归反而可能会使它更加繁琐且难以理解。例如，下面的例子中，命令式的代码比尾递归版本的代码要更加易读：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Tail recursive version.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(data: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="meta">@tailrec</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">max0</span></span>(data: <span class="type">Array</span>[<span class="type">Int</span>], pos: <span class="type">Int</span>, max: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">    <span class="keyword">if</span> (pos == data.length) &#123;</div><div class="line">      max</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      max0(data, pos + <span class="number">1</span>, <span class="keyword">if</span> (data(pos) &gt; max) data(pos) <span class="keyword">else</span> max)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  max0(data, <span class="number">0</span>, <span class="type">Int</span>.<span class="type">MinValue</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Explicit loop version</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(data: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="keyword">var</span> max = <span class="type">Int</span>.<span class="type">MinValue</span></div><div class="line">  <span class="keyword">for</span> (v &lt;- data) &#123;</div><div class="line">    <span class="keyword">if</span> (v &gt; max) &#123;</div><div class="line">      max = v</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  max</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Implicits"><a href="#Implicits" class="headerlink" title="Implicits"></a><a name="implicits">Implicits</a></h3><p><strong>避免使用 implicit</strong>，除非：</p>
<ul>
<li>你在构建领域特定的语言（DSL）</li>
<li>你在隐式类型参数中使用它（如：<code>ClassTag</code>，<code>TypeTag</code>）</li>
<li>你在你自己的类中使用它（意指不要污染外部空间），以此减少类型转换的冗余度（如：Scala 闭包到 Java 闭包的转换）。</li>
</ul>
<p>当使用 implicit 时，我们应该确保另一个工程师可以直接理解使用语义，而无需去阅读隐式定义本身。Implicit 有着非常复杂的解析规则，这会使代码变得极其难以理解。Twitter 的 Effective Scala 指南中写道：「如果你发现你在使用 implicit，始终停下来问一下你自己，是否可以在不使用 implicit 的条件下达到相同的效果」。</p>
<p>如果你必需使用它们（比如：丰富 DSL），那么不要重载隐式方法，即确保每个隐式方法有着不同的名字，这样使用者就可以选择性地导入它们。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 别这么做，这样使用者无法选择性地只导入其中一个方法。</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ImplicitHolder</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toRdd</span></span>(seq: <span class="type">Seq</span>[<span class="type">Int</span>]): <span class="type">RDD</span>[<span class="type">Int</span>] = ...</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toRdd</span></span>(seq: <span class="type">Seq</span>[<span class="type">Long</span>]): <span class="type">RDD</span>[<span class="type">Long</span>] = ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 应该将它们定义为不同的名字：</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ImplicitHolder</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intSeqToRdd</span></span>(seq: <span class="type">Seq</span>[<span class="type">Int</span>]): <span class="type">RDD</span>[<span class="type">Int</span>] = ...</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">longSeqToRdd</span></span>(seq: <span class="type">Seq</span>[<span class="type">Long</span>]): <span class="type">RDD</span>[<span class="type">Long</span>] = ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="异常处理-Try-还是-try"><a href="#异常处理-Try-还是-try" class="headerlink" title="异常处理 (Try 还是 try)"></a><a name="exception">异常处理 (Try 还是 try)</a></h2><ul>
<li><p>不要捕获 Throwable 或 Exception 类型的异常。请使用 <code>scala.util.control.NonFatal</code>：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  ...</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">NonFatal</span>(e) =&gt;</div><div class="line">    <span class="comment">// 异常处理；注意 NonFatal 无法匹配 InterruptedException 类型的异常</span></div><div class="line">  <span class="keyword">case</span> e: <span class="type">InterruptedException</span> =&gt;</div><div class="line">    <span class="comment">// 处理 InterruptedException</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这能保证我们不会去捕获 <code>NonLocalReturnControl</code> 异常（正如在<a href="#return">Return 语句</a>中所解释的）。</p>
</li>
<li><p>不要在 API 中使用 <code>Try</code>，即，不要在任何方法中返回 Try。对于异常执行，请显式地抛出异常，并使用 Java 风格的 try/catch 做异常处理。</p>
<p>背景资料：Scala 提供了单子（monadic）错误处理（通过 <code>Try</code>，<code>Success</code> 和 <code>Failure</code>），这样便于做链式处理。然而，根据我们的经验，发现使用它通常会带来更多的嵌套层级，使得代码难以阅读。此外，对于预期错误还是异常，在语义上常常是不明晰的。因此，我们不鼓励使用 <code>Try</code> 来做错误处理，尤其是以下情况：</p>
<p>一个人为的例子：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">  <span class="comment">/** Look up a user's profile in the user database. */</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(userId: <span class="type">Int</span>): <span class="type">Try</span>[<span class="type">User</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下的写法会更好：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Look up a user's profile in the user database.</div><div class="line">   * @return None if the user is not found.</div><div class="line">   * @throws DatabaseConnectionException when we have trouble connecting to the database/</div><div class="line">   */</div><div class="line">  <span class="meta">@throws</span>(<span class="type">DatabaseConnectionException</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(userId: <span class="type">Int</span>): <span class="type">Option</span>[<span class="type">User</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种写法非常明显地能让调用者知道需要处理哪些错误情况。</p>
</li>
</ul>
<h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a><a name="option">Options</a></h3><ul>
<li>如果一个值可能为空，那么请使用 <code>Option</code>。相对于 <code>null</code>，<code>Option</code> 显式地表明了一个 API 的返回值可能为空。</li>
<li><p>构造 <code>Option</code> 值时，请使用 <code>Option</code> 而非 <code>Some</code>，以防那个值为 <code>null</code>。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMethod1</span></span>(input: <span class="type">String</span>): <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">Option</span>(transform(input))</div><div class="line"></div><div class="line"><span class="comment">// This is not as robust because transform can return null, and then</span></div><div class="line"><span class="comment">// myMethod2 will return Some(null).</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMethod2</span></span>(input: <span class="type">String</span>): <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">Some</span>(transform(input))</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用 None 来表示异常，有异常时请显式抛出。</p>
</li>
<li>不要在一个 <code>Option</code> 值上直接调用 <code>get</code> 方法，除非你百分百确定那个 <code>Option</code> 值不是 <code>None</code>。</li>
</ul>
<h3 id="单子链接"><a href="#单子链接" class="headerlink" title="单子链接"></a><a name="chaining">单子链接</a></h3><p>单子链接是 Scala 的一个强大特性。Scala 中几乎一切都是单子（如：集合，Option，Future，Try 等），对它们的操作可以链接在一起。这是一个非常强大的概念，但你应该谨慎使用，尤其是：</p>
<ul>
<li>避免链接（或嵌套）超过 3 个操作。</li>
<li>如果需要花超过 5 秒钟来理解其中的逻辑，那么你应该尽量去想想有没什么办法在不使用单子链接的条件下来达到相同的效果。一般来说，你需要注意的是：不要滥用 <code>flatMap</code> 和 <code>fold</code>。</li>
<li>链接应该在 flatMap 之后断开（因为类型发生了变化）。</li>
</ul>
<p>通过给中间结果显式地赋予一个变量名，将链接断开变成一种更加过程化的风格，能让单子链接更加易于理解。来看下面的例子：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val data: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]</span>)</span></div><div class="line"><span class="keyword">val</span> database = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Person</span>]</div><div class="line"><span class="comment">// Sometimes the client can store "null" value in the  store "address"</span></div><div class="line"></div><div class="line"><span class="comment">// A monadic chaining approach</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAddress</span></span>(name: <span class="type">String</span>): <span class="type">Option</span>[<span class="type">String</span>] = &#123;</div><div class="line">  database.get(name).flatMap &#123; elem =&gt;</div><div class="line">    elem.data.get(<span class="string">"address"</span>)</div><div class="line">      .flatMap(<span class="type">Option</span>.apply)  <span class="comment">// handle null value</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 尽管代码会长一些，但以下方法可读性更高</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAddress</span></span>(name: <span class="type">String</span>): <span class="type">Option</span>[<span class="type">String</span>] = &#123;</div><div class="line">  <span class="keyword">if</span> (!database.contains(name)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">None</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  database(name).data.get(<span class="string">"address"</span>) <span class="keyword">match</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Some</span>(<span class="literal">null</span>) =&gt; <span class="type">None</span>  <span class="comment">// handle null value</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Some</span>(addr) =&gt; <span class="type">Option</span>(addr)</div><div class="line">    <span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="type">None</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a><a name="concurrency">并发</a></h2><h3 id="Scala-concurrent-Map"><a href="#Scala-concurrent-Map" class="headerlink" title="Scala concurrent.Map"></a><a name="concurrency-scala-collection">Scala concurrent.Map</a></h3><p><strong>优先考虑使用 <code>java.util.concurrent.ConcurrentHashMap</code> 而非 <code>scala.collection.concurrent.Map</code></strong>。尤其是 <code>scala.collection.concurrent.Map</code> 中的 <code>getOrElseUpdate</code> 方法要慎用，它并非原子操作（这个问题在 Scala 2.11.16 中 fix 了：<a href="https://issues.scala-lang.org/browse/SI-7943" target="_blank" rel="external">SI-7943</a>）。由于我们做的所有项目都需要在 Scala 2.10 和 Scala 2.11 上使用，因此要避免使用 <code>scala.collection.concurrent.Map</code>。</p>
<h3 id="显式同步-vs-并发集合"><a href="#显式同步-vs-并发集合" class="headerlink" title="显式同步 vs 并发集合"></a><a name="concurrency-sync-vs-map">显式同步 vs 并发集合</a></h3><p>有 3 种推荐的方法来安全地并发访问共享状态。<strong>不要混用它们</strong>，因为这会使程序变得难以推理，并且可能导致死锁。</p>
<ul>
<li><p><code>java.util.concurrent.ConcurrentHashMap</code>：当所有的状态都存储在一个 map 中，并且有高程度的竞争时使用。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> map = <span class="keyword">new</span> java.util.concurrent.<span class="type">ConcurrentHashMap</span>[<span class="type">String</span>, <span class="type">String</span>]</div></pre></td></tr></table></figure>
</li>
<li><p><code>java.util.Collections.synchronizedMap</code>：使用情景：当所有状态都存储在一个 map 中，并且预期不存在竞争情况，但你仍想确保代码在并发下是安全的。如果没有竞争出现，JVM 的 JIT 编译器能够通过偏置锁（biased locking）移除同步开销。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> map = java.util.<span class="type">Collections</span>.synchronizedMap(<span class="keyword">new</span> java.util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>通过同步所有临界区进行显式同步，可用于监视多个变量。与 2 相似，JVM 的 JIT 编译器能够通过偏置锁（biased locking）移除同步开销。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> map = <span class="keyword">new</span> java.util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>]</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(key: <span class="type">String</span>, value: <span class="type">String</span>): <span class="type">Unit</span> = synchronized &#123;</div><div class="line">    map.put(key, value)</div><div class="line">    count += <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getCount</span></span>: <span class="type">Int</span> = synchronized &#123; count &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意，对于 case 1 和 case 2，不要让集合的视图或迭代器从保护区域逃逸。这可能会以一种不明显的方式发生，比如：返回了 <code>Map.keySet</code> 或 <code>Map.values</code>。如果需要传递集合的视图或值，生成一份数据拷贝再传递。</p>
  <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> map = java.util.<span class="type">Collections</span>.synchronizedMap(<span class="keyword">new</span> java.util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>])</div><div class="line"></div><div class="line"><span class="comment">// This is broken!</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">values</span></span>: <span class="type">Iterable</span>[<span class="type">String</span>] = map.values</div><div class="line"></div><div class="line"><span class="comment">// Instead, copy the elements</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">values</span></span>: <span class="type">Iterable</span>[<span class="type">String</span>] = map.synchronized &#123; <span class="type">Seq</span>(map.values: _*) &#125;</div></pre></td></tr></table></figure>
<h3 id="显式同步-vs-原子变量-vs-volatile"><a href="#显式同步-vs-原子变量-vs-volatile" class="headerlink" title="显式同步 vs 原子变量 vs @volatile"></a><a name="concurrency-sync-vs-atomic">显式同步 vs 原子变量 vs @volatile</a></h3><p><code>java.util.concurrent.atomic</code> 包提供了对基本类型的无锁访问，比如：<code>AtomicBoolean</code>, <code>AtomicInteger</code> 和 <code>AtomicReference</code>。</p>
<p>始终优先考虑使用原子变量而非 <code>@volatile</code>，它们是相关功能的严格超集并且从代码上看更加明显。原子变量的底层实现使用了 <code>@volatile</code>。</p>
<p>优先考虑使用原子变量而非显式同步的情况：（1）一个对象的所有临界区更新都被限制在单个变量里并且预期会有竞争情况出现。原子变量是无锁的并且允许更为有效的竞争。（2）同步被明确地表示为 <code>getAndSet</code> 操作。例如：</p>
  <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good: 明确又有效地表达了下面的并发代码只执行一次</span></div><div class="line"><span class="keyword">val</span> initialized = <span class="keyword">new</span> <span class="type">AtomicBoolean</span>(<span class="literal">false</span>)</div><div class="line">...</div><div class="line"><span class="keyword">if</span> (!initialized.getAndSet(<span class="literal">true</span>)) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// poor: 下面的同步就没那么明晰，而且会出现不必要的同步</span></div><div class="line"><span class="keyword">val</span> initialized = <span class="literal">false</span></div><div class="line">...</div><div class="line"><span class="keyword">var</span> wasInitialized = <span class="literal">false</span></div><div class="line">synchronized &#123;</div><div class="line">  wasInitialized = initialized</div><div class="line">  initialized = <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wasInitialized) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="私有字段"><a href="#私有字段" class="headerlink" title="私有字段"></a><a name="concurrency-private-this">私有字段</a></h3><p>注意，<code>private</code> 字段仍然可以被相同类的其它实例所访问，所以仅仅通过 <code>this.synchronized</code>（或 <code>synchronized</code>）来保护它从技术上来说是不够的，不过你可以通过 <code>private[this]</code> 修饰私有字段来达到目的。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以下代码仍然是不安全的。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> count: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inc</span></span>(): <span class="type">Unit</span> = synchronized &#123; count += <span class="number">1</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以下代码是安全的。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> count: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inc</span></span>(): <span class="type">Unit</span> = synchronized &#123; count += <span class="number">1</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a><a name="concurrency-isolation">隔离</a></h3><p>一般来说，并发和同步逻辑应该尽可能地被隔离和包含起来。这实际上意味着：</p>
<ul>
<li>避免在 API 层面、面向用户的方法以及回调中暴露同步原语。</li>
<li>对于复杂模块，创建一个小的内部模块来包含并发原语。</li>
</ul>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a><a name="perf">性能</a></h2><p>对于你写的绝大多数代码，性能都不应该成为一个问题。然而，对于一些性能敏感的代码，以下有一些小建议：</p>
<h3 id="Microbenchmarks"><a href="#Microbenchmarks" class="headerlink" title="Microbenchmarks"></a><a name="perf-microbenchmarks">Microbenchmarks</a></h3><p>由于 Scala 编译器和 JVM JIT 编译器会对你的代码做许多神奇的事情，因此要写出一个好的微基准程序（microbenchmark）是极其困难的。更多的情况往往是你的微基准程序并没有测量你想要测量的东西。</p>
<p>如果你要写一个微基准程序，请使用 <a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="external">jmh</a>。请确保你阅读了<a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" target="_blank" rel="external">所有的样例</a>，这样你才理解微基准程序中「死代码」移除、常量折叠以及循环展开的效果。</p>
<h3 id="Traversal-与-zipWithIndex"><a href="#Traversal-与-zipWithIndex" class="headerlink" title="Traversal 与 zipWithIndex"></a><a name="perf-whileloops">Traversal 与 zipWithIndex</a></h3><p>使用 <code>while</code> 循环而非 <code>for</code> 循环或函数变换（如：<code>map</code>、<code>foreach</code>），for 循环和函数变换非常慢（由于虚函数调用和装箱的缘故）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">val</span> arr = <span class="comment">// array of ints</span></div><div class="line"><span class="comment">// 偶数位置的数置零</span></div><div class="line"><span class="keyword">val</span> newArr = list.zipWithIndex.map &#123; <span class="keyword">case</span> (elem, i) =&gt;</div><div class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="number">0</span> <span class="keyword">else</span> elem</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这是上面代码的高性能版本</span></div><div class="line"><span class="keyword">val</span> newArr = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](arr.length)</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line"><span class="keyword">val</span> len = newArr.length</div><div class="line"><span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">  newArr(i) = <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="number">0</span> <span class="keyword">else</span> arr(i)</div><div class="line">  i += <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Option-与-null"><a href="#Option-与-null" class="headerlink" title="Option 与 null"></a><a name="perf-option">Option 与 null</a></h3><p>对于性能有要求的代码，优先考虑使用 <code>null</code> 而不是 <code>Option</code>，以此避免虚函数调用以及装箱操作。用 Nullable 注解明确标示出可能为 <code>null</code> 的值。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="meta">@javax</span>.annotation.<span class="type">Nullable</span></div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> nullableField: <span class="type">Bar</span> = _</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Scala-集合库"><a href="#Scala-集合库" class="headerlink" title="Scala 集合库"></a><a name="perf-collection">Scala 集合库</a></h3><p>对于性能有要求的代码，优先考虑使用 Java 集合库而非 Scala 集合库，因为一般来说，Scala 集合库要比 Java 的集合库慢。</p>
<h3 id="private-this"><a href="#private-this" class="headerlink" title="private[this]"></a><a name="perf-private">private[this]</a></h3><p>对于性能有要求的代码，优先考虑使用 <code>private[this]</code> 而非 <code>private</code>。<code>private[this]</code> 生成一个字段而非生成一个访问方法。根据我们的经验，JVM JIT 编译器并不总是会内联 <code>private</code> 字段的访问方法，因此通过使用<br><code>private[this]</code> 来确保没有虚函数调用会更保险。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> field1 = ...</div><div class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> field2 = ...</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">perfSensitiveMethod</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> (i &lt; <span class="number">1000000</span>) &#123;</div><div class="line">      field1  <span class="comment">// This might invoke a virtual method call</span></div><div class="line">      field2  <span class="comment">// This is just a field access</span></div><div class="line">      i += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="与-Java-的互操作性"><a href="#与-Java-的互操作性" class="headerlink" title="与 Java 的互操作性"></a><a name="java">与 Java 的互操作性</a></h2><p>本节内容介绍的是构建 Java 兼容 API 的准则。如果你构建的组件并不需要与 Java 有交互，那么请无视这一节。这一节的内容主要是从我们开发 Spark 的 Java API 的经历中得出的。</p>
<h3 id="Scala-中缺失的-Java-特性"><a href="#Scala-中缺失的-Java-特性" class="headerlink" title="Scala 中缺失的 Java 特性"></a><a name="java-missing-features">Scala 中缺失的 Java 特性</a></h3><p>以下的 Java 特性在 Scala 中是没有的，如果你需要使用以下特性，请在 Java 中定义它们。然而，需要提醒一点的是，你无法为 Java 源文件生成 ScalaDoc。</p>
<ul>
<li>静态字段</li>
<li>静态内部类</li>
<li>Java 枚举</li>
<li>注解</li>
</ul>
<h3 id="Traits-与抽象类"><a href="#Traits-与抽象类" class="headerlink" title="Traits 与抽象类"></a><a name="java-traits">Traits 与抽象类</a></h3><p>对于允许从外部实现的接口，请记住以下几点：</p>
<ul>
<li>包含了默认方法实现的 trait 是无法在 Java 中使用的，请使用抽象类来代替。</li>
<li>一般情况下，请避免使用 trait，除非你百分百确定这个接口即使在未来也不会有默认的方法实现。</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以下默认实现无法在 Java 中使用</span></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Listener</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">onTermination</span></span>(): <span class="type">Unit</span> = &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 可以在 Java 中使用</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">onTermination</span></span>(): <span class="type">Unit</span> = &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a><a name="java-type-alias">类型别名</a></h3><p>不要使用类型别名，它们在字节码和 Java 中是不可见的。</p>
<h3 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a><a name="java-default-param-values">默认参数值</a></h3><p>不要使用默认参数值，通过重载方法来代替。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打破了与 Java 的互操作性</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span></span>(ratio: <span class="type">Double</span>, withReplacement: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="type">RDD</span>[<span class="type">T</span>] = &#123; ... &#125;</div><div class="line"></div><div class="line"><span class="comment">// 以下方法是 work 的</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span></span>(ratio: <span class="type">Double</span>, withReplacement: <span class="type">Boolean</span>): <span class="type">RDD</span>[<span class="type">T</span>] = &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span></span>(ratio: <span class="type">Double</span>): <span class="type">RDD</span>[<span class="type">T</span>] = sample(ratio, withReplacement = <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h3 id="多参数列表-1"><a href="#多参数列表-1" class="headerlink" title="多参数列表"></a><a name="java-multi-param-list">多参数列表</a></h3><p>不要使用多参数列表。</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a><a name="java-varargs">可变参数</a></h3><ul>
<li><p>为可变参数方法添加 <code>@scala.annotation.varargs</code> 注解，以确保它能在 Java 中使用。Scala 编译器会生成两个方法，一个给 Scala 使用（字节码参数是一个 Seq），另一个给 Java 使用（字节码参数是一个数组）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@scala</span>.annotation.varargs</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span></span>(exprs: <span class="type">Expression</span>*): <span class="type">DataFrame</span> = &#123; ... &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>需要注意的一点是，由于 Scala 编译器的一个 bug（<a href="https://issues.scala-lang.org/browse/SI-1459" target="_blank" rel="external">SI-1459</a>，<a href="https://issues.scala-lang.org/browse/SI-9013" target="_blank" rel="external">SI-9013</a>），抽象的变参方法是无法在 Java 中使用的。</p>
</li>
<li><p>重载变参方法时要小心，用另一个类型去重载变参方法会破坏源码的兼容性。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</div><div class="line">  <span class="meta">@scala</span>.annotation.varargs</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">remove</span></span>(elems: <span class="type">String</span>*): <span class="type">Unit</span> = ...</div><div class="line"></div><div class="line">  <span class="comment">// 当调用无参的 remove 方法时会出问题。</span></div><div class="line">  <span class="meta">@scala</span>.annotation.varargs</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">remove</span></span>(elems: <span class="type">People</span>*): <span class="type">Unit</span> = ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// remove 方法有歧义，因此编译不过。</span></div><div class="line"><span class="keyword">new</span> <span class="type">Database</span>().remove()</div></pre></td></tr></table></figure>
<p>一种解决方法是，在可变参数前显式地定义第一个参数：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</div><div class="line">  <span class="meta">@scala</span>.annotation.varargs</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">remove</span></span>(elems: <span class="type">String</span>*): <span class="type">Unit</span> = ...</div><div class="line"></div><div class="line">  <span class="comment">// 以下重载是 OK 的。</span></div><div class="line">  <span class="meta">@scala</span>.annotation.varargs</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">remove</span></span>(elem: <span class="type">People</span>, elems: <span class="type">People</span>*): <span class="type">Unit</span> = ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Implicits-1"><a href="#Implicits-1" class="headerlink" title="Implicits"></a><a name="java-implicits">Implicits</a></h3><p>不要为类或方法使用 implicit，包括了不要使用 <code>ClassTag</code> 和 <code>TypeTag</code>。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaFriendlyAPI</span> </span>&#123;</div><div class="line">  <span class="comment">// 以下定义对 Java 是不友好的，因为方法中包含了一个隐式参数（ClassTag）。</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">convertTo</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](): <span class="type">T</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="伴生对象，静态方法与字段"><a href="#伴生对象，静态方法与字段" class="headerlink" title="伴生对象，静态方法与字段"></a><a name="java-companion-object">伴生对象，静态方法与字段</a></h3><p>当涉及到伴生对象和静态方法/字段时，有几件事情是需要注意的：</p>
<ul>
<li><p>伴生对象在 Java 中的使用是非常别扭的（伴生对象 <code>Foo</code> 会被定义为 <code>Foo$</code> 类内的一个类型为 <code>Foo$</code> 的静态字段 <code>MODULE$</code>）。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Foo</span></span></div><div class="line"></div><div class="line"><span class="comment">// 等价于以下的 Java 代码</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Foo$</span> </span>&#123;</div><div class="line">  <span class="type">Foo</span>$ <span class="type">MODULE</span>$ = <span class="comment">// 对象的实例化</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果非要使用伴生对象，可以在一个单独的类中创建一个 Java 静态字段。</p>
</li>
<li><p>不幸的是，没有办法在 Scala 中定义一个 JVM 静态字段。请创建一个 Java 文件来定义它。</p>
</li>
<li><p>伴生对象里的方法会被自动转成伴生类里的静态方法，除非方法名有冲突。确保静态方法正确生成的最好方式是用 Java 写一个测试文件，然后调用生成的静态方法。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">method2</span></span>(): <span class="type">Unit</span> = &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">method1</span></span>(): <span class="type">Unit</span> = &#123; ... &#125;  <span class="comment">// 静态方法 Foo.method1 会被创建（字节码）</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">method2</span></span>(): <span class="type">Unit</span> = &#123; ... &#125;  <span class="comment">// 静态方法 Foo.method2 不会被创建</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// FooJavaTest.java (in test/scala/com/databricks/...)</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FooJavaTest</span> </span>&#123;</div><div class="line">  public static void compileTest() &#123;</div><div class="line">    <span class="type">Foo</span>.method1();  <span class="comment">// 正常编译</span></div><div class="line">    <span class="type">Foo</span>.method2();  <span class="comment">// 编译失败，因为 method2 并没有生成</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>样例对象（case object） MyClass 的类型并不是 MyClass。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">MyClass</span></span></div><div class="line"></div><div class="line"><span class="comment">// Test.java</span></div><div class="line"><span class="keyword">if</span> (<span class="type">MyClass</span>$.<span class="type">MODULE</span> instanceof <span class="type">MyClass</span>) &#123;</div><div class="line">  <span class="comment">// 上述条件始终为 false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要实现正确的类型层级结构，请定义一个伴生类，然后用一个样例对象去继承它：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a><a name="misc">其它</a></h2><h3 id="优先使用-nanoTime-而非-currentTimeMillis"><a href="#优先使用-nanoTime-而非-currentTimeMillis" class="headerlink" title="优先使用 nanoTime 而非 currentTimeMillis"></a><a name="misc_currentTimeMillis_vs_nanoTime">优先使用 nanoTime 而非 currentTimeMillis</a></h3><p>当要计算<em>持续时间</em>或者检查<em>超时</em>的时候，避免使用 <code>System.currentTimeMillis()</code>。请使用 <code>System.nanoTime()</code>，即使你对亚毫秒级的精度并不感兴趣。</p>
<p><code>System.currentTimeMillis()</code> 返回的是当前的时钟时间，并且会跟进系统时钟的改变。因此，负的时钟调整可能会导致超时而挂起很长一段时间（直到时钟时间赶上先前的值）。这种情况可能发生在网络已经中断一段时间，ntpd 走过了一步之后。最典型的例子是，在系统启动的过程中，DHCP 花费的时间要比平常的长。这可能会导致非常难以理解且难以重现的问题。而 <code>System.nanoTime()</code> 则可以保证是单调递增的，与时钟变化无关。</p>
<p>注意事项：</p>
<ul>
<li>永远不要序列化一个绝对的 <code>nanoTime()</code> 值或是把它传递给另一个系统。绝对的 <code>nanoTime()</code> 值是无意义的、与系统相关的，并且在系统重启时会重置。</li>
<li>绝对的 <code>nanoTime()</code> 值并不保证总是正数（但 <code>t2 - t1</code> 能确保总是产生正确的值）。</li>
<li><code>nanoTime()</code> 每 292 年就会重新计算起。所以，如果你的 Spark 任务需要花非常非常非常长的时间，你可能需要别的东西来处理了：）</li>
</ul>
<h3 id="优先使用-URI-而非-URL"><a href="#优先使用-URI-而非-URL" class="headerlink" title="优先使用 URI 而非 URL"></a><a name="misc_uri_url">优先使用 URI 而非 URL</a></h3><p>当存储服务的 URL 时，你应当使用 <code>URI</code> 来表示。</p>
<p><code>URL</code> 的<a href="http://docs.oracle.com/javase/7/docs/api/java/net/URL.html#equals(java.lang.Object" target="_blank" rel="external">相等性检查</a>)实际上执行了一次网络调用（这是阻塞的）来解析 IP 地址。<code>URI</code> 类在表示能力上是 <code>URL</code> 的超集，并且它执行的是字段的相等性检查。</p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a><a name="unit-test">单元测试</a></h2><h3 id="单元测试框架"><a href="#单元测试框架" class="headerlink" title="单元测试框架"></a><a name="unit-test-framework">单元测试框架</a></h3><p>ScalaTest几乎已经成为Scala语言默认的测试框架，这主要源于它提供了多种表达力超强的测试风格，能够满足各种层次的需求包括单元测试、BDD、验收测试、数据驱动测试。我们也使用<a href="http://www.scalatest.org/" target="_blank" rel="external">ScalaTest</a>测试框架。使用的时候在<code>pom.xml</code>中添加如下类似引用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- test: https://mvnrepository.com/artifact/org.scalatest/scalatest_2.10 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scalatest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scalatest_2.10<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试我们遵循以下几点规则：</p>
<ul>
<li>测试类应该与被测试类处于同一包下，测试类的命名为：被测试类名 + Test</li>
<li>测试含有具体实现的trait时，可以让被测试类直接继承Trait。例如：</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">RecordsGenerator</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">generateRecords</span></span>(table: <span class="type">List</span>[<span class="type">List</span>[<span class="type">String</span>]]): <span class="type">List</span>[<span class="type">Record</span>] &#123;</div><div class="line">          <span class="comment">//...</span></div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordsGeneratorSpec</span> <span class="keyword">extends</span> <span class="title">FlatSpec</span> <span class="keyword">with</span> <span class="title">ShouldMatcher</span> <span class="keyword">with</span> <span class="title">RecordGenerator</span> </span>&#123;</div><div class="line">     <span class="keyword">val</span> table = <span class="type">List</span>(<span class="type">List</span>(<span class="string">"abc"</span>, <span class="string">"def"</span>), <span class="type">List</span>(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>))</div><div class="line">     it should <span class="string">"generate records"</span> in &#123;</div><div class="line">          <span class="keyword">val</span> records = generateRecords(table)</div><div class="line">          records.size should be(<span class="number">2</span>)</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>若要对文件进行测试，可以用字符串假装文件：</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">CsvLine</span> </span>= <span class="type">String</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatCsv</span></span>(source: <span class="type">Source</span>): <span class="type">List</span>[<span class="type">CsvLine</span>] = &#123;</div><div class="line">     source.getLines(_.replace(<span class="string">", "</span>, <span class="string">"|"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>formatCsv需要接受一个文件源，例如Source.fromFile(“testdata.txt”)。但在测试时，可以通过Source.fromString方法来生成formatCsv需要接收的Source对象：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test(<span class="string">"format csv lines"</span>) &#123;</div><div class="line">     <span class="keyword">val</span> lines = <span class="type">Source</span>.fromString(<span class="string">"abc, def, hgi\n1, 2, 3\none, two, three"</span>)</div><div class="line">     <span class="keyword">val</span> result = formatCsv(lines)</div><div class="line">     assert(result.mkString(<span class="string">"\n"</span>).equles(<span class="string">"abc|def|hgi\n1|2|3\none|two|three"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试风格的选择"><a href="#测试风格的选择" class="headerlink" title="测试风格的选择"></a><a name="unit-test-style">测试风格的选择</a></h3><p>ScalaTest一共提供了七种测试风格，分别为：FunSuite，FlatSpec，FunSpec，WordSpec，FreeSpec，PropSpec和FeatureSpec。这就好像使用相同的原料做成不同美味乃至不同菜系的佳肴，你可以根据自己的口味进行选择。我们统一推荐使用FunSuite的方式，因为它更灵活，而且更符合传统测试方法的风格，区别仅在于test()方法可以接受一个闭包:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.scalatest.<span class="type">FunSuite</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetSuite</span> <span class="keyword">extends</span> <span class="title">FunSuite</span> </span>&#123;</div><div class="line"></div><div class="line">  test(<span class="string">"An empty Set should have size 0"</span>) &#123;</div><div class="line">    assert(<span class="type">Set</span>.empty.size == <span class="number">0</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  test(<span class="string">"Invoking head on an empty Set should produce NoSuchElementException"</span>) &#123;</div><div class="line">    assertThrows[<span class="type">NoSuchElementException</span>] &#123;</div><div class="line">      <span class="type">Set</span>.empty.head</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，如果你有必须的理由选择其它测试风格的话，本规则并不强制。</p>
<h1 id="三、-引用"><a href="#三、-引用" class="headerlink" title="三、 引用"></a>三、 引用</h1><p><a href="https://github.com/databricks/scala-style-guide/blob/master/README-ZH.md" target="_blank" rel="external">Databricks Scala 编程风格指南</a>(团队最终选择的模板)<br><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">Effective Scala</a>(Twitter Scala资料，值得参考)<br><a href="https://zhangyi.gitbooks.io/thinking-in-scala/content/scala-convention.html" target="_blank" rel="external">Thinking in Scala–Scala编程规范</a>(个人整理，可以参考)<br><a href="http://www.scala-lang.org/docu/files/Scala%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83.pdf" target="_blank" rel="external">scala-lang–Scala语言规范.pdf</a>(官方原版的中文文档，共127页，过于复杂琐碎，可以参考)<br><a href="http://docs.scala-lang.org/style/" target="_blank" rel="external">Scala官网Style Guide</a>(官方原版，其它版本基本上都是基于此版进行的改进)<br><a href="https://segmentfault.com/a/1190000000420018" target="_blank" rel="external">分析GitHub上托管的scala开源代码统计</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark源码阅读之——StreamingContext详解]]></title>
      <url>http://flume.cn/2017/01/03/Spark%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E2%80%94%E2%80%94StreamingContext%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/lw-lin/CoolplaySpark/tree/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97" target="_blank" rel="external">Spark Streaming 源码解析系列</a>很好地解析了Spark Streaming框架的源码，遗留了一点关于StreamingContext的解析，我基于自己的理解，简要阐述如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">本系列内容适用范围：</div><div class="line">* 2016.12.28 update, Spark 2.1 全系列 √ (2.1.0)</div><div class="line">* 2016.11.14 update, Spark 2.0 全系列 √ (2.0.0, 2.0.1, 2.0.2)</div><div class="line">* 2016.11.07 update, Spark 1.6 全系列 √ (1.6.0, 1.6.1, 1.6.2, 1.6.3)</div></pre></td></tr></table></figure>
<p>阅读本文前，请一定先阅读 <a href="0.1 Spark Streaming 实现思路与模块概述.md">Spark Streaming 实现思路与模块概述</a> 一文，其中概述了 Spark Streaming 的 4 大模块的基本作用，有了全局概念后再看本文对 <code>StreamingContext</code> 细节的解释。</p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><img src="040.png" alt="image"></p>
<p>如各个模块的架构图所示，<code>StreamingContext</code> 是 Spark Streaming 提供给用户 code 的、与前述 4 个模块交互的一个简单和统一的入口，是Spark Streaming程序与Spark Core的连接器，下面我们用这段11行的完整 <a href="http://spark.apache.org/docs/latest/streaming-programming-guide.html#a-quick-example" target="_blank" rel="external">quick example</a>，来说明用户 code 是怎么通过 <code>StreamingContext</code> 与前面几个模块进行交互的：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark._</div><div class="line"><span class="keyword">import</span> org.apache.spark.streaming._</div><div class="line"></div><div class="line"><span class="comment">// 首先配置一下本 quick example 将跑在本机，app name 是 NetworkWordCount</span></div><div class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"NetworkWordCount"</span>)</div><div class="line"><span class="comment">// batchDuration 设置为 1 秒，然后创建一个 streaming 入口</span></div><div class="line"><span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment">// ssc.socketTextStream() 将创建一个 SocketInputDStream；这个 InputDStream 的 SocketReceiver 将监听本机 9999 端口</span></div><div class="line"><span class="keyword">val</span> lines = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>))      <span class="comment">// DStream transformation</span></div><div class="line"><span class="keyword">val</span> pairs = words.map(word =&gt; (word, <span class="number">1</span>))     <span class="comment">// DStream transformation</span></div><div class="line"><span class="keyword">val</span> wordCounts = pairs.reduceByKey(_ + _)    <span class="comment">// DStream transformation</span></div><div class="line">wordCounts.print()                           <span class="comment">// DStream output</span></div><div class="line"><span class="comment">// 上面 4 行利用 DStream transformation 构造出了 lines -&gt; words -&gt; pairs -&gt; wordCounts -&gt; .print() 这样一个 DStreamGraph</span></div><div class="line"><span class="comment">// 但注意，到目前是定义好了产生数据的 SocketReceiver，以及一个 DStreamGraph，这些都是静态的</span></div><div class="line"></div><div class="line"><span class="comment">// 下面这行 start() 将在幕后启动 JobScheduler, 进而启动 JobGenerator 和 ReceiverTracker</span></div><div class="line"><span class="comment">// ssc.start()</span></div><div class="line"><span class="comment">//    -&gt; JobScheduler.start()</span></div><div class="line"><span class="comment">//        -&gt; JobGenerator.start();    开始不断生成一个一个 batch</span></div><div class="line"><span class="comment">//        -&gt; ReceiverTracker.start(); 开始往 executor 上分布 ReceiverSupervisor 了，也会进一步创建和启动 Receiver</span></div><div class="line">ssc.start()</div><div class="line"></div><div class="line"><span class="comment">// 然后用户 code 主线程就 block 在下面这行代码了</span></div><div class="line"><span class="comment">// block 的后果就是，后台的 JobScheduler 线程周而复始的产生一个一个 batch 而不停息</span></div><div class="line"><span class="comment">// 也就是在这里，我们前面静态定义的 DStreamGraph 的 print()，才一次一次被在 RDD 实例上调用，一次一次打印出当前 batch 的结果</span></div><div class="line">ssc.awaitTermination()</div></pre></td></tr></table></figure>
<p>从上述样例程序可知，程序的前两行创建了一个新的 <code>StreamingContext</code>，第三行通过 <code>ssc.socketTextStream</code>通过ssc暴露的方法创建了一个<code>ReceiverInputDStream</code>，接着基于DStream的各种方法对数据进行了操作，最后通过 <code>ssc.start</code> 方法启动了Spark Streaming 程序，最后一句<code>ssc.awaitTermination()</code>将用户 code 主线程 block 住，由后台的 JobScheduler 线程周而复始的产生一个一个 batch 而不停息地处理，除非发生异常。</p>
<p>我们可以发现，StreamingContext主要包含以下内容：</p>
<ul>
<li>StreamingContext的创建(构造函数)</li>
<li>StreamingContext的初始化(成员)</li>
<li>StreamingContext的状态控制(函数)</li>
</ul>
<h3 id="StreamingContext的创建"><a href="#StreamingContext的创建" class="headerlink" title="StreamingContext的创建"></a>StreamingContext的创建</h3><p>首先我们来看<code>StreamingContext</code>的构造函数，主要由三个参数，分别是：</p>
<ul>
<li>SparkContext：SparkStreaming的最终处理是交给SparkContext的；</li>
<li>Checkpoint：检查点，用于错误恢复；</li>
<li>Duration：设定Streaming每个批次的积累时间。</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamingContext</span> <span class="title">private</span>[streaming] (<span class="params"></span></span></div><div class="line">    _sc: <span class="type">SparkContext</span>,</div><div class="line">    _cp: <span class="type">Checkpoint</span>,</div><div class="line">    _batchDur: <span class="type">Duration</span></div><div class="line">  ) <span class="keyword">extends</span> <span class="title">Logging</span> &#123;</div></pre></td></tr></table></figure>
<p><code>StreamingContext</code> 有以下几种不同的创建方式：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 1. 通过已经存在的SparkContext创建.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(sparkContext: <span class="type">SparkContext</span>, batchDuration: <span class="type">Duration</span>) = &#123;</div><div class="line">  <span class="keyword">this</span>(sparkContext, <span class="literal">null</span>, batchDuration)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. 通过SparkConf中的配置信息来来创建.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(conf: <span class="type">SparkConf</span>, batchDuration: <span class="type">Duration</span>) = &#123;</div><div class="line">  <span class="keyword">this</span>(<span class="type">StreamingContext</span>.createNewSparkContext(conf), <span class="literal">null</span>, batchDuration)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3. 通过一些必要参数来创建</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(</div><div class="line">    master: <span class="type">String</span>,</div><div class="line">    appName: <span class="type">String</span>,</div><div class="line">    batchDuration: <span class="type">Duration</span>,</div><div class="line">    sparkHome: <span class="type">String</span> = <span class="literal">null</span>,</div><div class="line">    jars: <span class="type">Seq</span>[<span class="type">String</span>] = <span class="type">Nil</span>,</div><div class="line">    environment: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="type">Map</span>()) = &#123;</div><div class="line">  <span class="keyword">this</span>(<span class="type">StreamingContext</span>.createNewSparkContext(master, appName, sparkHome, jars, environment),</div><div class="line">       <span class="literal">null</span>, batchDuration)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 4. 从checkpoint文件中读取来重新创建</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(path: <span class="type">String</span>, hadoopConf: <span class="type">Configuration</span>) =</div><div class="line">  <span class="keyword">this</span>(<span class="literal">null</span>, <span class="type">CheckpointReader</span>.read(path, <span class="keyword">new</span> <span class="type">SparkConf</span>(), hadoopConf).orNull, <span class="literal">null</span>)</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// 5. 已经存在的SparkContext，通过读取checkpoint文件重新创建</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(path: <span class="type">String</span>, sparkContext: <span class="type">SparkContext</span>) = &#123;</div><div class="line">  <span class="keyword">this</span>(</div><div class="line">    sparkContext,</div><div class="line">    <span class="type">CheckpointReader</span>.read(path, sparkContext.conf, sparkContext.hadoopConfiguration).orNull,</div><div class="line">    <span class="literal">null</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// 6. 值得一提的是，StreamingContext对象提供了一个构造方法，如果存在Checkpoint就通过Checkpoint创建，否则新建一个StreamingContext</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getOrCreate</span></span>(</div><div class="line">    checkpointPath: <span class="type">String</span>,</div><div class="line">    creatingFunc: () =&gt; <span class="type">StreamingContext</span>,</div><div class="line">    hadoopConf: <span class="type">Configuration</span> = <span class="type">SparkHadoopUtil</span>.get.conf,</div><div class="line">    createOnError: <span class="type">Boolean</span> = <span class="literal">false</span></div><div class="line">  ): <span class="type">StreamingContext</span> = &#123;</div><div class="line">  <span class="keyword">val</span> checkpointOption = <span class="type">CheckpointReader</span>.read(</div><div class="line">    checkpointPath, <span class="keyword">new</span> <span class="type">SparkConf</span>(), hadoopConf, createOnError)</div><div class="line">  checkpointOption.map(<span class="keyword">new</span> <span class="type">StreamingContext</span>(<span class="literal">null</span>, _, <span class="literal">null</span>)).getOrElse(creatingFunc())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整理上述的文件创建过程，可以看出，StreamingContext的创建是一定要包含SparkContext的，同理也可以推出，Spark Streaming最终实际是交给SparkContext来处理的，Spark Streaming更像是Spark Core的一个应用程序。<br><code>StreamingContext</code>的创建主要分为两类：</p>
<ul>
<li>1: 通过SparkContext建立新的StreamingContext，需要指定<code>batchDuration</code>时间；</li>
<li>2: 从checkpoint文件中读取的Checkpoint对象中创建StreamingContext，用于异常情况下的恢复，<code>batchDuration</code>在Checkpoint中已经保存，所以可以不用显示指定。</li>
</ul>
<p>所以说，要构建StreamingContext，就必须要以上两者至少选一，下面的代码也说明了这点：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require(_sc != <span class="literal">null</span> || _cp != <span class="literal">null</span>,</div><div class="line">  <span class="string">"Spark Streaming cannot be initialized with both SparkContext and checkpoint as null"</span>)</div></pre></td></tr></table></figure>
<p>注意：由于SparkStreaming至少需要一个线程来接收数据，所以local与local[1]模式下是不可以启动的。</p>
<h3 id="StreamingContext的初始化"><a href="#StreamingContext的初始化" class="headerlink" title="StreamingContext的初始化"></a>StreamingContext的初始化</h3><p>StreamingContext在创建后会进行一些初始化（静态定义）的工作，定义一些静态的数据结构，由图可知，StreamingContext主要持有 DStreamGraph 与 JobScheduler 的对象：</p>
<p>如下是graph的初始化定义代码，如果之前存在 Checkpoint ，则graph从 Checkpoint 得到，否则创建一个新的graph<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>[streaming] <span class="keyword">val</span> graph: <span class="type">DStreamGraph</span> = &#123;</div><div class="line">  <span class="keyword">if</span> (isCheckpointPresent) &#123;</div><div class="line">    _cp.graph.setContext(<span class="keyword">this</span>)</div><div class="line">    <span class="comment">// 遍历从Checkpoint数据中恢复出RDD</span></div><div class="line">    _cp.graph.restoreCheckpointData()</div><div class="line">    _cp.graph</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    require(_batchDur != <span class="literal">null</span>, <span class="string">"Batch duration for StreamingContext cannot be null"</span>)</div><div class="line">    <span class="keyword">val</span> newGraph = <span class="keyword">new</span> <span class="type">DStreamGraph</span>()</div><div class="line">    newGraph.setBatchDuration(_batchDur)</div><div class="line">    newGraph</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如下是初始化jobScheduler的代码：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>[streaming] <span class="keyword">val</span> scheduler = <span class="keyword">new</span> <span class="type">JobScheduler</span>(<span class="keyword">this</span>)</div></pre></td></tr></table></figure></p>
<p>除了上述两个主要成员，StreamingContext还包含以下成员：</p>
<ul>
<li>ContextWaiter：用于等待任务执行结束；</li>
<li>StreamingJobProgressListener：用于监听StreamingJob，用以更新StreamingTab的显示；</li>
<li>StreamingTab：用于生成SparkUI中Streaming那一页标签；</li>
<li>StreamingSource： 流式计算的测量数据源metrics。</li>
</ul>
<p>除了定义上述成员，StreamingContext还进行了Checkpoint,创建了Checkpoint目录：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conf.getOption(<span class="string">"spark.streaming.checkpoint.directory"</span>).foreach(checkpoint)</div></pre></td></tr></table></figure>
<p>checkpoint方法如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建Checkpoint目录</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkpoint</span></span>(directory: <span class="type">String</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (directory != <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">val</span> path = <span class="keyword">new</span> <span class="type">Path</span>(directory)</div><div class="line">    <span class="keyword">val</span> fs = path.getFileSystem(sparkContext.hadoopConfiguration)</div><div class="line">    fs.mkdirs(path)</div><div class="line">    <span class="keyword">val</span> fullPath = fs.getFileStatus(path).getPath().toString</div><div class="line">    sc.setCheckpointDir(fullPath)</div><div class="line">    checkpointDir = fullPath</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    checkpointDir = <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="StreamingContext的控制"><a href="#StreamingContext的控制" class="headerlink" title="StreamingContext的控制"></a>StreamingContext的控制</h3><p>StreamingContext作为控制面板，给用户提供了许多控制方法，就像控制面板上的按钮，让我们来开发spark Streaming程序，主要有以下方法：</p>
<ul>
<li>sparkContext： 获得ssc所属的SparkContext</li>
<li>remember(duration: Duration)：通过设置 <code>graph.remember(duration)</code> 来设置<code>rememberDuration</code></li>
</ul>
<p>简单解释一下<code>rememberDuration</code>，Spark Streaming 会在每个Batch任务结束时进行一次清理动作<code>clearMetadata</code>，每个DStream 都会被扫描，先清理输出Dstream，接着清理输入DStream，清理的时候，根据<code>rememberDuration</code>来计算出oldRDD然后清理。<code>rememberDuration</code> 有默认值，大体是<code>slideDuration</code>，也就是DStream生成RDD的时间间隔，如果设置了checkpointDuration 则是2*checkpointDuration，手动指定的值要大于默认值才会生效。</p>
<p>接下来是定义一些定义输入流的方法，主要有：</p>
<ul>
<li>receiverStream<a href="receiver: Receiver[T]" target="_blank" rel="external">T: ClassTag</a>：创建一个用户自定义的Receiver；</li>
<li>socketTextStream：创建TCP socketReceiver，默认是utf-8的文本格式，以’\n’分隔；</li>
<li>socketStream：创建TCP socketReceiver，用户提供自己的转化函数；</li>
<li>rawSocketStream：创建SocketReceiver，相比上着，没有中间的解码转化所以比较高效；</li>
<li>fileStream：创建监控HDFS目录的InputDStream，通过检测文件的修改时间来判断是否是新文件；</li>
<li>binaryRecordsStream：创建二进制文件的监听InputDStream，使用了fileStream方法；</li>
<li>queueStream：创建一个RDD队列流，底层调用了UnionRDD的方法将这些RDD转化为一个RDD，开启oneAtATime参数则每个RDD只取一个值，可以用于调试和测试；</li>
</ul>
<p>在InputDStream的构造过程中，会将此输入流InputDStream添加到DStreamGraph的inputStreams数据结构中，<br><figure class="highlight scala"><figcaption><span>InputDStream.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssc.graph.addInputStream(<span class="keyword">this</span>)</div></pre></td></tr></table></figure></p>
<p>还定义了一些DStream的其它方法：</p>
<ul>
<li>union： 多个DStreams合成一个DStream，底层调用了ssc.sc.union(rdds)；</li>
<li>transform： 根据自定义的transformFunc生成新的DStream；</li>
<li>addStreamingListener： 在listenerBus上增加一个StreamingListener对象，供JobScheduler的StreamingListenerBus对象监听输入流的ReceiverRateController对象；</li>
</ul>
<p>还定义了一些控制启动与关闭的方法：</p>
<ul>
<li>start：启动StreamingContext。</li>
</ul>
<p>StreamingContext的start方法启动过程中，会判断StreamingContext的状态，它有三个状态INITIALIZED、ACTIVE、STOP。只有状态为INITAILIZED才允许启动，主要有以下步骤：</p>
<ol>
<li>验证graph是否有效；</li>
<li>设置Checkpoint；</li>
<li>使用新的线程异步启动 JobScheduler ，启动后将状态由初始化状态INITIALIZED改为ACTIVE状态，JobScheduler的启动请见<a href="https://github.com/lw-lin/CoolplaySpark/blob/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97/2.2%20JobGenerator%20%E8%AF%A6%E8%A7%A3.md" target="_blank" rel="external">JobGenerator 详解</a>；</li>
<li>同时添加Streaming的shutdownHookRef，用于程序的异常终止，StreamingContext的shutdownHook优先级比SparkContext的值大1；</li>
<li>往metricsSystem中注册streamingSource测量数据源；</li>
<li>添加生成SparkUI中Streaming相关标签</li>
</ol>
<ul>
<li>awaitTermination：等待Streaming程序的停止；</li>
<li>stop：停止SparkStreaming程序，其中可以传入参数以表示是否同时停止相关的SparkContext，默认为true(这个参数在文件名流转化为数据流的时候应该设置为false，通过spark.streaming.stopSparkContextByDefault来设置);还有一个参数是是否优雅地停止(等待其它已经接收到的数据处理完毕再停止)；</li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="http://lqding.blog.51cto.com/9123978/1771017" target="_blank" rel="external">http://lqding.blog.51cto.com/9123978/1771017</a><br><a href="https://github.com/lw-lin/CoolplaySpark/tree/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97" target="_blank" rel="external">https://github.com/lw-lin/CoolplaySpark/tree/master/Spark%20Streaming%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97</a><br><a href="http://lqding.blog.51cto.com/9123978/1773912" target="_blank" rel="external">http://lqding.blog.51cto.com/9123978/1773912</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark中读取hdfs文件简记]]></title>
      <url>http://flume.cn/2016/12/19/spark%E4%B8%AD%E8%AF%BB%E5%8F%96hdfs%E6%96%87%E4%BB%B6%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>使用spark的API读取hdfs的方法是：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> lines: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(filePath)</div></pre></td></tr></table></figure></p>
<p>如果该文件不存在，就会报错，报错多次，就会奔溃</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">16/12/16 16:53:12 ERROR JobScheduler: Error running job streaming job 1481878392000 ms.0</div><div class="line">org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: hdfs://ns/data/.../4811_000.txt</div><div class="line">	at org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:285)</div><div class="line">	at org.apache.hadoop.mapred.FileInputFormat.listStatus(FileInputFormat.java:228)</div><div class="line">	at org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:313)</div><div class="line">	at org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:199)</div><div class="line">	at org.apache.spark.rdd.RDD$<span class="variable">$anonfun</span><span class="variable">$partitions</span><span class="variable">$2</span>.apply(RDD.scala:239)</div><div class="line">	at org.apache.spark.rdd.RDD$<span class="variable">$anonfun</span><span class="variable">$partitions</span><span class="variable">$2</span>.apply(RDD.scala:237)</div><div class="line">	at scala.Option.getOrElse(Option.scala:120)</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">16/12/16 16:53:12 ERROR ApplicationMaster: User class threw exception: org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: hdfs://ns/data...00.txt</div><div class="line">org.apache.hadoop.mapred.InvalidInputException: Input path does not exist: hdfs://ns/data/hjpt/...000.txt</div><div class="line">	at org.apache.hadoop.mapred.FileInputFormat.singleThreadedListStatus(FileInputFormat.java:285)</div><div class="line">	at org.apache.hadoop.mapred.FileInputFormat.listStatus(FileInputFormat.java:228)</div><div class="line">	at org.apache.hadoop.mapred.FileInputFormat.getSplits(FileInputFormat.java:313)</div><div class="line">	at org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:199)</div><div class="line">	at org.apache.spark.rdd.RDD$<span class="variable">$anonfun</span><span class="variable">$partitions</span><span class="variable">$2</span>.apply(RDD.scala:239)</div><div class="line">	at org.apache.spark.rdd.RDD$<span class="variable">$anonfun</span><span class="variable">$partitions</span><span class="variable">$2</span>.apply(RDD.scala:237)</div><div class="line">	at scala.Option.getOrElse(Option.scala:120)</div><div class="line">	at org.apache.spark.rdd.RDD.partitions(RDD.scala:237)</div></pre></td></tr></table></figure>
<p>由于spark中hdfs读是lazy的，所以无法使用try-catch把它装住，即使用try-catch将其包住也会报错。<br>所以目前使用的解决方法是需要在读取该文件之前检验该文件是否存在。<br>在spark中的实现不需要再次指定hadoopConf，只要从sc中拿就可以了：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> conf = sc.hadoopConfiguration</div><div class="line"><span class="keyword">val</span> fs = org.apache.hadoop.fs.<span class="type">FileSystem</span>.get(conf)</div><div class="line"><span class="keyword">val</span> exists = fs.exists(<span class="keyword">new</span> org.apache.hadoop.fs.<span class="type">Path</span>(<span class="string">"/path/on/hdfs/to/SUCCESS.txt"</span>))</div></pre></td></tr></table></figure>
<p>实际实现如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">val</span> sc: <span class="type">SparkContext</span> = eachRdd.sparkContext</div><div class="line"><span class="keyword">val</span> hadoopConf: <span class="type">Configuration</span> = sc.hadoopConfiguration</div><div class="line"><span class="keyword">val</span> fs: <span class="type">FileSystem</span> = org.apache.hadoop.fs.<span class="type">FileSystem</span>.get(hadoopConf)</div><div class="line"></div><div class="line"><span class="comment">// 这里是否不需要collect？</span></div><div class="line"><span class="keyword">val</span> lines: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">FtpMap</span>)] = oiddRdd.collect()</div><div class="line"><span class="comment">// 文件名流转化为文件数据流</span></div><div class="line">lines.foreach &#123;</div><div class="line">eachFileJson: (<span class="type">String</span>, <span class="type">FtpMap</span>) =&gt; &#123;</div><div class="line">  <span class="keyword">val</span> topic: <span class="type">String</span> = eachFileJson._1</div><div class="line">  printLog.info(<span class="string">"topic: "</span> + topic)</div><div class="line">  <span class="keyword">val</span> fileJson = eachFileJson._2</div><div class="line">  <span class="keyword">val</span> filePath = fileJson.file_path</div><div class="line">  <span class="keyword">val</span> fileExists: <span class="type">Boolean</span> = <span class="keyword">try</span> &#123;</div><div class="line">    fs.exists(<span class="keyword">new</span> org.apache.hadoop.fs.<span class="type">Path</span>(filePath))</div><div class="line">  &#125; <span class="keyword">catch</span> &#123;</div><div class="line">    <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; &#123;</div><div class="line">      printLog.error(<span class="string">"Exception: filePath:"</span> + filePath + <span class="string">" e:"</span> + e)</div><div class="line">      <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (fileExists) &#123;</div><div class="line">    <span class="keyword">val</span> lines: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(filePath)</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>值得注意的是：</p>
<p>如果读取一个hdfs目录下的所有文件，当文件的数目非常多，比如说有一亿个文件，由于spark读hdfs文件是lazy的，它在读取hdfs下该文件的列表的时候，会先将这个列表保存到内存中，但是如果在这期间hdfs文件被删除了，则还是会发生文件不存在的错误，所以以后遇到这类问题的时候要注意。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过经纬度计算距离算法的scala实现]]></title>
      <url>http://flume.cn/2016/11/24/%E9%80%9A%E8%BF%87%E7%BB%8F%E7%BA%AC%E5%BA%A6%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E7%AE%97%E6%B3%95%E7%9A%84scala%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个景点的经纬度，给定距离，给定形状，判断其它点是否在某个区域内：</p>
<h2 id="圆形方案"><a href="#圆形方案" class="headerlink" title="圆形方案"></a>圆形方案</h2><p>使用通用的地球上两点距离函数，圆形只需要判断距离，正方形需要计算两次距离（指定经度与景点的经度一样，计算是否在范围内，然后指定纬度与景点的纬度一样，计算是否在范围内，如果都在范围内，则代表该点在景区范围内），其它形状基于这个基础类推</p>
<h3 id="距离函数"><a href="#距离函数" class="headerlink" title="距离函数"></a>距离函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Created on 2016/10/9.</div><div class="line">  *</div><div class="line">  * 求地球上两点间的距离 返回的是 double 格式的 km</div><div class="line">  * 第一点经纬度为（lat1,lng1），第二点经纬度为（lat2,lng2），地球平均半径R=6378.137</div><div class="line">  * 按照0度经线的基准，东经取经度的正值(Longitude)，西经取经度负值(-Longitude)，北纬取90-纬度值(90- Latitude)，南纬取90+纬度值(90+Latitude)，</div><div class="line">  * 则经过上述处理过后的两点被计为(MLon1, MLat1)和(MLon2, MLat2)。那么根据三角推导，可以得到计算两点距离的如下公式：</div><div class="line">  * C = sin(MLat1)*sin(MLat2)*cos(MLon1-MLon2) + cos(MLat1)*cos(MLat2)，Distance = R*Arccos(C)*Pi/180</div><div class="line">  * 如果仅对经度作正负的处理，而不对纬度作90-Latitude(假设都是北半球，南半球只有澳洲具有应用意义)的处理，那么公式将是：</div><div class="line">  * C = sin(LatA)*sin(LatB) + cos(LatA)*cos(LatB)*cos(MLonA-MLonB)，Distance = R*Arccos(C)*Pi/180</div><div class="line">  * 三角函数的输入和输出都采用弧度值，那么公式还可以写作:</div><div class="line">  * C = sin(Lat1*Pi/180)*sin(Lat2*Pi/180) + cos(Lat1*Pi/180)*cos(Lat2*Pi/180)*cos((MLon1-MLon2)*Pi/180)，Distance = R*Arccos(C)*Pi/180</div><div class="line">  * rad()函数求弧度，Distance（）函数求距离</div><div class="line">  *</div><div class="line">  * 结果验证工具地址 http://www.storyday.com/wp-content/uploads/2008/09/latlung_dis.html</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span></span>(lat1: <span class="type">Double</span>, lng1: <span class="type">Double</span>, lat2: <span class="type">Double</span>, lng2: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</div><div class="line">  <span class="keyword">val</span> <span class="type">EARTH_RADIUS</span> = <span class="number">6378.137</span></div><div class="line"></div><div class="line">  <span class="keyword">val</span> radLat1 = rad(lat1)</div><div class="line">  <span class="keyword">val</span> radLat2 = rad(lat2)</div><div class="line">  <span class="keyword">val</span> a = rad(lat1) - rad(lat2)</div><div class="line">  <span class="keyword">val</span> b = rad(lng1) - rad(lng2)</div><div class="line">  <span class="keyword">val</span> distance = <span class="type">EARTH_RADIUS</span> * <span class="number">2</span> * <span class="type">Math</span>.asin(<span class="type">Math</span>.sqrt(<span class="type">Math</span>.pow(<span class="type">Math</span>.sin(a / <span class="number">2</span>), <span class="number">2</span>) + <span class="type">Math</span>.cos(radLat1) * <span class="type">Math</span>.cos(radLat2) * <span class="type">Math</span>.pow(<span class="type">Math</span>.sin((b) / <span class="number">2</span>), <span class="number">2</span>)))</div><div class="line">  <span class="comment">//    printLog.debug("lat1: " + lat1 + " lng1: " + lng1 + " lat2: " + lat2 + " lng2: " + lng2)</span></div><div class="line">  printLog.debug(<span class="string">"distance:"</span> + distance)</div><div class="line">  distance</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不规则图形方案"><a href="#不规则图形方案" class="headerlink" title="不规则图形方案"></a>不规则图形方案</h2><p>scala实现函数：使用现成的算法PNPoly即可实现；</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 多点位置判断算法 判断一个坐标点是否在不规则多边形内部</div><div class="line">  * *</div><div class="line">  * 在 GIS（地理信息管理系统）中，判断一个坐标是否在多边形内部是个经常要遇到的问题。乍听起来还挺复杂。</div><div class="line">  * 根据 W. Randolph Franklin 提出的 PNPoly (http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html) 算法，只需区区几行代码就解决了这个问题:</div><div class="line">  * *</div><div class="line">  * 针对每一个点，算法遍历多边形相邻的每两个顶点（即一条边），假如待判断点满足以下两个条件即改变点是否在多边形内的状态标识c：</div><div class="line">  * 待判断点的Y坐标在点i和点j的Y坐标范围之内</div><div class="line">  * 待判断点的X坐标在点i和点j连线之下</div><div class="line">  * 遍历所有的边之后假如以上两个条件同时满足奇数次则该带判断点位于多边形之内，否则位于多边形之外。</div><div class="line">  * 算法复杂度为O(n)，其中n为多边形的顶点个数。</div><div class="line">  *</div><div class="line">  * @param vertexes</div><div class="line">  * @param testPoint</div><div class="line">  * @return</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pNPoly</span></span>(vertexes: <span class="type">Array</span>[<span class="type">LocationPoint</span>], testPoint: <span class="type">LocationPoint</span>): <span class="type">Boolean</span> = &#123;</div><div class="line">  <span class="keyword">var</span> flag = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> flag0 = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> flag1 = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> flag2 = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> flag3 = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> j = vertexes.length - <span class="number">1</span></div><div class="line"></div><div class="line">  <span class="keyword">val</span> loop = <span class="keyword">new</span> <span class="type">Breaks</span></div><div class="line">  loop.breakable &#123;</div><div class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until vertexes.length) &#123;</div><div class="line">      <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</div><div class="line">        j = i - <span class="number">1</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> ((vertexes(i).lat == testPoint.lat) &amp;&amp; (vertexes(i).long == testPoint.long)) &#123;</div><div class="line">        flag0 = <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (((vertexes(i).lat - testPoint.lat) * (vertexes(i).long - testPoint.long) * (vertexes(j).lat - testPoint.lat) * (vertexes(j).long - testPoint.long) == <span class="number">0</span>) &amp;&amp;</div><div class="line">        (((vertexes(i).lat &gt; testPoint.lat) != (vertexes(j).lat &gt; testPoint.lat)) &amp;&amp; ((vertexes(i).long &gt; testPoint.long) != (vertexes(j).long &gt; testPoint.long)))) &#123;</div><div class="line">        flag1 = <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (((vertexes(i).lat - testPoint.lat) * (vertexes(i).long - testPoint.long) * (vertexes(j).lat - testPoint.lat) * (vertexes(j).long - testPoint.long) != <span class="number">0</span>) &amp;&amp;</div><div class="line">        ((vertexes(i).lat - testPoint.lat) / (vertexes(i).long - testPoint.long) == (vertexes(j).lat - testPoint.lat) / (vertexes(j).long - testPoint.long))) &#123;</div><div class="line">        flag2 = <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (((vertexes(i).lat &gt; testPoint.lat) != (vertexes(j).lat &gt; testPoint.lat)) &amp;&amp;</div><div class="line">        (testPoint.long &lt; (vertexes(j).long - vertexes(i).long) * (testPoint.lat - vertexes(j).lat) / (vertexes(j).lat - vertexes(i).lat) + vertexes(i).long)) &#123;</div><div class="line">        flag3 = <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      flag = flag0 || flag1 || flag2 || flag3</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (flag) &#123;</div><div class="line">        loop.<span class="keyword">break</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  flag</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在运用该算法之前，有个优化方案，就是先进行最小外接矩形范围判断，如果不在最小外接矩形中，则直接跳过，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (p.x &lt; minX || p.x &gt; maxX || p.y &lt; minY || p.y &gt; maxY) &#123;</div><div class="line">    <span class="comment">// 点在多边形之外</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先判断点是否在多边形的最小外接矩形之内，该步骤不是必须的，但是可以有效避免不必要的计算。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://riyueshi.github.io/2015/10/07/is_point_in_polygon/" target="_blank" rel="external">http://riyueshi.github.io/2015/10/07/is_point_in_polygon/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark踩坑之Streaming在Kerberos的hadoop中renew失败]]></title>
      <url>http://flume.cn/2016/11/24/Spark%E8%B8%A9%E5%9D%91%E4%B9%8BStreaming%E5%9C%A8Kerberos%E7%9A%84hadoop%E4%B8%ADrenew%E5%A4%B1%E8%B4%A5/</url>
      <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>SparkStreaming任务的Kerberos环境下两天后出现 AMRMTOKEN INVALID</p>
<p>早上回来，跑在yarn上面的Streaming程序莫名奇妙崩溃了，yarn logs 查看日志，700万行，发现在每个executor的最后报错如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">16/11/01 15:02:05 INFO executor.CoarseGrainedExecutorBackend: Registered signal handlers <span class="keyword">for</span> [TERM, HUP, INT]</div><div class="line">16/11/01 15:02:06 INFO spark.SecurityManager: Changing view acls to: wzfw</div><div class="line">16/11/01 15:02:06 INFO spark.SecurityManager: Changing modify acls to: wzfw</div><div class="line">16/11/01 15:02:06 INFO spark.SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(wzfw); users with modify permissions: Set(wzfw)</div><div class="line">...</div><div class="line">16/11/02 03:51:33 ERROR executor.CoarseGrainedExecutorBackend: RECEIVED SIGNAL 15: SIGTERM</div><div class="line">...</div><div class="line">16/11/02 03:51:34 ERROR executor.CoarseGrainedExecutorBackend: RECEIVED SIGNAL 15: SIGTERM</div><div class="line">16/11/02 03:51:34 WARN executor.CoarseGrainedExecutorBackend: An unknown (NM-304-SA5212M4-BIGDATA-519:44457) driver disconnected.</div><div class="line">16/11/02 03:51:34 ERROR executor.CoarseGrainedExecutorBackend: Driver 10.142.116.19:44457 disassociated! Shutting down.</div></pre></td></tr></table></figure></p>
<p>这个报错应该只是表象，原因应该出自driver，定位到driver： NM-304-SA5212M4-BIGDATA-519<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">16/11/02 03:51:34 WARN executor.CoarseGrainedExecutorBackend: An unknown (NM-304-SA5212M4-BIGDATA-519:44457) driver disconnected.</div><div class="line">16/11/02 03:51:34 ERROR executor.CoarseGrainedExecutorBackend: Driver 10.142.116.19:44457 disassociated! Shutting down.</div><div class="line">16/11/02 03:51:34 ERROR executor.CoarseGrainedExecutorBackend: RECEIVED SIGNAL 15: SIGTERM</div><div class="line">16/11/02 03:51:34 ERROR client.TransportClient: Failed to send RPC 5285936577870185909 to NM-304-SA5212M4-BIGDATA-519/10.142.116.19:44457: java.nio.channels.ClosedChannelException</div><div class="line">java.nio.channels.ClosedChannelException</div><div class="line">16/11/02 03:51:34 WARN netty.NettyRpcEndpointRef: Error sending message [message = Heartbeat(53,[Lscala.Tuple2;@519f65d9,BlockManagerId(53, NM-304-SA5212M4-BIGDATA-382, 29163))] <span class="keyword">in</span> 1 attempts</div><div class="line">java.io.IOException: Failed to send RPC 5285936577870185909 to NM-304-SA5212M4-BIGDATA-519/10.142.116.19:44457: java.nio.channels.ClosedChannelException</div><div class="line">        at org.apache.spark.network.client.TransportClient<span class="variable">$3</span>.operationComplete(TransportClient.java:239)</div><div class="line">        at org.apache.spark.network.client.TransportClient<span class="variable">$3</span>.operationComplete(TransportClient.java:226)</div><div class="line">        at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)</div><div class="line">        at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:567)</div><div class="line">        at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:424)</div><div class="line">        at io.netty.channel.AbstractChannel<span class="variable">$AbstractUnsafe</span>.safeSetFailure(AbstractChannel.java:801)</div><div class="line">        at io.netty.channel.AbstractChannel<span class="variable">$AbstractUnsafe</span>.write(AbstractChannel.java:699)</div><div class="line">        at io.netty.channel.DefaultChannelPipeline<span class="variable">$HeadContext</span>.write(DefaultChannelPipeline.java:1122)</div><div class="line">        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:633)</div><div class="line">        at io.netty.channel.AbstractChannelHandlerContext.access<span class="variable">$1900</span>(AbstractChannelHandlerContext.java:32)</div><div class="line">        at io.netty.channel.AbstractChannelHandlerContext<span class="variable">$AbstractWriteTask</span>.write(AbstractChannelHandlerContext.java:908)</div><div class="line">        at io.netty.channel.AbstractChannelHandlerContext<span class="variable">$WriteAndFlushTask</span>.write(AbstractChannelHandlerContext.java:960)</div><div class="line">        at io.netty.channel.AbstractChannelHandlerContext<span class="variable">$AbstractWriteTask</span>.run(AbstractChannelHandlerContext.java:893)</div><div class="line">        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:357)</div><div class="line">        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:357)</div><div class="line">        at io.netty.util.concurrent.SingleThreadEventExecutor<span class="variable">$2</span>.run(SingleThreadEventExecutor.java:111)</div><div class="line">        at java.lang.Thread.run(Thread.java:745)</div><div class="line">Caused by: java.nio.channels.ClosedChannelException</div></pre></td></tr></table></figure></p>
<p>找到driver的日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Container: container_1477044851292_468337_02_000004 on NM-304-SA5212M4-BIGDATA-519_8041</div><div class="line">=========================================================================================</div><div class="line">LogType:stderr</div><div class="line">Log Upload Time:星期三 十一月 02 03:51:47 +0800 2016</div><div class="line">LogLength:194115722</div><div class="line">Log Contents:</div></pre></td></tr></table></figure></p>
<p>根据时间定位：（vim中在driver中搜索 16\/11\/02 03:51:3）</p>
<p>发现问题出题的源头：<br>在 16/11/02 03:40 之前，driver的日志还是比较稳定的，但是在 此之后，频繁出现下述异常：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">16/11/01 15:11:43 INFO ApplicationMaster: Registered signal handlers <span class="keyword">for</span> [TERM, HUP, INT]</div><div class="line">16/11/01 15:11:43 INFO ApplicationMaster: ApplicationAttemptId: appattempt_1477044851292_468337_000002</div><div class="line">16/11/01 15:11:45 INFO SecurityManager: Changing view acls to: wzfw</div><div class="line">16/11/01 15:11:45 INFO SecurityManager: Changing modify acls to: wzfw</div><div class="line">16/11/01 15:11:45 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(wzfw); users with modify permissions: Set(wzfw)</div><div class="line">...</div><div class="line">16/11/02 03:41:17 WARN Client: Exception encountered <span class="keyword">while</span> connecting to the server : org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.token.SecretManager<span class="variable">$InvalidToken</span>): Invalid AMRMToken from appattempt_1477044851292_468337_000002</div><div class="line">16/11/02 03:41:17 INFO RetryInvocationHandler: Exception <span class="keyword">while</span> invoking allocate of class ApplicationMasterProtocolPBClientImpl over rm1. Trying to fail over immediately.</div><div class="line">org.apache.hadoop.security.token.SecretManager<span class="variable">$InvalidToken</span>: Invalid AMRMToken from appattempt_1477044851292_468337_000002</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)</div><div class="line">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)</div><div class="line">        at org.apache.hadoop.yarn.ipc.RPCUtil.instantiateException(RPCUtil.java:53)</div><div class="line">        at org.apache.hadoop.yarn.ipc.RPCUtil.unwrapAndThrowException(RPCUtil.java:104)</div><div class="line">        at org.apache.hadoop.yarn.api.impl.pb.client.ApplicationMasterProtocolPBClientImpl.allocate(ApplicationMasterProtocolPBClientImpl.java:79)</div><div class="line">        at sun.reflect.GeneratedMethodAccessor137.invoke(Unknown Source)</div><div class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:187)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:102)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy19</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.client.api.impl.AMRMClientImpl.allocate(AMRMClientImpl.java:278)</div><div class="line">        at org.apache.spark.deploy.yarn.YarnAllocator.allocateResources(YarnAllocator.scala:225)</div><div class="line">        at org.apache.spark.deploy.yarn.ApplicationMaster$<span class="variable">$anon</span><span class="variable">$1</span>.run(ApplicationMaster.scala:384)</div><div class="line">Caused by: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.token.SecretManager<span class="variable">$InvalidToken</span>): Invalid AMRMToken from appattempt_1477044851292_468337_000002</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1468)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1399)</div><div class="line">        at org.apache.hadoop.ipc.ProtobufRpcEngine<span class="variable">$Invoker</span>.invoke(ProtobufRpcEngine.java:232)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy18</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.api.impl.pb.client.ApplicationMasterProtocolPBClientImpl.allocate(ApplicationMasterProtocolPBClientImpl.java:77)</div><div class="line">        ... 9 more</div><div class="line">16/11/02 03:41:17 INFO ConfiguredRMFailoverProxyProvider: Failing over to rm2</div><div class="line">16/11/02 03:41:17 INFO RetryInvocationHandler: Exception <span class="keyword">while</span> invoking allocate of class ApplicationMasterProtocolPBClientImpl over rm2 after 1 fail over attempts. Trying to fail over after sleeping <span class="keyword">for</span> 22672ms.</div><div class="line">java.net.ConnectException: Call From NM-304-SA5212M4-BIGDATA-519/10.142.116.19 to NM-304-RH5885V3-BIGDATA-008:8030 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)</div><div class="line">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)</div><div class="line">        at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:791)</div><div class="line">        at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:731)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1472)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1399)</div><div class="line">        at org.apache.hadoop.ipc.ProtobufRpcEngine<span class="variable">$Invoker</span>.invoke(ProtobufRpcEngine.java:232)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy18</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.api.impl.pb.client.ApplicationMasterProtocolPBClientImpl.allocate(ApplicationMasterProtocolPBClientImpl.java:77)</div><div class="line">        at sun.reflect.GeneratedMethodAccessor137.invoke(Unknown Source)</div><div class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:187)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:102)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy19</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.client.api.impl.AMRMClientImpl.allocate(AMRMClientImpl.java:278)</div><div class="line">        at org.apache.spark.deploy.yarn.YarnAllocator.allocateResources(YarnAllocator.scala:225)</div><div class="line">        at org.apache.spark.deploy.yarn.ApplicationMaster$<span class="variable">$anon</span><span class="variable">$1</span>.run(ApplicationMaster.scala:384)</div><div class="line">Caused by: java.net.ConnectException: Connection refused</div><div class="line">        at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)</div><div class="line">        at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:739)</div><div class="line">        at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)</div><div class="line">        at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:530)</div><div class="line">        at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:494)</div><div class="line">        at org.apache.hadoop.ipc.Client<span class="variable">$Connection</span>.setupConnection(Client.java:607)</div><div class="line">        at org.apache.hadoop.ipc.Client<span class="variable">$Connection</span>.setupIOstreams(Client.java:705)</div><div class="line">        at org.apache.hadoop.ipc.Client<span class="variable">$Connection</span>.access<span class="variable">$2800</span>(Client.java:368)</div><div class="line">        at org.apache.hadoop.ipc.Client.getConnection(Client.java:1521)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1438)</div><div class="line">        ... 13 more</div><div class="line">16/11/02 03:41:20 INFO JobScheduler: Added <span class="built_in">jobs</span> <span class="keyword">for</span> time 1478029280000 ms</div></pre></td></tr></table></figure>
<p>然后这些日志持续出现了十分钟左右，当然spark的stage是依旧在增加，依旧在运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">16/11/02 03:51:27 INFO RetryInvocationHandler: Exception <span class="keyword">while</span> invoking allocate of class ApplicationMasterProtocolPBClientImpl over rm1 after 14 fail over attempts. Trying to fail over immediately.</div><div class="line">org.apache.hadoop.security.token.SecretManager<span class="variable">$InvalidToken</span>: Invalid AMRMToken from appattempt_1477044851292_468337_000002</div><div class="line">        at sun.reflect.GeneratedConstructorAccessor74.newInstance(Unknown Source)</div><div class="line">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)</div><div class="line">        at org.apache.hadoop.yarn.ipc.RPCUtil.instantiateException(RPCUtil.java:53)</div><div class="line">        at org.apache.hadoop.yarn.ipc.RPCUtil.unwrapAndThrowException(RPCUtil.java:104)</div><div class="line">        at org.apache.hadoop.yarn.api.impl.pb.client.ApplicationMasterProtocolPBClientImpl.allocate(ApplicationMasterProtocolPBClientImpl.java:79)</div><div class="line">        at sun.reflect.GeneratedMethodAccessor137.invoke(Unknown Source)</div><div class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:187)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:102)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy19</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.client.api.impl.AMRMClientImpl.allocate(AMRMClientImpl.java:278)</div><div class="line">        at org.apache.spark.deploy.yarn.YarnAllocator.allocateResources(YarnAllocator.scala:225)</div><div class="line">        at org.apache.spark.deploy.yarn.ApplicationMaster$<span class="variable">$anon</span><span class="variable">$1</span>.run(ApplicationMaster.scala:384)</div><div class="line">Caused by: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.token.SecretManager<span class="variable">$InvalidToken</span>): Invalid AMRMToken from appattempt_1477044851292_468337_000002</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1468)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1399)</div><div class="line">        at org.apache.hadoop.ipc.ProtobufRpcEngine<span class="variable">$Invoker</span>.invoke(ProtobufRpcEngine.java:232)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy18</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.api.impl.pb.client.ApplicationMasterProtocolPBClientImpl.allocate(ApplicationMasterProtocolPBClientImpl.java:77)</div><div class="line">        ... 9 more</div><div class="line">16/11/02 03:51:27 INFO ConfiguredRMFailoverProxyProvider: Failing over to rm2</div><div class="line">16/11/02 03:51:27 INFO RetryInvocationHandler: Exception <span class="keyword">while</span> invoking allocate of class ApplicationMasterProtocolPBClientImpl over rm2 after 15 fail over attempts. Trying to fail over after sleeping <span class="keyword">for</span> 31772ms.</div><div class="line">java.net.ConnectException: Call From NM-304-SA5212M4-BIGDATA-519/10.142.116.19 to NM-304-RH5885V3-BIGDATA-008:8030 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</div><div class="line">        at sun.reflect.GeneratedConstructorAccessor75.newInstance(Unknown Source)</div><div class="line">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)</div><div class="line">        at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:791)</div><div class="line">        at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:731)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1472)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1399)</div><div class="line">        at org.apache.hadoop.ipc.ProtobufRpcEngine<span class="variable">$Invoker</span>.invoke(ProtobufRpcEngine.java:232)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy18</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.api.impl.pb.client.ApplicationMasterProtocolPBClientImpl.allocate(ApplicationMasterProtocolPBClientImpl.java:77)</div><div class="line">        at sun.reflect.GeneratedMethodAccessor137.invoke(Unknown Source)</div><div class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">        at java.lang.reflect.Method.invoke(Method.java:606)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:187)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:102)</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy19</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.client.api.impl.AMRMClientImpl.allocate(AMRMClientImpl.java:278)</div><div class="line">        at org.apache.spark.deploy.yarn.YarnAllocator.allocateResources(YarnAllocator.scala:225)</div><div class="line">        at org.apache.spark.deploy.yarn.ApplicationMaster$<span class="variable">$anon</span><span class="variable">$1</span>.run(ApplicationMaster.scala:384)</div><div class="line">Caused by: java.net.ConnectException: Connection refused</div><div class="line">        at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)</div><div class="line">        at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:739)</div><div class="line">        at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)</div><div class="line">        at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:530)</div><div class="line">        at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:494)</div><div class="line">        at org.apache.hadoop.ipc.Client<span class="variable">$Connection</span>.setupConnection(Client.java:607)</div><div class="line">        at org.apache.hadoop.ipc.Client<span class="variable">$Connection</span>.setupIOstreams(Client.java:705)</div><div class="line">        at org.apache.hadoop.ipc.Client<span class="variable">$Connection</span>.access<span class="variable">$2800</span>(Client.java:368)</div><div class="line">        at org.apache.hadoop.ipc.Client.getConnection(Client.java:1521)</div><div class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1438)</div><div class="line">        ... 13 more</div></pre></td></tr></table></figure>
<p>然后在最后收到这个信号就挂了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">16/11/02 03:51:31 INFO WriteAheadLogManager  <span class="keyword">for</span> Thread: Attempting to clear 0 old <span class="built_in">log</span> files <span class="keyword">in</span> hdfs://ns/user/wzfw/checkpoint/receivedBlockMetadata older than 1478029880000:</div><div class="line">16/11/02 03:51:31 INFO InputInfoTracker: remove old batch metadata: 1478029870000 ms</div><div class="line">16/11/02 03:51:32 INFO ApplicationMaster: Final app status: FAILED, <span class="built_in">exit</span>Code: 16</div><div class="line">16/11/02 03:51:32 WARN ApplicationMaster: Reporter thread fails 2 time(s) <span class="keyword">in</span> a row.</div><div class="line">java.lang.reflect.UndeclaredThrowableException</div><div class="line">        at com.sun.proxy.<span class="variable">$Proxy19</span>.allocate(Unknown Source)</div><div class="line">        at org.apache.hadoop.yarn.client.api.impl.AMRMClientImpl.allocate(AMRMClientImpl.java:278)</div><div class="line">        at org.apache.spark.deploy.yarn.YarnAllocator.allocateResources(YarnAllocator.scala:225)</div><div class="line">        at org.apache.spark.deploy.yarn.ApplicationMaster$<span class="variable">$anon</span><span class="variable">$1</span>.run(ApplicationMaster.scala:384)</div><div class="line">Caused by: java.lang.InterruptedException: sleep interrupted</div><div class="line">        at java.lang.Thread.sleep(Native Method)</div><div class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:151)</div><div class="line">        ... 4 more</div><div class="line">16/11/02 03:51:32 ERROR ApplicationMaster: RECEIVED SIGNAL 15: SIGTERM</div><div class="line">16/11/02 03:51:33 INFO StreamingContext: Invoking stop(stopGracefully=<span class="literal">false</span>) from shutdown hook</div><div class="line">16/11/02 03:51:33 INFO JobGenerator: Stopping JobGenerator immediately</div></pre></td></tr></table></figure>
<p>后来又跑了一次，又因为同样的原因挂了，这次统计了时间：<br>slaver：<br>程序启动时间：16/11/02 22:58:27<br>程序结束时间： 16/11/03 22:51:34</p>
<p>driver<br>程序启动时间：16/11/02 22:58:18<br>遇到Kerberos问题时间： 16/11/03 22:41:23<br>程序结束时间：16/11/03 22:51:35</p>
<p>上面的时间是有不正确的地方的，因为我启动的时间肯定不是16/11/02 22:58:18（那个时候我已经回家了），我是在 11/02号当天上午启动，所以一个很可能的原因是，在22:58的这个时候，因为种种原因，程序崩溃重启，换了一个driver。</p>
<h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>google一下，网上查到有类似的原因：<br>storm on yarn在这个问题中存在一些bug；<br><a href="https://community.cloudera.com/t5/Batch-Processing-and-Workflow/Long-running-yarn-app-storm-yarn-exits-with-Invalid-AMRMToken/td-p/26717" target="_blank" rel="external">https://community.cloudera.com/t5/Batch-Processing-and-Workflow/Long-running-yarn-app-storm-yarn-exits-with-Invalid-AMRMToken/td-p/26717</a></p>
<p><a href="http://www.codeflitting.com/blog/article/%E4%B8%BA%E9%95%BF%E6%97%B6%E9%97%B4%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%20YARN" target="_blank" rel="external">http://www.codeflitting.com/blog/article/%E4%B8%BA%E9%95%BF%E6%97%B6%E9%97%B4%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%20YARN</a></p>
<p><a href="https://issues.apache.org/jira/browse/YARN-3103" target="_blank" rel="external">https://issues.apache.org/jira/browse/YARN-3103</a></p>
<p>根据日志以及网上资料，初步认为与Kerberos过期认证有关，AMRMToken无效，也就是说，在运行了一段时期（一天多）后，AM到RM的token无效了，然后无效很多次后，后续的任务分配不到container，所以程序就挂了，突然想到，出现这种错误的原因有以下几种；</p>
<ol>
<li><p>大约12个小时以前，SparkStreaming程序因为后面的flume测试守护进程，导致换了一个driver，是否是由于driver改动后，导致token失效？</p>
</li>
<li><p>yarn 2.6.0有一个相关的bug，<a href="https://issues.apache.org/jira/browse/YARN-3103" target="_blank" rel="external">https://issues.apache.org/jira/browse/YARN-3103</a><br>AMRMClientImpl.updateAMRMToken updates the token service before storing it to the credentials, so the token is mapped using the newly updated service rather than the empty service that was used when the RM created the original AMRM token. This leads to two AMRM tokens in the credentials and can still fail if the AMRMTokenSelector picks the wrong one.<br>In addition the AMRMClientImpl grabs the login user rather than the current user when security is enabled, so it’s likely the UGI being updated is not the UGI that will be used when reconnecting to the RM.<br>The end result is that AMs can fail with invalid token errors when trying to reconnect to an RM after a new AMRM secret has been activated.<br>大概意思是，更新token的时候会有两个token，如果选择了错误的token，就会导致出错</p>
</li>
<li><p>hadoop设置仅允许 hdfs 用户的委派令牌保留最大生存期 7 （default）天，这始终是不够的<br>需要修改一下yarn的配置，增加如下参数：</p>
</li>
</ol>
<p>将 ResourceManager 配置为对应 HDFS NameNode 的代理用户，以便在现有令牌超过其最大生存期时，ResourceManager 可以请求新的令牌。YARN 随后能够代表 hdfs 用户继续执行本地化和日志聚合</p>
<figure class="highlight xml"><figcaption><span>yarn-site.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.proxy-user-privileges.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">``` xml core-site.xml</div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.yarn.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.yarn.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后重启YARN和HDFS服务</p>
<h2 id="问题的暂时解决"><a href="#问题的暂时解决" class="headerlink" title="问题的暂时解决"></a>问题的暂时解决</h2><p>由于项目紧张，我写了一个脚本，每隔一分钟监控yarn上面运行的spark Streaming程序，如果挂了就重新启动起来，虽然也不影响后续的结果。后来观察，基本上是一天一挂或者两天一挂，不过这也太不靠谱了。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>后来发现都不是上述原因，同事的前爱奇艺的同事遇到过同样的问题：原因是：<br><strong> NameNode采用了HA后，AM与Namenode通信使用的token的结构变为HA token,HA token中会有两个private token，代表两台namenode服务。 当AM更新token时，会调用hadoop客户端的addDelegationTokens更新token。但addDelegationTokens存在问题，其只会更新HA token，不会更新private token，而AM向NameNode发起请求时，会使用private token，导致出现异常。</strong></p>
<p>发生这个问题需要以下几个条件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. NameNode HA is enabled.</div><div class="line">2. Kerberos is enabled.</div><div class="line">3. HDFS Delegation Token (not Keytab or TGT) is used to communicate with NameNode.</div><div class="line">4. We want to update the HDFS Delegation Token <span class="keyword">for</span> long running applicatons. HDFS Client will generate private tokens <span class="keyword">for</span> each NameNode. When we update the HDFS Delegation Token, these private tokens will not be updated, <span class="built_in">which</span> will cause token expired.</div></pre></td></tr></table></figure></p>
<h3 id="hadoop修复方案"><a href="#hadoop修复方案" class="headerlink" title="hadoop修复方案"></a>hadoop修复方案</h3><p>这是hadoop的一个bug，在hadoop 2.9的新版本中修复了这个问题，所以，给hadoop打个patch就好了：</p>
<p>Hadoop: <a href="https://issues.apache.org/jira/browse/HDFS-9276" target="_blank" rel="external">https://issues.apache.org/jira/browse/HDFS-9276</a><br>hadoop2.9修复了private token不更新问题</p>
<h3 id="spark修复方案"><a href="#spark修复方案" class="headerlink" title="spark修复方案"></a>spark修复方案</h3><p>Spark： <a href="https://github.com/apache/spark/pull/9168/files" target="_blank" rel="external">https://github.com/apache/spark/pull/9168/files</a><br>主动使FileSystem对象关闭，再重新建立。FileSystem对象建立期间会重新设置private token</p>
<p>由于hadoop变动对生产环境的影响很大，所以我们选择了spark的修复方案，修改了源码后打包编译上线，问题解决；</p>
<p>感谢聪哥，也感谢那位在爱奇艺的发现并解决了这个问题的大神，没有你们，我要惨了。</p>
<p>与Kerberos对干的日子很酸爽</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>还有一个方案可以解决这个问题，可以不需要修改spark源码，提交的时候增加参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--conf spark.hadoop.fs.hdfs.impl.disable.cache=true</div></pre></td></tr></table></figure></p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p><a href="http://mkuthan.github.io/blog/2016/09/30/spark-streaming-on-yarn/" target="_blank" rel="external">http://mkuthan.github.io/blog/2016/09/30/spark-streaming-on-yarn/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark踩坑之Streaming程序实时读写哨兵模式的Redis]]></title>
      <url>http://flume.cn/2016/11/24/Spark%E8%B8%A9%E5%9D%91%E4%B9%8BStreaming%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%86%99%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E7%9A%84Redis/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Spark Streaming程序使用Redis保存出现在景区中的用户，用以识别用户是否是第一次进入景区，要分别进行读操作和写操作，为了程序的高可用性，Redis我们使用的是哨兵模式（满满的，都是坑）；</p>
<p>Redis哨兵模式，顾名思义，就是Redis有三台机器作为一主两备，然后有三个哨兵（三个端口），告诉你Master是哪一台，然后你再去访问master，这样的话，一台机器由于负载发生了主备切换，对我们来说，对外的端口是统一的（哨兵）；</p>
<p>我们Redis的版本是3.2.4，连接Redis，我们的程序使用了开源的jedis作为redis的连接器，jedis的版本是2.8.1，关于jedis的使用，我参考的是jedis源码的单元测试程序，这个可以在github中找到。</p>
<h2 id="踩坑历程"><a href="#踩坑历程" class="headerlink" title="踩坑历程"></a>踩坑历程</h2><h3 id="hgetAll不能读取太大量的数据"><a href="#hgetAll不能读取太大量的数据" class="headerlink" title="hgetAll不能读取太大量的数据"></a>hgetAll不能读取太大量的数据</h3><p>在设计程序的时候，我们使用了hash作为数据的存储结构，该hash可以存储40亿条记录，一开始，为了减少对Redis的压力，我们选择的策略是对于每个batch，我们都统一读取全部的数据，然后在内存中筛选计算的方法，可以极大减少对redis的访问；</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> sentinelPool = <span class="type">InternalRedisClient</span>.getSentinelPool</div><div class="line"><span class="keyword">var</span> phoneMap: util.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>]()</div><div class="line"><span class="comment">// printLog.debug( "sentinelPool NumIdle0: " + sentinelPool.getNumIdle + " Active0: " + sentinelPool.getNumActive)</span></div><div class="line"><span class="keyword">var</span> jedis1: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  jedis1 = sentinelPool.getResource</div><div class="line">  <span class="comment">// printLog.debug( "sentinelPool NumIdle1: " + sentinelPool.getNumIdle + " Active1: " + sentinelPool.getNumActive)</span></div><div class="line">  <span class="comment">// 这里当redis中该HSet数据量很大的时候（五十万条），一次读取需要很长时间，对性能影响很大，</span></div><div class="line">  <span class="comment">// 故当数据条数大于一定值的时候，不用此方法</span></div><div class="line">  phoneMap = jedis1.hgetAll(redisHashKey)</div><div class="line">  <span class="comment">// printLog.debug( "sentinelPool NumIdle3: " + sentinelPool.getNumIdle + " Active3: " + sentinelPool.getNumActive)</span></div><div class="line">  printLog.debug(<span class="string">"phoneSet_1: "</span> + phoneMap)</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="keyword">if</span> (jedis1 != <span class="literal">null</span>) &#123;</div><div class="line">    printLog.debug(<span class="string">"close jedis1"</span>)</div><div class="line">    jedis1.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">但是当程序运行一段时间后，发现延迟很高，我们也没有想到数据量会有这么大，发现当数据量超过<span class="number">10</span>W条这个级别后，每次读取全部数据的耗时将会很大，而且对redis的压力反而变大了，所以我们弃用了一次读取所有数据的方法，但是，如果数据量少与<span class="number">10</span>万条级别的话，一次读取，也是值得考虑的；</div><div class="line"></div><div class="line">### jedis的sentinel连接池在spark <span class="type">Streaming</span>中连接池无法释放的问题</div><div class="line"></div><div class="line">我们一开始采用的是通过jedis的sentinel连接池的方法连接redis；</div><div class="line">在连接哨兵模式的redis的时候，由于<span class="type">SparkStreaming</span>程序中每个container并不会关闭，导致在spark的transform方法中，jedis sentinel 连接池在<span class="type">Streaming</span>下出现连接池资源释放不了的bug，为了解决这个问题，我们弃用了jedis的sentinel连接池，每<span class="number">10</span>秒手动询问redis的哨兵<span class="type">Master</span>的地址，然后手动与redis进行连接，最终解决了这个问题。</div><div class="line">手动实现jedis sentinel的连接的代码如下：</div><div class="line"></div><div class="line">``` scala</div><div class="line"><span class="comment">// 由于redis sentinel 建立连接池不释放的坑，最后弃用连接池，自己实现寻找master的逻辑</span></div><div class="line"><span class="keyword">val</span> masterHostPort = getRedisMasterHostPortList(redisConf)</div><div class="line"><span class="keyword">val</span> masterHost = masterHostPort(<span class="number">0</span>)</div><div class="line"><span class="keyword">val</span> masterPort = masterHostPort(<span class="number">1</span>).toInt</div><div class="line">...</div><div class="line"><span class="comment">// 得到master后，就可以直接建立redis连接了</span></div><div class="line"><span class="keyword">val</span> paRdd3: <span class="type">Iterator</span>[(<span class="type">String</span>, (<span class="type">String</span>, <span class="type">String</span>))] = paRdd2.flatMap &#123; eachKV =&gt;</div><div class="line">。。。</div><div class="line">	<span class="keyword">var</span> jedis1: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line">	<span class="keyword">var</span> redis1Val: <span class="type">String</span> = <span class="literal">null</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">	  jedis1 = <span class="keyword">new</span> <span class="type">Jedis</span>(masterHost, masterPort)</div><div class="line">	  redis1Val = jedis1.hget(redisHashKey, mdn)</div><div class="line">	&#125; <span class="keyword">catch</span> &#123;</div><div class="line">	  <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; &#123;</div><div class="line">	    printLog.error(<span class="string">"jedis1 error：e"</span> + e)</div><div class="line">	  &#125;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	  <span class="keyword">if</span> (jedis1 != <span class="literal">null</span>) &#123;</div><div class="line">	    jedis1.close()</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>询问哨兵Master在哪里的代码如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 得到redis sentinel 模式的master信息</div><div class="line">    *</div><div class="line">    * @param redisConf</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getRedisMasterHostPortList</span></span>(redisConf: <span class="type">RedisConf</span>): util.<span class="type">List</span>[<span class="type">String</span>] = &#123;</div><div class="line">    printLog.debug(<span class="string">"Trying to find master from available Sentinels..."</span>)</div><div class="line">    <span class="comment">//    @transient var masterFound: Boolean = false</span></div><div class="line">    <span class="keyword">var</span> masterFound: <span class="type">Boolean</span> = <span class="literal">false</span></div><div class="line">    <span class="keyword">val</span> sentinelList: <span class="type">Array</span>[<span class="type">String</span>] = redisConf.sentinels.split(<span class="string">"\\|"</span>)</div><div class="line">    <span class="keyword">for</span> (sentinel &lt;- sentinelList <span class="keyword">if</span> !masterFound) &#123;</div><div class="line">      <span class="keyword">var</span> jedis: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        jedis = <span class="keyword">new</span> <span class="type">Jedis</span>(sentinel.split(<span class="string">":"</span>)(<span class="number">0</span>), sentinel.split(<span class="string">":"</span>)(<span class="number">1</span>).toInt)</div><div class="line">        <span class="keyword">val</span> masterAddr: util.<span class="type">List</span>[<span class="type">String</span>] = jedis.sentinelGetMasterAddrByName(redisConf.masterName)</div><div class="line">        <span class="comment">// connected to sentinel...</span></div><div class="line">        <span class="keyword">if</span> (masterAddr == <span class="literal">null</span> || masterAddr.size != <span class="number">2</span>) &#123;</div><div class="line">          printLog.error(<span class="string">"Can not get master addr, master name: "</span> + redisConf.masterName + <span class="string">". Sentinel: "</span> + sentinel + <span class="string">"."</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          masterFound = <span class="literal">true</span></div><div class="line">          printLog.debug(<span class="string">"masterAddr: "</span> + masterAddr)</div><div class="line">          <span class="keyword">return</span> masterAddr</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="keyword">case</span> e: <span class="type">JedisException</span> =&gt; &#123;</div><div class="line">          <span class="comment">// resolves #1036, it should handle JedisException there's another chance</span></div><div class="line">          <span class="comment">// of raising JedisDataException</span></div><div class="line">          printLog.error(<span class="string">"Cannot get master address from sentinel running @ "</span> + sentinel + <span class="string">". Reason: "</span> + e + <span class="string">". Trying next one."</span>)</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</div><div class="line">          jedis.close()</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="Redis的压力负载"><a href="#Redis的压力负载" class="headerlink" title="Redis的压力负载"></a>Redis的压力负载</h3><p>后来我们对程序进行了加压测试，发现当压力增大后redis的主备切换非常频繁，原来在redis中，slaver会定时跟master通信，询问其是否健康，如果不健康，slaver就会强制进行主备切换，当redis访问频繁的时候，master来不及及时响应slaver的请求，就会导致主备切换频繁，解决这个问题的方法是修改询问时间，默认是 5s，适度调高就可以了。</p>
<p>当然redis还有一些其它优化参数，这里不做讨论；目前可以支持四千万的数据，</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/xetorthio/jedis" target="_blank" rel="external">https://github.com/xetorthio/jedis</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark踩坑之Streaming程序实时读取数据库]]></title>
      <url>http://flume.cn/2016/11/24/Spark%E8%B8%A9%E5%9D%91%E4%B9%8BStreaming%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个SparkStreaming的项目，由于需要从Mysql数据库中实时读取一些信息，然后生成特定的数据结构进行动态的处理，在此过程中踩了一些坑，谨记：</p>
<h4 id="初始方案"><a href="#初始方案" class="headerlink" title="初始方案"></a>初始方案</h4><p>在rdd的每个partition中创建一个内部数据库连接池单例对象InternalMDBManager，然后使用一个连接池</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> dStream2: <span class="type">DStream</span>[(<span class="type">String</span>, (<span class="type">String</span>, <span class="type">String</span>))] = dStream1.transform &#123;</div><div class="line">  rdd1 =&gt; &#123;</div><div class="line">    <span class="keyword">val</span> numPartitions = rdd1.getNumPartitions</div><div class="line">    printLog.info(<span class="string">"numPartitions: "</span> + numPartitions)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> rdd3: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">String</span>, <span class="type">String</span>))] = rdd1.mapPartitions &#123;</div><div class="line">      paRdd1 =&gt; &#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">          * Author: wangxiaogang</div><div class="line">          *</div><div class="line">          * 由于需要在spark中分布式读取Mysql的数据，所以需要创建可以分布式分发的单例对象连接池</div><div class="line">          */</div><div class="line">        <span class="class"><span class="keyword">object</span> <span class="title">InternalMDBManager</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">          <span class="meta">@transient</span> <span class="keyword">private</span> <span class="keyword">var</span> pool: <span class="type">ComboPooledDataSource</span> = _</div><div class="line"></div><div class="line">          <span class="comment">/**</span></div><div class="line">            * 从连接池获取连接</div><div class="line">            *</div><div class="line">            * @return</div><div class="line">            */</div><div class="line">          <span class="function"><span class="keyword">def</span> <span class="title">getConnection</span></span>: <span class="type">Connection</span> = &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              pool.getConnection()</div><div class="line">            &#125; <span class="keyword">catch</span> &#123;</div><div class="line">              <span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; ex.printStackTrace()</div><div class="line">                <span class="literal">null</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="function"><span class="keyword">def</span> <span class="title">closeConnection</span></span>(connection: <span class="type">Connection</span>): <span class="type">Unit</span> = &#123;</div><div class="line">            <span class="keyword">if</span> (!connection.isClosed) connection.close()</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">/**</span></div><div class="line">            * 创建连接池</div><div class="line">            *</div><div class="line">            * @param sqlPoolConf</div><div class="line">            */</div><div class="line">          <span class="function"><span class="keyword">def</span> <span class="title">makePool</span></span>(sqlPoolConf: <span class="type">SqlPoolConf</span>): <span class="type">Unit</span> = &#123;</div><div class="line">            <span class="keyword">if</span> (pool == <span class="literal">null</span>) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                pool = <span class="keyword">new</span> <span class="type">ComboPooledDataSource</span>(<span class="literal">true</span>)</div><div class="line">                pool.setJdbcUrl(sqlPoolConf.jdbcUrl)</div><div class="line">                pool.setDriverClass(sqlPoolConf.driverClass)</div><div class="line">                pool.setUser(sqlPoolConf.user)</div><div class="line">                pool.setPassword(sqlPoolConf.password)</div><div class="line">                pool.setMaxPoolSize(sqlPoolConf.maxPoolSize)</div><div class="line">                pool.setMinPoolSize(sqlPoolConf.minPoolSize)</div><div class="line">                pool.setAcquireIncrement(sqlPoolConf.acquireIncrement)</div><div class="line">                pool.setInitialPoolSize(sqlPoolConf.initialPoolSize)</div><div class="line">                pool.setMaxIdleTime(sqlPoolConf.maxIdleTime)</div><div class="line">              &#125; <span class="keyword">catch</span> &#123;</div><div class="line">                <span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; ex.printStackTrace()</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="type">InternalRedisClient</span>.makeSentinelPool(redisConf)</div><div class="line"></div><div class="line">        <span class="type">InternalMDBManager</span>.makePool(sqlPoolConf)</div><div class="line">        <span class="keyword">val</span> sqlConn = sqlPool.getConnection</div><div class="line">        <span class="keyword">val</span> sqlConn = <span class="type">InternalMDBManager</span>.getConnection</div><div class="line"></div><div class="line">        。。。</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法听起来是极好的，在每个jvm中创建一个连接池，然后不同的批数据使用共同的连接池，但是在实践的过程中发现，在foreachRDD中使用这种方法是可以的，网上有很多类似的例子；<br>但是在transform方法中，如果在map，flatMap，filter等方法外面建立连接池，会出现连接池无法释放的问题，无论你如何使用finally释放，都释放不了；<br>解决方法是<strong>避免使用连接池，将数据库建立与释放操作封装到同一个函数里</strong>，在我的问题里，因为对数据库的操作不会很频繁，所以不需要引入连接池，这样将会及时释放数据库资源。</p>
<p>最终方案是如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPositionSubDataMap</span></span>(sqlPoolConf: <span class="type">SqlPoolConf</span>): util.<span class="type">HashMap</span>[<span class="type">Int</span>, util.<span class="type">LinkedList</span>[<span class="type">PositionSubData</span>]] = &#123;</div><div class="line"><span class="keyword">val</span> currentTime: <span class="type">Long</span> = getCurrentTime</div><div class="line"><span class="comment">// todo: 如果数据量比较大的话，判断时间语句直接放到mysql查询的时候</span></div><div class="line"><span class="keyword">val</span> sqlStr =</div><div class="line"><span class="string">""</span><span class="string">"some sqls"</span><span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment">// 这里告诉我们，写代码的时候不要盲目建立资源池，不要简单的东西复杂化</span></div><div class="line"><span class="keyword">val</span> url = sqlPoolConf.jdbcUrl</div><div class="line"><span class="keyword">val</span> user = sqlPoolConf.user</div><div class="line"><span class="keyword">val</span> password = sqlPoolConf.password</div><div class="line"><span class="keyword">var</span> sqlConn: <span class="type">Connection</span> = <span class="literal">null</span></div><div class="line"><span class="comment">//    var pstmt: PreparedStatement = null</span></div><div class="line"><span class="comment">//    var rs: ResultSet = null</span></div><div class="line"><span class="keyword">val</span> positionSubDataMap: util.<span class="type">HashMap</span>[<span class="type">Int</span>, util.<span class="type">LinkedList</span>[<span class="type">PositionSubData</span>]] = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">Int</span>, util.<span class="type">LinkedList</span>[<span class="type">PositionSubData</span>]]()</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  sqlConn = <span class="type">DriverManager</span>.getConnection(url, user, password)</div><div class="line">  <span class="keyword">val</span> pstmt: <span class="type">PreparedStatement</span> = sqlConn.prepareStatement(sqlStr)</div><div class="line">  <span class="keyword">val</span> rs: <span class="type">ResultSet</span> = pstmt.executeQuery()</div><div class="line">  <span class="comment">//    var positionSubDataList = ArrayBuffer[PositionSubData]</span></div><div class="line"></div><div class="line">  <span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">    <span class="keyword">val</span> subId: <span class="type">Long</span> = rs.getLong(<span class="string">"sub_id"</span>)</div><div class="line">    <span class="keyword">val</span> spId: <span class="type">String</span> = rs.getString(<span class="string">"sp_id"</span>)</div><div class="line">    <span class="keyword">val</span> locationId: <span class="type">String</span> = rs.getString(<span class="string">"location_id"</span>)</div><div class="line">    <span class="keyword">val</span> provId: <span class="type">String</span> = rs.getString(<span class="string">"prov_id"</span>)</div><div class="line">    <span class="keyword">val</span> cityCode: <span class="type">String</span> = rs.getString(<span class="string">"city_code"</span>)</div><div class="line">    <span class="keyword">val</span> intervalTime: <span class="type">Int</span> = rs.getInt(<span class="string">"interv"</span>)</div><div class="line">    <span class="keyword">val</span> available: <span class="type">Int</span> = rs.getInt(<span class="string">"available"</span>)</div><div class="line">    <span class="keyword">val</span> startTime = rs.getLong(<span class="string">"start_time"</span>)</div><div class="line">    <span class="keyword">val</span> endTime = rs.getLong(<span class="string">"end_time"</span>)</div><div class="line">    <span class="keyword">val</span> centerLongitude: <span class="type">Double</span> = rs.getDouble(<span class="string">"center_longitude"</span>)</div><div class="line">    <span class="keyword">val</span> centerLatitude: <span class="type">Double</span> = rs.getDouble(<span class="string">"center_latitude"</span>)</div><div class="line">    <span class="keyword">val</span> radius: <span class="type">Int</span> = rs.getInt(<span class="string">"radius"</span>)</div><div class="line">    <span class="keyword">val</span> shape: <span class="type">String</span> = rs.getString(<span class="string">"shape"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//      printLog.info("cityCode:" + cityCode)</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> positionSubData: <span class="type">PositionSubData</span> = <span class="type">PositionSubData</span>(subId, spId, locationId, provId, cityCode, intervalTime,</div><div class="line">      available, startTime, endTime, centerLongitude, centerLatitude, radius, shape)</div><div class="line">    <span class="comment">//      printLog.info("positionSubData: " + positionSubData)</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((startTime &lt; currentTime) &amp;&amp; (endTime &gt; currentTime)) &#123;</div><div class="line">      <span class="comment">//        positionSubDataList. += positionSubData</span></div><div class="line">      <span class="keyword">val</span> cityCodeArray: <span class="type">Array</span>[<span class="type">String</span>] = cityCode.split(<span class="string">"\\|"</span>)</div><div class="line">      <span class="keyword">for</span> (eachCityCode &lt;- cityCodeArray) &#123;</div><div class="line">        <span class="keyword">if</span> (positionSubDataMap.get(eachCityCode.toInt) == <span class="literal">null</span>) &#123;</div><div class="line">          <span class="comment">// 代表以该城市为key没有其它景区</span></div><div class="line">          <span class="keyword">val</span> positionSubDataList: util.<span class="type">LinkedList</span>[<span class="type">PositionSubData</span>] = <span class="keyword">new</span> util.<span class="type">LinkedList</span>[<span class="type">PositionSubData</span>]</div><div class="line">          positionSubDataList.add(positionSubData)</div><div class="line">          <span class="comment">//            printLog.info("1positionSubDataList：" + positionSubDataList)</span></div><div class="line">          positionSubDataMap.put(eachCityCode.toInt, positionSubDataList)</div><div class="line">          <span class="comment">//            printLog.info("1positionSubDataMap: " + positionSubDataMap)</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 代表以该城市为key有其它景区，并且已经记录在案</span></div><div class="line">          <span class="keyword">val</span> positionSubDataList: util.<span class="type">LinkedList</span>[<span class="type">PositionSubData</span>] = positionSubDataMap.get(eachCityCode.toInt)</div><div class="line">          positionSubDataList.add(positionSubData)</div><div class="line">          <span class="comment">//            printLog.info("2positionSubDataList：" + positionSubDataList)</span></div><div class="line">          <span class="comment">//            printLog.info("2eachCityCode.toInt:" + eachCityCode.toInt)</span></div><div class="line">          positionSubDataMap.put(eachCityCode.toInt, positionSubDataList)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</div><div class="line">    rs.close()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</div><div class="line">    pstmt.close()</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">  <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; &#123;</div><div class="line">    printLog.error(<span class="string">"数据库连接错误：e"</span> + e)</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="keyword">if</span> (sqlConn != <span class="literal">null</span>) &#123;</div><div class="line">    sqlConn.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">positionSubDataMap</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，Streaming程序中动态连接数据库要谨慎，要及时查看数据库的连接状态，看看数据库连接有没有被及时释放，它不会马上就报错，但随着连接数到达数据库的最高值的时候就会出错，检测不及时，等上了生产再出问题，就后悔莫及。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>在foreachRDD中建立连接池的例子<br><a href="http://www.cnblogs.com/xlturing/p/spark.html" target="_blank" rel="external">http://www.cnblogs.com/xlturing/p/spark.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scala通过slick连接数据库]]></title>
      <url>http://flume.cn/2016/10/31/scala%E9%80%9A%E8%BF%87slick%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>（持续更新）<br>由于Spark是由scala语言开发的，scala语言可以使用到所有java语言中的特性，所以spark连接数据库（比如Mysql）有很多种方法，这里记录两种我使用到的高级用法以及一些教训，分别是：</p>
<ol>
<li>使用Slick优雅地连接数据库；</li>
<li>如何使用SparkStreaming实时地获取数据库中的内容；</li>
<li>连接数据库过程中的踩坑集锦。</li>
</ol>
<h2 id="使用Slick优雅地连接数据库"><a href="#使用Slick优雅地连接数据库" class="headerlink" title="使用Slick优雅地连接数据库"></a>使用Slick优雅地连接数据库</h2><p>如果使用scala语言，当然可以想到的是，通过java连接数据库的方式连接数据库是没有问题的，但是scala语言有没有自己更加优雅地方法连接数据库呢？答案是肯定的，非常推荐使用：Slick</p>
<h3 id="Slick简介"><a href="#Slick简介" class="headerlink" title="Slick简介"></a>Slick简介</h3><p>Slick 是 TypeSafe 推出的 Scala 数据库访问库。开发者可以使用 Scala 语言风格来编写数据查询，而不是用 SQL 。 Slick 对于 Scala 来说，有如 LINQ 至于 C#，或者类似于其它平台上的 ORM 系统，它使用应用使用数据库有如使用 Scala 内置的集合类型（比如列表，集合等）一样方便。当然如有需要你还是可以直接使用 SQL 语句来查询数据库。<br>使用 Slick 而不直接使用 SQL 语句，可以使用编译器帮助发现一些类型错误，同时 Slick 可以为不同的后台数据库类型生成查询。它具有一些如下的特性：</p>
<ol>
<li>Scala </li>
</ol>
<p>所有查询，表格和字段映射，以及类型都采用普通的 Scala 语法。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffees</span>(<span class="params">tag: <span class="type">Tag</span></span>) <span class="keyword">extends</span> <span class="title">Table</span>[(<span class="type">String</span>, <span class="type">Double</span>)](<span class="params">tag, "<span class="type">COFFEES</span>"</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span> </span>= column[<span class="type">String</span>](<span class="string">"COF_NAME"</span>, <span class="type">O</span>.<span class="type">PrimaryKey</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span> </span>= column[<span class="type">Double</span>](<span class="string">"PRICE"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">*</span> </span>= (name, price)</div><div class="line">&#125;</div><div class="line"><span class="keyword">val</span> coffees = <span class="type">TableQuery</span>[<span class="type">Coffees</span>]</div></pre></td></tr></table></figure></p>
<p>数据访问接口类型 Scala 的集合类型<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Query that only returns the "name" column</span></div><div class="line">coffees.map(_.name)</div><div class="line"></div><div class="line"><span class="comment">// Query that does a "where price &lt; 10.0"</span></div><div class="line">coffees.filter(_.price &lt; <span class="number">10.0</span>)</div></pre></td></tr></table></figure></p>
<ol>
<li>类型安全</li>
</ol>
<p>你使用的 IDE 可以帮助你写代码 在编译时而无需到运行时就可以发现一些错误<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The result of "select PRICE from COFFEES" is a Seq of Double</span></div><div class="line"><span class="comment">// because of the type safe column definitions</span></div><div class="line"><span class="keyword">val</span> coffeeNames: <span class="type">Seq</span>[<span class="type">Double</span>] = coffees.map(_.price).list</div><div class="line"></div><div class="line"><span class="comment">// Query builders are type safe:</span></div><div class="line">coffees.filter(_.price &lt; <span class="number">10.0</span>)</div><div class="line"><span class="comment">// Using a string in the filter would result in a compilation error</span></div></pre></td></tr></table></figure></p>
<ol>
<li>可以组合</li>
</ol>
<p>查询接口为函数，这些函数可以多次组合和重用。可以使用函数式的方式来访问数据库</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a query for coffee names with a price less than 10, sorted by name</span></div><div class="line">coffees.filter(_.price &lt; <span class="number">10.0</span>).sortBy(_.name).map(_.name)</div><div class="line"><span class="comment">// The generated SQL is equivalent to:</span></div><div class="line"><span class="comment">// select name from COFFEES where PRICE &lt; 10.0 order by NAME</span></div></pre></td></tr></table></figure>
<ol>
<li><p>支持几乎所有常见的数据库</p>
<ul>
<li>DB2 (via slick-extensions)</li>
<li>Derby/JavaDB</li>
<li>H2</li>
<li>HSQLDB/HyperSQL</li>
<li>Microsoft Access</li>
<li>Microsoft SQL Server (via slick-extensions)</li>
<li>MySQL</li>
<li>Oracle (via slick-extensions)</li>
<li>PostgreSQL</li>
<li>SQLite</li>
</ul>
</li>
</ol>
<p>对于其它的一些数据库类型 Slick 也提供了有限的支持。</p>
<p>关于Slick的具体教程以及API，可以参阅<br><a href="http://slick.lightbend.com/" target="_blank" rel="external">Slick官网</a><br><a href="http://wiki.jikexueyuan.com/project/slick-guide/" target="_blank" rel="external">极客学院Slick中文教程</a><br>以及google</p>
<h3 id="如何使用到Spark项目中"><a href="#如何使用到Spark项目中" class="headerlink" title="如何使用到Spark项目中"></a>如何使用到Spark项目中</h3><p>以我自己摸索的方法为例，当然会有更多方法</p>
<h4 id="配置文件中配置数据库连接信息"><a href="#配置文件中配置数据库连接信息" class="headerlink" title="配置文件中配置数据库连接信息"></a>配置文件中配置数据库连接信息</h4><p>Slick默认会读取项目顶层的配置文件，当然配置文件的路径可以手动指定，默认在顶层的配置文件路径下，我的配置文件在 <code>resources/application.conf</code>中：</p>
<figure class="highlight plain"><figcaption><span>resources/application.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// todo: 使其变成可以从外部文件载入</div><div class="line">// 开发环境Mysql</div><div class="line">mysql = &#123;</div><div class="line">  url = &quot;jdbc:mysql://someIp:3306/someDb?useUnicode=true&amp;characterEncoding=utf-8&quot;</div><div class="line">  driver = &quot;com.mysql.jdbc.Driver&quot;</div><div class="line">  connectionPool = disabled</div><div class="line">  keepAliveConnection = true</div><div class="line">  databaseName = &quot;someDb&quot;</div><div class="line">  user = &quot;user&quot;</div><div class="line">  password = &quot;password&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="定义数据库表格对应的case-class"><a href="#定义数据库表格对应的case-class" class="headerlink" title="定义数据库表格对应的case class"></a>定义数据库表格对应的case class</h4><p>比如：该AppFrame是我定义的一个应用框架的样例类，与数据库中的字段有对应关系<br>PS：AppFrame的设置是为了将一切配置写到数据库中，这样可以实现项目的热切换，一套程序可以不需要重新编译而使用到不同的环境不同的策略中，亲测有效。</p>
<figure class="highlight scala"><figcaption><span>bean/AppFrame.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Author: wangxiaogang</div><div class="line">  * Date: 2016/10/1</div><div class="line">  * Email: wangxiaogang@chinatelecom.cn</div><div class="line">  * 应用的整体描述，包括 appId, app名称，输入类型，输入类型详细配置表，输出类型，输出类型详细配置表</div><div class="line">  */</div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">AppFrame</span> (<span class="params"></span></span></div><div class="line">               id: <span class="type">Int</span>,</div><div class="line">               name: <span class="type">String</span>,</div><div class="line">               inputStr: <span class="type">String</span>,</div><div class="line">               // 代表对应的输入在所在类型的输入中的id</div><div class="line">               inputId: <span class="type">Int</span>,</div><div class="line">               outputStr: <span class="type">String</span>,</div><div class="line">               outId: <span class="type">Int</span>,</div><div class="line">               redisStr: <span class="type">String</span>,</div><div class="line">               redisId: <span class="type">Int</span>,</div><div class="line">               sqlPoolStr: <span class="type">String</span>,</div><div class="line">               sqlPoolId:<span class="type">Int</span></div><div class="line">               )&#123;&#125;</div></pre></td></tr></table></figure>
<h4 id="使用Slick编写读取数据库的逻辑"><a href="#使用Slick编写读取数据库的逻辑" class="headerlink" title="使用Slick编写读取数据库的逻辑"></a>使用Slick编写读取数据库的逻辑</h4><p>这里就是slick的优势，非常简单</p>
<figure class="highlight scala"><figcaption><span>dao/MysqlDao.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Author: wangxiaogang</div><div class="line">  * Date: 2016/9/29</div><div class="line">  * Email: wangxiaogang@chinatelecom.cn</div><div class="line">  * 与Mysql数据库的交互类，使用了Slick方式</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">MysqlDao</span> </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">    * 通过appId获取到应用的整体描述，包括 appId, 输入类型，输入类型详细配置表，输出类型，输出类型详细配置表</div><div class="line">    * 这里简单试验大数据实时处理框架的构思是否可行</div><div class="line">    *</div><div class="line">    * @param appId</div><div class="line">    * @return</div><div class="line">    * @todo : 目前只配置输入类型与输出类型的配置，以后尽量把所有数据处理方案都能以配置的形式写入数据库中</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getAppFrame</span></span>(appId: <span class="type">Int</span>): <span class="type">AppFrame</span> = &#123;</div><div class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> getResult = <span class="type">GetResult</span>(r =&gt;</div><div class="line">      <span class="type">AppFrame</span>(r.nextInt(), r.nextString(), r.nextString(), r.nextInt(), r.nextString(), r.nextInt(), r.nextString(),</div><div class="line">        r.nextInt(),  r.nextString(), r.nextInt()))</div><div class="line">    <span class="keyword">val</span> q = <span class="string">sql""</span><span class="string">"SELECT * FROM appframe WHERE id = $appId"</span><span class="string">""</span>.as[<span class="type">AppFrame</span>]</div><div class="line"></div><div class="line">    <span class="keyword">val</span> db = <span class="type">Database</span>.forConfig(<span class="string">"mysql"</span>)</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">val</span> fu = db.run(q)</div><div class="line">      <span class="type">Await</span>.result(fu, <span class="number">10</span> seconds).head</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      db.close()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，就这么简单几行，就能连接数据库了，并且将其转化为对应的样例类，是不是超级好用<br>当然，我只是使用了一点皮毛，它还有很多有用的特性我没有使用到。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://slick.lightbend.com/" target="_blank" rel="external">http://slick.lightbend.com/</a><br><a href="http://wiki.jikexueyuan.com/project/slick-guide/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/slick-guide/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记HashMap遇到的java.util.ConcurrentModificationException的bug]]></title>
      <url>http://flume.cn/2016/10/27/%E8%AE%B0HashMap%E9%81%87%E5%88%B0%E7%9A%84java-util-ConcurrentModificationException%E7%9A%84bug/</url>
      <content type="html"><![CDATA[<h4 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h4><p>spark Streaming 实时程序在联调期间稳定运行了两天，以为问题不大了，第二天早上的时候打开一看，竟然挂了，定位到代码，原来我的程序实时读取redis的数据为一个HashMap，直到挂的时候，Redis中数据一直在增大，共 6083条：</p>
<p>spark相关代码如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 1. 从L1中删除过期的号码，同时Redis中的对应该K-V也删除</span></div><div class="line"> ...</div><div class="line"><span class="keyword">val</span> sentinelPool = <span class="type">InternalRedisClient</span>.getSentinelPool</div><div class="line"><span class="keyword">var</span> phoneSet: util.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>]()</div><div class="line"><span class="comment">//            printLog.debug( "sentinelPool NumIdle0: " + sentinelPool.getNumIdle + " Active0: " + sentinelPool.getNumActive)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> jedis1: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  jedis1 = sentinelPool.getResource</div><div class="line">  <span class="comment">//              printLog.debug( "sentinelPool NumIdle1: " + sentinelPool.getNumIdle + " Active1: " + sentinelPool.getNumActive)</span></div><div class="line"></div><div class="line">  phoneSet = jedis1.hgetAll(redisHashKey)</div><div class="line">  <span class="comment">//              printLog.debug( "sentinelPool NumIdle3: " + sentinelPool.getNumIdle + " Active3: " + sentinelPool.getNumActive)</span></div><div class="line"></div><div class="line">  printLog.debug(<span class="string">"phoneSet_1: "</span> + phoneSet)</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="keyword">if</span> (jedis1 != <span class="literal">null</span>) &#123;</div><div class="line">    printLog.debug(<span class="string">"close jedis1"</span>)</div><div class="line">    jedis1.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!phoneSet.isEmpty) &#123; </div><div class="line">  <span class="keyword">for</span> (eachPhoneKV: (<span class="type">String</span>, <span class="type">String</span>) &lt;- phoneSet) &#123; <span class="comment">// 就在这里挂掉了</span></div><div class="line">    <span class="keyword">val</span> expirationDate: <span class="type">Int</span> = eachPhoneKV._2.split(<span class="string">"\\|"</span>)(<span class="number">4</span>).toInt</div><div class="line">    <span class="keyword">val</span> today: <span class="type">Int</span> = getNowDate.toInt</div><div class="line">    <span class="keyword">if</span> (today &gt; expirationDate) &#123;</div><div class="line">      phoneSet.remove(eachPhoneKV._1)</div><div class="line">      <span class="keyword">var</span> jedis2: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        jedis2 = sentinelPool.getResource</div><div class="line">        jedis2.hdel(redisHashKey, eachPhoneKV._1)</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jedis2 != <span class="literal">null</span>) &#123;</div><div class="line">          printLog.debug(<span class="string">"close jedis2"</span>)</div><div class="line">          jedis2.close()</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  printLog.debug(<span class="string">"phoneSet_filtedByData: "</span> + phoneSet)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体异常粘信息如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">User class threw exception: org.apache.spark.SparkException: Job aborted due to stage failure: Task 4 in stage 0.0 failed 4 times, most recent failure: Lost task 4.3 in stage 0.0 (TID 170, NM-304-HW-XH628V3-BIGDATA-063): java.util.ConcurrentModificationException</div><div class="line">at java.util.HashMap$HashIterator.nextEntry(HashMap.java:922)</div><div class="line">at java.util.HashMap$EntryIterator.next(HashMap.java:962)</div><div class="line">at java.util.HashMap$EntryIterator.next(HashMap.java:960)</div><div class="line">at scala.collection.convert.Wrappers$JMapWrapperLike$$anon$2.next(Wrappers.scala:267)</div><div class="line">at scala.collection.convert.Wrappers$JMapWrapperLike$$anon$2.next(Wrappers.scala:264)</div><div class="line">at scala.collection.Iterator$class.foreach(Iterator.scala:727)</div><div class="line">at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)</div><div class="line">at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)</div><div class="line">at scala.collection.AbstractIterable.foreach(Iterable.scala:54)</div><div class="line">at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)</div><div class="line">at com.chinatelecom.bigdata.oidd2.Location$$anonfun$2$$anonfun$3.apply(Location.scala:871)</div><div class="line">at com.chinatelecom.bigdata.oidd2.Location$$anonfun$2$$anonfun$3.apply(Location.scala:677)</div></pre></td></tr></table></figure></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>项目太紧张，来不及详细分析java的源码了，根据经验redis中应该六千多条数据应该不是很大的，HashMap完全可以一次读取，从网上查到原因是因为remove操作导致的，在Iterator遍历过程中调用HashMap的remove方法会crash，有两个解决办法：</p>
<ol>
<li>一个解决办法是用一个ArrayList记录要删除的key,然后再遍历这个ArrayList,调用HashMap的remove方法以ArrayList的元素为key进行删除；这个方法需要额外的空间和时间，虽然也浪费的不多，但总感觉不够优雅；</li>
<li>创建一个Iterator<map.entry<integer, string="">&gt; iterator = map.entrySet().iterator();，然后用这个 iterator.remove()方法进行删除，这个是可以删除的；</map.entry<integer,></li>
</ol>
<p>我使用的是方法二，修改后的代码如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> phoneMap: util.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">String</span>]()</div><div class="line"><span class="comment">// printLog.debug( "sentinelPool NumIdle0: " + sentinelPool.getNumIdle + " Active0: " + sentinelPool.getNumActive)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> jedis1: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  jedis1 = sentinelPool.getResource</div><div class="line">  <span class="comment">// printLog.debug( "sentinelPool NumIdle1: " + sentinelPool.getNumIdle + " Active1: " + sentinelPool.getNumActive)</span></div><div class="line"></div><div class="line">  phoneMap = jedis1.hgetAll(redisHashKey)</div><div class="line">  <span class="comment">// printLog.debug( "sentinelPool NumIdle3: " + sentinelPool.getNumIdle + " Active3: " + sentinelPool.getNumActive)</span></div><div class="line"></div><div class="line">  printLog.debug(<span class="string">"phoneSet_1: "</span> + phoneMap)</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="keyword">if</span> (jedis1 != <span class="literal">null</span>) &#123;</div><div class="line">    printLog.debug(<span class="string">"close jedis1"</span>)</div><div class="line">    jedis1.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 1. 从L1中删除过期的号码，同时Redis中的对应该K-V也删除</span></div><div class="line"><span class="keyword">if</span> (!phoneMap.isEmpty) &#123;</div><div class="line">  <span class="keyword">val</span> iterator: util.<span class="type">Iterator</span>[<span class="type">Entry</span>[<span class="type">String</span>, <span class="type">String</span>]] = phoneMap.entrySet().iterator()</div><div class="line">  <span class="keyword">while</span> (iterator.hasNext) &#123;</div><div class="line">    <span class="keyword">val</span> eachPhoneKV: <span class="type">Entry</span>[<span class="type">String</span>, <span class="type">String</span>] = iterator.next()</div><div class="line">    <span class="keyword">val</span> mdn = eachPhoneKV.getKey</div><div class="line">    <span class="keyword">val</span> redisValue = eachPhoneKV.getValue</div><div class="line"></div><div class="line">    <span class="keyword">var</span> expirationDate: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      expirationDate = redisValue.split(<span class="string">"\\|"</span>)(<span class="number">4</span>).toInt</div><div class="line">      <span class="keyword">val</span> today: <span class="type">Int</span> = getNowDate.toInt</div><div class="line">      <span class="keyword">if</span> (today &gt; expirationDate) &#123;</div><div class="line">        printLog.info(<span class="string">"delete this data for expirationDate:"</span> + eachPhoneKV)</div><div class="line">        iterator.remove()</div><div class="line">        <span class="comment">// phoneMap.remove(mdn) // 这一句是错误的，因为无法据此删除</span></div><div class="line">        <span class="keyword">var</span> jedis2: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          jedis2 = sentinelPool.getResource</div><div class="line">          jedis2.hdel(redisHashKey, mdn)</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="keyword">if</span> (jedis2 != <span class="literal">null</span>) &#123;</div><div class="line">            printLog.debug(<span class="string">"close jedis2"</span>)</div><div class="line">            jedis2.close()</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">      <span class="comment">// 如果解析发生异常，则redis中删掉这个key，并且在phoneMap中同时删除</span></div><div class="line">      <span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; &#123;</div><div class="line">        printLog.error(<span class="string">"redis error data and del it: "</span> + eachPhoneKV + <span class="string">" error: "</span> + ex)</div><div class="line">        iterator.remove()</div><div class="line">        <span class="keyword">var</span> jedis4: <span class="type">Jedis</span> = <span class="literal">null</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          jedis4 = sentinelPool.getResource</div><div class="line">          jedis4.hdel(redisHashKey, mdn)</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="keyword">if</span> (jedis4 != <span class="literal">null</span>) &#123;</div><div class="line">            printLog.debug(<span class="string">"close jedis4"</span>)</div><div class="line">            jedis4.close()</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>然后测试，打包，部署，OK，解决。</p>
<h4 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h4><p>遍历HashMap有三种方法，分别是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;&#125;  <span class="comment">// scala中为 &lt;-</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(Integer key : keySet)&#123;&#125;</div><div class="line"></div><div class="line">Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; it = map.entrySet().iterator();</div><div class="line">        <span class="keyword">while</span>(it.hasNext())&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>其实上面的三种遍历方式从根本上讲都是使用的迭代器，之所以出现不同的结果是由于remove操作的实现不同决定的。</p>
<p>首先前两种方法都在调用nextEntry方法的同一个地方抛出了异常，虽然remove成功了，但是在迭代器遍历下一个元素的时候抛出异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    Entry&lt;K,V&gt; e = next;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里modCount是表示map中的元素被修改了几次(在移除，新加元素时此值都会自增)，而expectedModCount是表示期望的修改次数，在迭代器构造的时候这两个值是相等，如果在遍历过程中这两个值出现了不同步就会抛出ConcurrentModificationException异常。</p>
<p>1、HashMap的remove方法实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; e = removeEntryForKey(key);</div><div class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、HashMap.KeySet的remove方法实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、HashMap.HashIterator的remove方法实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (current == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">   <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">   Object k = current.key;</div><div class="line">   current = <span class="keyword">null</span>;</div><div class="line">   HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</div><div class="line">   expectedModCount = modCount;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上三种实现方式都通过调用HashMap.removeEntryForKey方法来实现删除key的操作。在removeEntryForKey方法内只要移除了key modCount就会执行一次自增操作，此时modCount就与expectedModCount不一致了，上面三种remove实现中，只有第三种iterator的remove方法在调用完removeEntryForKey方法后同步了expectedModCount值与modCount相同，所以在遍历下个元素调用nextEntry方法时，iterator方式不会抛异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    Entry&lt;K,V&gt; prev = table[i];</div><div class="line">    Entry&lt;K,V&gt; e = prev;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; next = e.next;</div><div class="line">        Object k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">            modCount++;</div><div class="line">            size--;</div><div class="line">            <span class="keyword">if</span> (prev == e)</div><div class="line">                table[i] = next;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                prev.next = next;</div><div class="line">            e.recordRemoval(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">        &#125;</div><div class="line">        prev = e;</div><div class="line">        e = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> e;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="其它思考"><a href="#其它思考" class="headerlink" title="其它思考"></a>其它思考</h4><p>1、如果是遍历过程中增加或修改数据呢？<br>增加或修改数据只能通过Map的put方法实现，在遍历过程中修改数据可以，但如果增加新key就会在下次循环时抛异常，因为在添加新key时modCount也会自增。</p>
<p>2、有些集合类也有同样的遍历问题，如ArrayList，通过Iterator方式可正确遍历完成remove操作，直接调用list的remove方法就会抛异常。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//会抛ConcurrentModificationException异常</span></div><div class="line"><span class="keyword">for</span>(String str : list)&#123;</div><div class="line">	list.remove(str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//正确遍历移除方式</span></div><div class="line">Iterator&lt;String&gt; it = list.iterator();</div><div class="line"><span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">	it.next();</div><div class="line">	it.remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、jdk为什么这样设计，只允许通过iterator进行remove操作？</p>
<p>HashMap和keySet的remove方法都可以通过传递key参数删除任意的元素，而iterator只能删除当前元素(current);<br>对于通过HashMap的remove方法来说，一旦删除的元素是iterator对象中next所正在引用的，如果没有通过modCount与 expectedModCount的比较实现快速失败抛出异常，下次循环该元素将成为current指向，此时iterator就遍历了一个已移除的过期数据，所以一定要判断这两个值是否一致。</p>
<p>4、这是一个坑，如果IDE能提示就好了，下次注意</p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p><a href="http://afredlyj.github.io/posts/hashmap-concurrentmodificationexception.html" target="_blank" rel="external">http://afredlyj.github.io/posts/hashmap-concurrentmodificationexception.html</a><br><a href="http://dumbee.net/archives/41" target="_blank" rel="external">http://dumbee.net/archives/41</a><br><a href="http://blog.csdn.net/wzy_1988/article/details/51423583" target="_blank" rel="external">http://blog.csdn.net/wzy_1988/article/details/51423583</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[景区位置服务项目说明文档]]></title>
      <url>http://flume.cn/2016/10/18/%E6%99%AF%E5%8C%BA%E4%BD%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p>总体架构图如下：<br></p>
<p>如上图：主要分为三大部分：</p>
<h4 id="上游数据"><a href="#上游数据" class="headerlink" title="上游数据"></a>上游数据</h4><p>由东方国信提供各个省份的Oidd数据，发送至kafka集群</p>
<h4 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h4><ol>
<li>Web微服务端：web微服务接受位置数据订阅，并将订阅的景区信息存储至Mysql中；</li>
<li>景区用户识别端：由Spark Streaming程序根据订阅信息实时对上游数据进行处理，识别出到达景区的最新电话号码列表，发送至下游；</li>
</ol>
<h4 id="下游系统"><a href="#下游系统" class="headerlink" title="下游系统"></a>下游系统</h4><p>处理逻辑将处理结果通过FTP共享接口发送至下游大数据营销系统，由大数据营销系统实现推荐等。</p>
<h2 id="处理逻辑-1"><a href="#处理逻辑-1" class="headerlink" title="处理逻辑"></a>处理逻辑</h2><h3 id="景区用户识别端详解"><a href="#景区用户识别端详解" class="headerlink" title="景区用户识别端详解"></a>景区用户识别端详解</h3><p>景区用户识别端详解逻辑由Spark Streaming程序实现，运行部署在yarn集群中，是一个实时的容错的处理逻辑<br>分别实现如下功能：</p>
<h4 id="配置信息读取"><a href="#配置信息读取" class="headerlink" title="配置信息读取"></a>配置信息读取</h4><p>kafka，flume，redis，mysql等配置信息配置在数据库中，系统载入试进行自动化预读取</p>
<h4 id="接收Kakfa消息流"><a href="#接收Kakfa消息流" class="headerlink" title="接收Kakfa消息流"></a>接收Kakfa消息流</h4><p>接收由国信发送至kafka的消息流，并将其分发到不同的机器，设置并发度；</p>
<h4 id="对所有的号码根据mdn生成key"><a href="#对所有的号码根据mdn生成key" class="headerlink" title="对所有的号码根据mdn生成key"></a>对所有的号码根据mdn生成key</h4><h4 id="对mdn重复数据进行去重"><a href="#对mdn重复数据进行去重" class="headerlink" title="对mdn重复数据进行去重"></a>对mdn重复数据进行去重</h4><p>注意这里是在每台不同的机器下进行的去重，而不是整体的去重</p>
<h4 id="建立Redis连接"><a href="#建立Redis连接" class="headerlink" title="建立Redis连接"></a>建立Redis连接</h4><p>在每台机器上建立Redis连接池，</p>
<h4 id="动态读取Mysql订阅信息"><a href="#动态读取Mysql订阅信息" class="headerlink" title="动态读取Mysql订阅信息"></a>动态读取Mysql订阅信息</h4><p>对每一批数据，动态从mysql数据库中载入订阅的景区信息L0，并将其转换成 cityCode -&gt; PositionSubData的 HashMap util.HashMap[Int, util.LinkedList[PositionSubData]]</p>
<h4 id="对源数据进行过滤，不在景区所属城市的数据丢掉"><a href="#对源数据进行过滤，不在景区所属城市的数据丢掉" class="headerlink" title="对源数据进行过滤，不在景区所属城市的数据丢掉"></a>对源数据进行过滤，不在景区所属城市的数据丢掉</h4><h4 id="读取Redis中已经保存的景区用户信息列表"><a href="#读取Redis中已经保存的景区用户信息列表" class="headerlink" title="读取Redis中已经保存的景区用户信息列表"></a>读取Redis中已经保存的景区用户信息列表</h4><p>从Redis中获取之前保存的号码列表L1，并且对过期的数据进行双向删除</p>
<h4 id="判断数据是否需要推送"><a href="#判断数据是否需要推送" class="headerlink" title="判断数据是否需要推送"></a>判断数据是否需要推送</h4><p>数据是否需要推送需要满足：</p>
<ol>
<li>不在Redis中：与Redis中数据进行对比，在Redis中的数据删除</li>
<li>在景区里：通过判断数据是否在景区里，如果在景区，则返回它对应的locationId_intervalTime_spId，否则返回””;</li>
<li>更新Redis </li>
</ol>
<h4 id="数据统一发送"><a href="#数据统一发送" class="headerlink" title="数据统一发送"></a>数据统一发送</h4><p>将处理好的数据按照一定的规则统一批量发送至flume</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scala中@的用法]]></title>
      <url>http://flume.cn/2016/09/23/scala%E4%B8%AD-%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>有些场景，比如模式匹配会遇到scala代码中有@符号，比如<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> x @ <span class="type">Some</span>(<span class="type">Nil</span>) =&gt; x</div></pre></td></tr></table></figure></p>
<p>现将网友的答案总结一下，并持续更新：</p>
<h3 id="绑定在模式匹配中，取出对应的原来输入值"><a href="#绑定在模式匹配中，取出对应的原来输入值" class="headerlink" title="绑定在模式匹配中，取出对应的原来输入值"></a>绑定在模式匹配中，取出对应的原来输入值</h3><p>比如：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> o: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">// o: Option[Int] = Some(5)</span></div><div class="line"></div><div class="line">o <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Some</span>(x) =&gt; println(x)</div><div class="line">  <span class="keyword">case</span> <span class="type">None</span> =&gt;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出:  </span></div><div class="line"><span class="number">5</span></div><div class="line"></div><div class="line">o <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> x @ <span class="type">Some</span>(_) =&gt; println(x)</div><div class="line">  <span class="keyword">case</span> <span class="type">None</span> =&gt;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="type">Some</span>(<span class="number">5</span>)</div></pre></td></tr></table></figure>
<p>如上案例，有些情况下，模式匹配后你并不想取出他的值，而是取出他本来的自己（Some(5)），这种情况下就用 @；并且@可以用于各个级别</p>
<h3 id="可以用来将名称和一个匹配的模式绑定，然后这个值作为匹配模式"><a href="#可以用来将名称和一个匹配的模式绑定，然后这个值作为匹配模式" class="headerlink" title="@可以用来将名称和一个匹配的模式绑定，然后这个值作为匹配模式"></a>@可以用来将名称和一个匹配的模式绑定，然后这个值作为匹配模式</h3><p>听起来很绕口，看如下代码：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> d@(c<span class="meta">@Some</span>(a), <span class="type">Some</span>(b)) = (<span class="type">Some</span>(<span class="number">1</span>), <span class="type">Some</span>(<span class="number">2</span>))</div></pre></td></tr></table></figure>
<p>结果竟然产生了四个值：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d: (<span class="type">Some</span>[<span class="type">Int</span>], <span class="type">Some</span>[<span class="type">Int</span>]) = (<span class="type">Some</span>(<span class="number">1</span>),<span class="type">Some</span>(<span class="number">2</span>))</div><div class="line">c: <span class="type">Some</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">1</span>)</div><div class="line">a: <span class="type">Int</span> = <span class="number">1</span></div><div class="line">b: <span class="type">Int</span> = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>如上所述，说明定义d和c是两个匹配模式，a和b是两个数字</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="type">Some</span>(<span class="number">1</span>), <span class="type">Some</span>(<span class="number">2</span>)) <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> d@(c<span class="meta">@Some</span>(a), <span class="type">Some</span>(b)) =&gt; println(a, b, c, d)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="type">Some</span>(<span class="number">1</span>),(<span class="type">Some</span>(<span class="number">1</span>),<span class="type">Some</span>(<span class="number">2</span>)))</div></pre></td></tr></table></figure></p>
<p>再跑一个例子<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span> (t<span class="meta">@Some</span>(u) &lt;- <span class="type">Seq</span>(<span class="type">Some</span>(<span class="number">1</span>))) println(t, u)</div><div class="line">(<span class="type">Some</span>(<span class="number">1</span>),<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>再跑一个例子</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">val</span> <span class="type">List</span>(x, xs @ _*) = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">x: <span class="type">Int</span> = <span class="number">1</span></div><div class="line">xs: <span class="type">Seq</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="http://stackoverflow.com/questions/2359014/scala-operator" target="_blank" rel="external">http://stackoverflow.com/questions/2359014/scala-operator</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark在Kerberos下连接使用Hbase的配置]]></title>
      <url>http://flume.cn/2016/09/18/Spark%E5%9C%A8Kerberos%E4%B8%8B%E8%BF%9E%E6%8E%A5%E4%BD%BF%E7%94%A8Hbase%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>复制HBase目录下的lib文件到spark目录/lib/hbase。spark依赖此lib，但直接指定到Hbase下的lib目录的话又会出错<br>清单如下：guava-12.0.1.jar htrace-core-3.1.0-incubating.jar protobuf-java-2.5.0.jar   这三个jar加上以hbase开头所有jar，其它就不必了，全部复制会引起报错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$SPARK_HOME</span>/lib/hbase</div><div class="line">cp /usr/lib/hbase/lib/hbase-* ./</div><div class="line">cp /usr/lib/hbase/lib/guava-12.0.1.jar ./</div><div class="line">cp /usr/lib/hbase/lib/htrace-core-3.1.0-incubating.jar ./</div><div class="line">cp /usr/lib/hbase/lib/protobuf-java-2.5.0.jar ./</div></pre></td></tr></table></figure></p>
<p>然后在spark客户端配置如下：<br>也就是增加到classpath<br><figure class="highlight bash"><figcaption><span>spark-default.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spark.driver.extraClassPath /usr/lib/hadoop/lib/*:/usr/op/sparkKerbersTest/spark-1.6.2-bin-hadoop2.6/lib/hbase/*</div></pre></td></tr></table></figure></p>
<p>就可以了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark在yarn中的资源申请与分配调研]]></title>
      <url>http://flume.cn/2016/09/18/Spark%E5%9C%A8yarn%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%94%B3%E8%AF%B7%E4%B8%8E%E5%88%86%E9%85%8D/</url>
      <content type="html"><![CDATA[<p>本文解决遇到的以下问题：<br><em>spark作业提交到yarn的时候，如果用户(wzfw)所在队列本来有500个executor的权限，但是他跑一个简单的程序根本不需要这么多的资源，只需要200个核就足够了，那他如果申请了400个核的话，是否需要全部分配给他？</em></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前我们所有的spark程序的分配都是靠参数设置固定的Executor数量进行资源预分配的，如果用户op在yarn的资源队列里可以申请到200个资源，那它就算跑占用资源很少的程序也能申请到200个核，这是不合理的</p>
<p>比如简单跑如下SparkPi程序，申请20个核：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi --master yarn-client --num-executors 20 lib/spark-examples-1.6.2-hadoop2.6.0.jar</div></pre></td></tr></table></figure></p>
<p>yarn中资源占用情况如下：<br><img src="/2016/09/18/Spark在yarn中的资源申请与分配/spark-yarn-allocation.png" alt="spark-yarn-allocation.png" title=""><br>可以看到，我就跑了一个SparkPi啊，竟然用了43G的内存，这样很不合理！</p>
<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>Spark在yarn集群上运行的时候，一方面默认通过num-executors参数设置固定的Executor数量，每个application会独占所有预分配的资源直到整个生命周期的结束。Spark1.2后开始引入动态资源分配（Dynamic Resource Allocation）机制，支持资源弹性分配。</p>
<p>对于已知的业务负载，使用固定的集群资源配置是相对容易的；对于未知的业务负载，使用动态的集群资源分配方式可以满足负载的动态变化，这样集群的资源利用和业务负载的处理效率都会更加灵活。</p>
<p>动态资源分配测试在Spark1.2仅支持Yarn模式，从Spark1.6开始，支持standalone、Yarn、Mesos.这个特性默认是禁用的。<br><a id="more"></a></p>
<h2 id="动态资源分配的思想"><a href="#动态资源分配的思想" class="headerlink" title="动态资源分配的思想"></a>动态资源分配的思想</h2><p>简单来说，就是基于负载来动态调节Spark应用的资源占用，你的应用会在资源空闲的时候将其释放给集群，而后续用到的时候再重新申请。</p>
<h3 id="动态资源分配策略"><a href="#动态资源分配策略" class="headerlink" title="动态资源分配策略"></a>动态资源分配策略</h3><p>其实没有一个固定的方法可以预测一个executor后续是否马上会被分配去执行任务，或者一个新分配的执行器实际上是空闲的，所以我们需要一些试探性的方法，来决定是否申请或移除一个执行器。策略分为<strong>请求策略</strong>与<strong>移除策略</strong>：</p>
<h4 id="请求策略"><a href="#请求策略" class="headerlink" title="请求策略"></a>请求策略</h4><p>开启动态分配策略后，application会在task因没有足够资源被挂起的时候去动态申请资源，这种情况意味着该application现有的executor无法满足所有task并行运行。spark一轮一轮的申请资源，当有task挂起或等待spark.dynamicAllocation.schedulerBacklogTimeout(默认1s)时间的时候，会开始动态资源分配；之后会每隔spark.dynamicAllocation.sustainedSchedulerBacklogTimeout(默认1s)时间申请一次，直到申请到足够的资源。<strong>每次申请的资源量是指数增长的，即1,2,4,8等</strong>。<br>之所以采用指数增长，出于两方面考虑：其一，开始申请的少是考虑到可能application会马上得到满足；其次要成倍增加，是为了如果application需要很多资源，而该方式可以在很少次数的申请之后得到满足。<br>（这段指数增长的策略可以根据实际情况通过修改源码来修改）</p>
<h4 id="资源回收策略"><a href="#资源回收策略" class="headerlink" title="资源回收策略"></a>资源回收策略</h4><p>当application的executor空闲时间超过spark.dynamicAllocation.executorIdleTimeout（默认60s）后，就会被回收。</p>
<h2 id="配置思路"><a href="#配置思路" class="headerlink" title="配置思路"></a>配置思路</h2><h3 id="启动-external-shuffle-service"><a href="#启动-external-shuffle-service" class="headerlink" title="启动 external shuffle service"></a>启动 external shuffle service</h3><p>要使用这一特性有两个前提条件。首先，你的应用必须设置 spark.dynamicAllocation.enabled 为 true。其次，你必须在每个节点上启动一个外部混洗服务（external shuffle service），并在你的应用中将 spark.shuffle.service.enabled 设为true。外部混洗服务的目的就是为了在删除执行器的时候，能够保留其输出的混洗文件（本文后续有更详细的描述）。启用外部混洗的方式在各个集群管理器上各不相同：</p>
<p>在Spark独立部署的集群中，你只需要在worker启动前设置 spark.shuffle.server.enabled 为true即可。</p>
<p>在YARN模式下，混洗服务需要按以下步骤在各个NodeManager上启动：</p>
<ol>
<li>首先按照YARN profile 构建Spark。如果你已经有打好包的Spark，可以忽略这一步。</li>
<li>找到 spark-<version>-yarn-shuffle.jar。如果你是自定义编译，其位置应该在 ${SPARK_HOME}/network/yarn/target/scala-<version>，否则应该可以在 lib 目录下找到这个jar包。</version></version></li>
<li>将该jar包添加到NodeManager的classpath路径中。</li>
<li>配置各个节点上的yarn-site.xml，将 spark_shuffle 添加到 yarn.nodemanager.aux-services 中，然后将 yarn.nodemanager.aux-services.spark_shuffle.class 设为 org.apache.spark.network.yarn.YarnShuffleService，并将 spark.shuffle.service.enabled 设为 true。</li>
<li>最后重启各节点上的NodeManager。</li>
</ol>
<p>所有相关的配置都是可选的，并且都在 spark.dynamicAllocation.<em> 和 spark.shuffle.service.</em> 命名空间下。更详细请参考：<a href="http://spark.apache.org/docs/latest/configuration.html#dynamic-allocation" target="_blank" rel="external">configurations page</a>。</p>
<h3 id="外部混洗服务external-shuffle-service"><a href="#外部混洗服务external-shuffle-service" class="headerlink" title="外部混洗服务external shuffle service"></a>外部混洗服务external shuffle service</h3><p>非动态分配模式下，执行器可能的退出原因有执行失败或者相关Spark应用已经退出。不管是哪种原因，执行器的所有状态都已经不再需要，可以丢弃掉。但在动态分配的情形下，执行器有可能在Spark应用运行期间被移除。这时候，如果Spark应用尝试去访问该执行器存储的状态，就必须重算这一部分数据。因此，Spark需要一种机制，能够优雅地关闭执行器，同时还保留其状态数据。</p>
<p>这种需求对于混洗操作尤其重要。混洗过程中，Spark执行器首先将map输出写到本地磁盘，同时执行器本身又是一个文件服务器，这样其他执行器就能够通过该执行器获得对应的map结果数据。一旦有某些任务执行时间过长，动态分配有可能在混洗结束前移除任务异常的执行器，而这些被移除的执行器对应的数据将会被重新计算，但这些重算其实是不必要的。</p>
<p>要解决这一问题，就需要用到一个外部混洗服务（external shuffle service），该服务在Spark 1.2引入。该服务在每个节点上都会启动一个不依赖于任何Spark应用或执行器的独立进程。一旦该服务启用，Spark执行器不再从各个执行器上获取shuffle文件，转而从这个service获取。这意味着，任何执行器输出的混洗状态数据都可能存留时间比对应的执行器进程还长。</p>
<p>除了混洗文件之外，执行器也会在磁盘或者内存中缓存数。一旦执行器被移除，其缓存数据将无法访问。这个问题目前还没有解决。或许在未来的版本中，可能会采用外部混洗服务类似的方法，将缓存数据保存在堆外存储中以解决这一问题。</p>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>配置文件：<br>$SPARK_HOME/conf/spark-defaults.conf<br>$HADOOP_HOME/conf/yarn-site.xml</p>
<h3 id="Spark配置说明"><a href="#Spark配置说明" class="headerlink" title="Spark配置说明"></a>Spark配置说明</h3><p>在spark-defaults.conf 中添加<br><figure class="highlight bash"><figcaption><span>spark-defaults.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">spark.shuffle.service.enabled <span class="literal">true</span>   <span class="comment"># 开启外部shuffle服务，开启这个服务可以保护executor的shuffle文件，安全移除executor，在Yarn模式下这个shuffle服务以org.apache.spark.yarn.network.YarnShuffleService实现</span></div><div class="line">spark.shuffle.service.port 7337 <span class="comment"># Shuffle Service服务端口，必须和yarn-site中的一致</span></div><div class="line">spark.dynamicAllocation.enabled <span class="literal">true</span>  <span class="comment"># 开启动态资源分配</span></div><div class="line">spark.dynamicAllocation.minExecutors 1  <span class="comment"># 每个Application最小分配的executor数</span></div><div class="line">spark.dynamicAllocation.maxExecutors 30  <span class="comment"># 每个Application最大并发分配的executor数</span></div><div class="line">spark.dynamicAllocation.schedulerBacklogTimeout 1s <span class="comment"># 任务待时间（超时便申请新资源)默认60秒</span></div><div class="line">spark.dynamicAllocation.sustainedSchedulerBacklogTimeout 5s <span class="comment">#  再次请求等待时间，默认60秒</span></div><div class="line">spark.dynamicAllocation.executorIdleTimeout <span class="comment"># executor闲置时间（超过释放资源）默认600秒</span></div></pre></td></tr></table></figure></p>
<h3 id="yarn的配置"><a href="#yarn的配置" class="headerlink" title="yarn的配置"></a>yarn的配置</h3><h4 id="添加相应的jar包spark-yarn-shuffle-jar"><a href="#添加相应的jar包spark-yarn-shuffle-jar" class="headerlink" title="添加相应的jar包spark--yarn-shuffle.jar"></a>添加相应的jar包spark-<version>-yarn-shuffle.jar</version></h4><p>如果是自己编译的spark，可以在$SPARK_HOME/network/yarn/target/scala-<version>下面找到<br>是预编译的，直接在$SPARK_HOME/lib/下面找到<br>找到jar包后，将其添加到每个nodemanager的classpath下面(或者直接放到yarn的lib目录中,${HADOOP_HOME}/share/hadoop/yarn/lib/)</version></p>
<h4 id="配置yarn-site-xml文件"><a href="#配置yarn-site-xml文件" class="headerlink" title="配置yarn-site.xml文件"></a>配置yarn-site.xml文件</h4><p>在所有节点的yarn-site.xml中，为yarn.nodemanager.aux-services配置项新增spark_shuffle这个值（注意是新增，在原有value的基础上逗号分隔新增即可）<br><figure class="highlight xml"><figcaption><span>yarn-site.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spark.shuffle.service.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle,spark_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.spark_shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.spark.network.yarn.YarnShuffleService<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="重启所有的节点"><a href="#重启所有的节点" class="headerlink" title="重启所有的节点"></a>重启所有的节点</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>当开启了动态资源分配（spark.dynamicAllocation.enabled），num-executor选项将不再兼容，如果设置了num-executor，那么动态资源分配将被关闭</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://spark.apache.org/docs/1.6.2/job-scheduling.html#dynamic-resource-allocation" target="_blank" rel="external">spark1.6.2作业调度官网</a><br><a href="http://ifeve.com/spark-schedule/" target="_blank" rel="external">spark1.6.2作业调度翻译版</a><br><a href="http://blog.cloudera.com/blog/2014/05/apache-spark-resource-management-and-yarn-app-models/" target="_blank" rel="external">Apache Spark Resource Management and YARN App Models</a><br><a href="https://issues.apache.org/jira/browse/YARN-1197" target="_blank" rel="external">jira/browse/YARN-1197–Support changing resources of an allocated container</a><br><a href="http://hejunhao.me/archives/675" target="_blank" rel="external">Spark集群资源动态分配</a><br><a href="http://blog.sina.com.cn/s/blog_a29dec8d0102vfwx.html" target="_blank" rel="external">spark动态资源分配在yarn（hadoop）的配置</a><br><a href="https://www.linkedin.com/pulse/spark-executors%E5%9C%A8yarn%E4%B8%8A%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D-victor-wang" target="_blank" rel="external">Spark Executors在YARN上的动态分配</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[livy-server初探1——简介与提交脚本以及LivyServer类]]></title>
      <url>http://flume.cn/2016/09/13/livy-server%E5%88%9D%E6%8E%A21%E2%80%94%E2%80%94%E7%AE%80%E4%BB%8B%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC%E4%BB%A5%E5%8F%8ALivyServer%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p><a href="http://livy.io/" target="_blank" rel="external">Livy server</a>是针对Spark的开源的REST接口，使得我们可以通过REST接口来实现与Spark交互,之前应该是Hue框架的一个功能模块，现在已经独立出来啦。具有如下功能：<br>1） 可以与scala、python、R shell客户端交互，执行一些代码片段<br>2） 可以提交整个Spark Job,支持scala、python、java编写的Spark job。</p>
<h2 id="Welcome-to-Livy"><a href="#Welcome-to-Livy" class="headerlink" title="Welcome to Livy"></a>Welcome to Livy</h2><p>下面是官网文档中我对 Welcome to Livy的翻译：</p>
<p>Livy通过提供REST服务来简化与Spark集群的交互。它可以通过job或者代码片段的方式来提交Spark任务，并同步或者异步地获得任务的结果，以及管理spark context，上述功能通过简单的REST接口或者RPC服务来实现。livy也可以简化Spark与一些应用程序之间的交互，使得Spark可以用于一些web应用(比如Hue)。更多的功能包括：</p>
<ul>
<li>拥有长期运行的Spark Contexts供多用户提交各种的Spark job；</li>
<li>不同的任务和用户可以共享cached RDD或者DataFrames；</li>
<li>多个SC可以按计划同时运行，为了使得SC具有更好的容错性和并发性，可以将SC运行在yarn/Mesos等集群中；</li>
<li>可以通过java/scala客户端的API来提交预编译好的jar包或代码片段</li>
<li>支持一定的安全机制</li>
<li>Apache-licensed 100%开源</li>
</ul>
<p>与ReadMe中的文档结合再补充几条：</p>
<ul>
<li>支持Scala，Python，R Shell的交互；</li>
<li>支持 Scala，Java，Python的批量提交；</li>
<li>不需要你对你自己的代码增加任何改变；</li>
</ul>
<p>官网和github逛了一整子后不禁感叹，新东西总是缺乏底层的文档的，所以要了解它就要阅读源码了。</p>
<h2 id="从-bin-livy-server进入"><a href="#从-bin-livy-server进入" class="headerlink" title="从./bin/livy-server进入"></a>从./bin/livy-server进入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">usage=<span class="string">"Usage: livy-server (start|stop)"</span></div><div class="line"></div><div class="line"><span class="comment"># 指定LIVY_HOME与LIVY_CONF_DIR，上述 `export LIVY_HOME=$(cd $(dirname $0)/.. &amp;&amp; pwd)`这种写法值得学习，代表将LIVY_HOME环境变量设为本脚本的父目录，通过这种写法，增强了脚本的可移植性，另外注明一点，dirname这个命令在命令行里是不能用的，只有写在脚本中才能起作用。</span></div><div class="line"><span class="built_in">export</span> LIVY_HOME=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>)/.. &amp;&amp; <span class="built_in">pwd</span>)</div><div class="line">LIVY_CONF_DIR=<span class="variable">$&#123;LIVY_CONF_DIR:-"$LIVY_HOME/conf"&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 运行所有的livy-env.sh中的环境变量，并使用set -a 表示输出所有的环境变量的改变</span></div><div class="line"><span class="keyword">if</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$&#123;LIVY_CONF_DIR&#125;</span>/livy-env.sh"</span> ]; <span class="keyword">then</span></div><div class="line">  <span class="comment"># Promote all variable declarations to environment (exported) variables</span></div><div class="line">  <span class="built_in">set</span> <span class="_">-a</span></div><div class="line">  . <span class="string">"<span class="variable">$&#123;LIVY_CONF_DIR&#125;</span>/livy-env.sh"</span></div><div class="line">  <span class="built_in">set</span> +a</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>接下来可以看到调用了 start_livy_server，以及stop的代码(其实就是ps -p到livy的那个进程，然后kill掉，值得借鉴)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">option=<span class="variable">$1</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></div><div class="line"></div><div class="line">  (start)</div><div class="line">    start_livy_server <span class="string">"new"</span></div><div class="line">    ;;</div><div class="line"></div><div class="line">  (<span class="string">""</span>)</div><div class="line">    <span class="comment"># make it compatible with previous version of livy-server</span></div><div class="line">    start_livy_server <span class="string">"old"</span></div><div class="line">    ;;</div><div class="line"></div><div class="line">  (stop)</div><div class="line">    <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$pid</span> ]; <span class="keyword">then</span></div><div class="line">      TARGET_ID=<span class="string">"<span class="variable">$(cat "$pid")</span>"</span></div><div class="line">      <span class="keyword">if</span> [[ $(ps -p <span class="string">"<span class="variable">$TARGET_ID</span>"</span> -o comm=) =~ <span class="string">"java"</span> ]]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"stopping livy_server"</span></div><div class="line">        <span class="built_in">kill</span> <span class="string">"<span class="variable">$TARGET_ID</span>"</span> &amp;&amp; rm <span class="_">-f</span> <span class="string">"<span class="variable">$pid</span>"</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"no livy_server to stop"</span></div><div class="line">      <span class="keyword">fi</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"no livy_server to stop"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    ;;</div><div class="line"></div><div class="line">  (*)</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$usage</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line">    ;;</div><div class="line"></div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
<p>接下来就是start_livy_server函数了，它做了下面几件事情：</p>
<ol>
<li>找到livy的jar包；</li>
<li>设置LIVY_CLASSPATH并将SPARK与HADOOP以及YARN的CONF_DIR加入到classpath中；</li>
<li>如果是<code>./bin/livy-server</code>启动的程序，就直接运行 “$RUNNER $LIVY_SERVER_JAVA_OPTS -cp $LIVY_CLASSPATH:$CLASSPATH com.cloudera.livy.server.LivyServer”</li>
<li>如果是<code>./bin/livy-server start</code>启动的程序，则增加了日志记录，以方便查看，所以推荐新版本使用带start参数的方式</li>
</ol>
<h2 id="com-cloudera-livy-server-LivyServer"><a href="#com-cloudera-livy-server-LivyServer" class="headerlink" title="com.cloudera.livy.server.LivyServer"></a>com.cloudera.livy.server.LivyServer</h2><p>从后面进入：原来是创建了一个 LivyServer的server，然后start和join启动</p>
<figure class="highlight scala"><figcaption><span>LivyServer.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">LivyServer</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> server = <span class="keyword">new</span> <span class="type">LivyServer</span>()</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      server.start()</div><div class="line">      server.join()</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      server.stop()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="LiveServer的属性"><a href="#LiveServer的属性" class="headerlink" title="LiveServer的属性"></a>LiveServer的属性</h3><p>LivyServer的属性不多，（与spark源码相比）：</p>
<figure class="highlight scala"><figcaption><span>LivyServer.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">LivyConf</span>._</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> server: <span class="type">WebServer</span> = _</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> _serverUrl: <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">None</span></div><div class="line">  <span class="comment">// make livyConf accessible for testing</span></div><div class="line">  <span class="keyword">private</span>[livy] <span class="keyword">var</span> livyConf: <span class="type">LivyConf</span> = _</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> kinitFailCount: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> executor: <span class="type">ScheduledExecutorService</span> = _</div></pre></td></tr></table></figure>
<h3 id="start-函数"><a href="#start-函数" class="headerlink" title="start()函数"></a>start()函数</h3><p>然后是start()函数了<br>首先，从配置文件中读取配置信息（这一块内容自己写得时候可以借用）：</p>
<ul>
<li>从配置信息中得到host和port</li>
</ul>
<figure class="highlight scala"><figcaption><span>LivyServer.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">livyConf = <span class="keyword">new</span> <span class="type">LivyConf</span>().loadFromFile(<span class="string">"livy.conf"</span>)</div><div class="line"><span class="keyword">val</span> host = livyConf.get(<span class="type">SERVER_HOST</span>)</div><div class="line"><span class="keyword">val</span> port = livyConf.getInt(<span class="type">SERVER_PORT</span>)</div><div class="line"># 这个而没有看懂</div><div class="line"><span class="keyword">val</span> multipartConfig = <span class="type">MultipartConfig</span>(</div><div class="line">    maxFileSize = <span class="type">Some</span>(livyConf.getLong(<span class="type">LivyConf</span>.<span class="type">FILE_UPLOAD_MAX_SIZE</span>))</div><div class="line">  ).toMultipartConfigElement</div></pre></td></tr></table></figure>
<ul>
<li>测试SparkHome是否设置成功</li>
</ul>
<p>如下代码，这里使用了require方法对参数进行先决条件检测(值得借鉴)<br><figure class="highlight scala"><figcaption><span>LivyServer.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Make sure the `spark-submit` program exists, otherwise much of livy won't work.</span></div><div class="line">testSparkHome(livyConf)</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Sets the spark-submit path if it's not configured in the LivyConf</div><div class="line">*/</div><div class="line"><span class="keyword">private</span>[server] <span class="function"><span class="keyword">def</span> <span class="title">testSparkHome</span></span>(livyConf: <span class="type">LivyConf</span>): <span class="type">Unit</span> = &#123;</div><div class="line"><span class="keyword">val</span> sparkHome = livyConf.sparkHome().getOrElse &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"Livy requires the SPARK_HOME environment variable"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">require(<span class="keyword">new</span> <span class="type">File</span>(sparkHome).isDirectory(), <span class="string">"SPARK_HOME path does not exist"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>测试spark-submit命令可用，否则livy无法工作(值得借鉴):</li>
</ul>
<p>这里的代码写得太精彩了！先是定义一个<code>$SPAKR_HOME/bin/spark-sumbit --version</code>的命令，使用java的ProcessBuilder，然后可以得到exitCode和重定向的标准输出结果，如果结果是”version …”的话，就代表执行成功，输出结果；然后对这个version进行正则匹配，如果是1.6到2.0版本之间，就返回true，否则就说明spark版本不支持；</p>
<figure class="highlight scala"><figcaption><span>LivyServer.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">testSparkSubmit(livyConf)</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Test that the configured `spark-submit` executable exists.</div><div class="line">*</div><div class="line">* @param livyConf</div><div class="line">*/</div><div class="line"><span class="keyword">private</span>[server] <span class="function"><span class="keyword">def</span> <span class="title">testSparkSubmit</span></span>(livyConf: <span class="type">LivyConf</span>): <span class="type">Unit</span> = &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  testSparkVersion(sparkSubmitVersion(livyConf))</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">  <span class="keyword">case</span> e: <span class="type">IOException</span> =&gt;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IOException</span>(<span class="string">"Failed to run spark-submit executable"</span>, e)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="comment">/**</span></div><div class="line">* Return the version of the configured `spark-submit` version.</div><div class="line">*</div><div class="line">* @param livyConf</div><div class="line">* @return the version</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">sparkSubmitVersion</span></span>(livyConf: <span class="type">LivyConf</span>): <span class="type">String</span> = &#123;</div><div class="line"><span class="keyword">val</span> sparkSubmit = livyConf.sparkSubmit()</div><div class="line"><span class="keyword">val</span> pb = <span class="keyword">new</span> <span class="type">ProcessBuilder</span>(sparkSubmit, <span class="string">"--version"</span>)</div><div class="line">pb.redirectErrorStream(<span class="literal">true</span>)</div><div class="line">pb.redirectInput(<span class="type">ProcessBuilder</span>.<span class="type">Redirect</span>.<span class="type">PIPE</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="type">LivyConf</span>.<span class="type">TEST_MODE</span>) &#123;</div><div class="line">  pb.environment().put(<span class="string">"LIVY_TEST_CLASSPATH"</span>, sys.props(<span class="string">"java.class.path"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> process = <span class="keyword">new</span> <span class="type">LineBufferedProcess</span>(pb.start())</div><div class="line"><span class="keyword">val</span> exitCode = process.waitFor()</div><div class="line"><span class="keyword">val</span> output = process.inputIterator.mkString(<span class="string">"\n"</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> regex = <span class="string">""</span><span class="string">"version (.*)"</span><span class="string">""</span>.r.unanchored</div><div class="line"></div><div class="line">output <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> regex(version) =&gt; version</div><div class="line">  <span class="keyword">case</span> _ =&gt;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IOException</span>(<span class="string">f"Unable to determine spark-submit version [<span class="subst">$exitCode</span>]:\n<span class="subst">$output</span>"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Throw an exception if Spark version is not supported.</div><div class="line">* @param version Spark version</div><div class="line">*/</div><div class="line"><span class="keyword">private</span>[server] <span class="function"><span class="keyword">def</span> <span class="title">testSparkVersion</span></span>(version: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</div><div class="line"><span class="keyword">val</span> versionPattern = <span class="string">""</span><span class="string">"(\d)+\.(\d)+(?:\.\d*)?"</span><span class="string">""</span>.r</div><div class="line"><span class="comment">// This is exclusive. Version which equals to this will be rejected.</span></div><div class="line"><span class="keyword">val</span> maxVersion = (<span class="number">2</span>, <span class="number">0</span>)</div><div class="line"><span class="keyword">val</span> minVersion = (<span class="number">1</span>, <span class="number">6</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> supportedVersion = version <span class="keyword">match</span> &#123;</div><div class="line">  <span class="keyword">case</span> versionPattern(major, minor) =&gt;</div><div class="line">    <span class="keyword">val</span> v = (major.toInt, minor.toInt)</div><div class="line">    v &gt;= minVersion &amp;&amp; v &lt; maxVersion</div><div class="line">  <span class="keyword">case</span> _ =&gt; <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">require(supportedVersion, <span class="string">s"Unsupported Spark version <span class="subst">$version</span>."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过livy.spark.master是否以yarn开头判断是否需要初始化YarnClient</li>
</ul>
<figure class="highlight scala"><figcaption><span>LivyServer.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Initialize YarnClient ASAP to save time.</span></div><div class="line"><span class="keyword">if</span> (livyConf.isRunningOnYarn()) &#123;</div><div class="line">  <span class="type">Future</span> &#123; <span class="type">SparkYarnApp</span>.yarnClient &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// SparkYarnApp.scala</span></div><div class="line"><span class="comment">// YarnClient is thread safe. Create once, share it across threads.</span></div><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> yarnClient = &#123;</div><div class="line">  <span class="keyword">val</span> c = <span class="type">YarnClient</span>.createYarnClient() <span class="comment">// 这里调用的是yarn提供的API</span></div><div class="line">  c.init(<span class="keyword">new</span> <span class="type">YarnConfiguration</span>())</div><div class="line">  c.start()</div><div class="line">  c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>接下来启动WebServer</li>
</ul>
<p>这个webServer是Jetty的WebServer，通过设置是否使用ssl的配置来判断启动的是http server还是 https server，也会判断有没有Kerberos，设置IP，端口，日志等。（以后写得时候得查看Jetty的API和文档）</p>
<figure class="highlight scala"><figcaption><span>LivyServer.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">server = <span class="keyword">new</span> <span class="type">WebServer</span>(livyConf, host, port)</div><div class="line">server.context.setResourceBase(<span class="string">"src/main/com/cloudera/livy/server"</span>)</div><div class="line">server.context.addEventListener(</div><div class="line">  <span class="keyword">new</span> <span class="type">ServletContextListener</span>() <span class="keyword">with</span> <span class="type">MetricsBootstrap</span> <span class="keyword">with</span> <span class="type">ServletApiImplicits</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">mount</span></span>(sc: <span class="type">ServletContext</span>, servlet: <span class="type">Servlet</span>, mappings: <span class="type">String</span>*): <span class="type">Unit</span> = &#123;</div><div class="line">      <span class="keyword">val</span> registration = sc.addServlet(servlet.getClass().getName(), servlet)</div><div class="line">      registration.addMapping(mappings: _*)</div><div class="line">      registration.setMultipartConfig(multipartConfig)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">contextDestroyed</span></span>(sce: <span class="type">ServletContextEvent</span>): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">contextInitialized</span></span>(sce: <span class="type">ServletContextEvent</span>): <span class="type">Unit</span> = &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">val</span> context = sce.getServletContext()</div><div class="line">        context.initParameters(org.scalatra.<span class="type">EnvironmentKey</span>) = livyConf.get(<span class="type">ENVIRONMENT</span>)</div><div class="line">        mount(context, <span class="keyword">new</span> <span class="type">InteractiveSessionServlet</span>(livyConf), <span class="string">"/sessions/*"</span>)</div><div class="line">        mount(context, <span class="keyword">new</span> <span class="type">BatchSessionServlet</span>(livyConf), <span class="string">"/batches/*"</span>)</div><div class="line">        context.mountMetricsAdminServlet(<span class="string">"/"</span>)</div><div class="line">      &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt;</div><div class="line">          error(<span class="string">"Exception thrown when initializing server"</span>, e)</div><div class="line">          sys.exit(<span class="number">1</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark在Kerberos环境下指定任意用户在yarn上提交任务]]></title>
      <url>http://flume.cn/2016/09/08/Spark%E5%9C%A8Kerberos%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%8C%87%E5%AE%9A%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%9C%A8yarn%E4%B8%8A%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>众所周知，Spark在Kerberos环境下提交任务有两种方式，分别是先kinit的方式和通过 –keytab的方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[op]$ spark-submit --keytab <span class="built_in">test</span>Jars/op.keytab --principal op --master <span class="built_in">local</span> --class SparkPi ./<span class="built_in">test</span>Jars/my.jar 4</div></pre></td></tr></table></figure>
<p>Spark在Kerberos环境下可以在提交任务时通过指定用户的keytab和principal来提交任务，比如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 事先进行kinit的方式</span></div><div class="line">[op]$ kinit -kt op.keytab op</div><div class="line">[op]$ spark-submit --master <span class="built_in">local</span> --class SparkPi ./<span class="built_in">test</span>Jars/my.jar 4</div><div class="line"></div><div class="line"><span class="comment"># 提交keytab的方式</span></div><div class="line">[op]$ spark-submit --keytab <span class="built_in">test</span>Jars/op.keytab --principal op --master <span class="built_in">local</span> --class SparkPi ./<span class="built_in">test</span>Jars/my.jar 4</div></pre></td></tr></table></figure>
<p>其实还可以模拟其它用户的方式提交任务，比如使用ts账户提交：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[op]$ spark-submit --keytab <span class="built_in">test</span>Jars/ts.keytab --principal ts@HADOOP.CHINATELECOM.CN --master <span class="built_in">local</span> --class SparkPi ./<span class="built_in">test</span>Jars/my.jar 4</div></pre></td></tr></table></figure>
<p>当然没有那么简单，如果想要使用ts账户执行程序，需要进行如下设置：</p>
<h4 id="模拟其它用户需要的条件"><a href="#模拟其它用户需要的条件" class="headerlink" title="模拟其它用户需要的条件"></a>模拟其它用户需要的条件</h4><ol>
<li>ts要在KDC下生成对应的keytab和principal；</li>
<li>要在hadoop集群的所有机器上创建ts账户：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo groupadd ts</div><div class="line">sudo useradd -g ts ts</div></pre></td></tr></table></figure>
<p>值得注意的是，如果要在yarn中模拟其它用户执行，需要在集群中所有机器上增加该用户。</p>
<p>后期有时间了详细说明原因。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark Web与history web配置与测试]]></title>
      <url>http://flume.cn/2016/09/07/Spark-Web%E4%B8%8Ehistory%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="Spark-Web的查看"><a href="#Spark-Web的查看" class="headerlink" title="Spark Web的查看"></a>Spark Web的查看</h2><ol>
<li>运行任意一个yarn-client或者yarn-cluster模式的spark测试用例</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="variable">$SPARK_HOME</span></div><div class="line">$ spark-submit --keytab <span class="built_in">test</span>Jars/op.keytab --principal op --master yarn-client --class SparkPi ./<span class="built_in">test</span>Jars/my.jar 4</div></pre></td></tr></table></figure>
<ol>
<li>打开<a href="http://yarn-host:8088/cluster页面，找到正在运行的Spark测试用例" target="_blank" rel="external">http://yarn-host:8088/cluster页面，找到正在运行的Spark测试用例</a></li>
</ol>
<img src="/2016/09/07/Spark-Web与history测试/spark-yarn-web1.png" alt="spark-yarn-web1.png" title="">
<p>点击上图所示的AM，就进入了Spark的Web界面：下图就是Spark程序的web界面，值得注意的是，这个web界面会随着spark程序的运行结束而消失<br><img src="/2016/09/07/Spark-Web与history测试/spark-yarn-web2.png" alt="spark-yarn-web2.png" title=""></p>
<h2 id="Spark-history-Web查看测试"><a href="#Spark-history-Web查看测试" class="headerlink" title="Spark history Web查看测试"></a>Spark history Web查看测试</h2><p>在Kerberos环境下要启动spark history配置，需要在 spark -env下面开启如下配置 SPARK_HISTORY_OPTS：</p>
<figure class="highlight bash"><figcaption><span>spark-env.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># history需要的Kerberos配置</span></div><div class="line">SPARK_HISTORY_OPTS=<span class="string">"-Dspark.history.ui.port=8777 -Dspark.history.retainedApplications=10 -Dspark.history.fs.logDirectory=hdfs://ns/user/op/sparkHistoryServer -Dspark.history.kerberos.enabled=true -Dspark.history.kerberos.principal=op @HADOOP.CHINATELECOM.CN -Dspark.history.kerberos.keytab=/usr/op/sparkKerbersTest/spark-1.6.2-bin-hadoop2.6/conf/op.keytab"</span></div></pre></td></tr></table></figure>
<p>然后通过 ./sbin/start-history-server.sh 命令启动history-server<br>然后登录 <a href="http://spark-client-ip:8777/" target="_blank" rel="external">http://spark-client-ip:8777/</a> 即可查看 spark-history-web</p>
<img src="/2016/09/07/Spark-Web与history测试/spark-yarn-web3.png" alt="spark-yarn-web3.png" title="">]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kerberos下spark客户端的配置]]></title>
      <url>http://flume.cn/2016/09/06/kerberos%E4%B8%8Bspark%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Kerberos环境下spark的客户端配置并不是很多，主要需要配置的是spark-history与spark-sql</p>
<p>软件版本：spark-1.6.2</p>
<p>注：正式环境中，需要将spark客户端的路径放入其它短路经，比如 /etc/local/spark 等<br><figure class="highlight bash"><figcaption><span>spark-env.sh</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由于此处的 hive-site.xml 需要做一定修改，所以需要将hive-site.xml core-site.xml hdfs-site.xml yarn-site.xml等导入conf文件夹下</span></div><div class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/usr/op/sparkKerbersTest/spark-1.6.2-bin-hadoop2.6/conf</div><div class="line"></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.7.0_75</div><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/lib/hadoop/lib/native/</div><div class="line"><span class="built_in">export</span> SPARK_LIBRARY_PATH=/usr/lib/hadoop/lib/native/:<span class="variable">$SPARK_LIBRARY_PATH</span></div><div class="line"></div><div class="line"><span class="comment"># history需要的Kerberos配置</span></div><div class="line">SPARK_HISTORY_OPTS=<span class="string">"-Dspark.history.ui.port=8777 -Dspark.history.retainedApplications=10 -Dspark.history.fs.logDirectory=hdfs://ns/user/op/sparkHistoryServer -Dspark.history.kerberos.enabled=true -Dspark.history.kerberos.principal=op    @HADOOP.CHINATELECOM.CN -Dspark.history.kerberos.keytab=/usr/op/sparkKerbersTest/spark-1.6.2-bin-hadoop2.6/conf/op.keytab"</span></div></pre></td></tr></table></figure></p>
<h4 id="从hive-keytab-hiveserver创建spark-thrift-server的keytab"><a href="#从hive-keytab-hiveserver创建spark-thrift-server的keytab" class="headerlink" title="从hive.keytab_hiveserver创建spark-thrift-server的keytab"></a>从hive.keytab_hiveserver创建spark-thrift-server的keytab</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-rw------- 1 hive hive     424 8月  23 09:55 hive.keytab_hiveserver</div><div class="line">-rw------- 1 op   bigdata  424 9月   3 12:25 hive.keytab_sparkthrift</div></pre></td></tr></table></figure>
<h4 id="hive-site的配置"><a href="#hive-site的配置" class="headerlink" title="hive-site的配置"></a>hive-site的配置</h4><p>修改hive-site.xml：</p>
<ul>
<li>增加hive.server2.thrift.bind.host</li>
<li>修改hive.server2.thrift.port为10010</li>
<li>修改hive.server2.authentication.kerberos.keytab为如下</li>
</ul>
<figure class="highlight bash"><figcaption><span>hive-site.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">145 &lt;!-- ZooKeeper conf--&gt;</div><div class="line">146 &lt;property&gt;</div><div class="line">147   &lt;name&gt;hive.server2.enable.doAs&lt;/name&gt;</div><div class="line">148   &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</div><div class="line">149   &lt;description&gt; Impersonate the connected user &lt;/description&gt;</div><div class="line">150 &lt;/property&gt;</div><div class="line">151 &lt;property&gt;</div><div class="line">152   &lt;name&gt;hive.server2.thrift.port&lt;/name&gt;</div><div class="line">153   &lt;value&gt;10010&lt;/value&gt;</div><div class="line">154   &lt;description&gt;TCP port number to listen on, default 10000&lt;/description&gt;</div><div class="line">155 &lt;/property&gt;</div><div class="line">156 </div><div class="line">157 &lt;property&gt;</div><div class="line">158    &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</div><div class="line">159    &lt;value&gt;<span class="built_in">test</span>-bdd-076&lt;/value&gt;</div><div class="line">160    &lt;description&gt;TCP port number to listen on, default 10000&lt;/description&gt;</div><div class="line">161  &lt;/property&gt;</div><div class="line">162 </div><div class="line">163 &lt;property&gt;</div><div class="line">164   &lt;name&gt;hive.metastore.execute.setugi&lt;/name&gt;</div><div class="line">165   &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</div><div class="line">166 &lt;/property&gt;</div><div class="line">...</div><div class="line">209 &lt;property&gt;</div><div class="line">210    &lt;name&gt;hive.server2.authentication.kerberos.principal&lt;/name&gt;</div><div class="line">211    &lt;value&gt;hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN&lt;/value&gt;</div><div class="line">212  &lt;/property&gt;</div><div class="line">213 &lt;property&gt;</div><div class="line">214   &lt;name&gt;hive.server2.authentication.kerberos.keytab&lt;/name&gt;</div><div class="line">215   &lt;value&gt;/etc/hive/conf/hive.keytab_sparkthrift&lt;/value&gt;</div><div class="line">216 &lt;/property&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Kerberos环境下配置hue通过spark-thrift-server访问SparkSql]]></title>
      <url>http://flume.cn/2016/09/05/%E5%9C%A8Kerberos%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AEhue%E9%80%9A%E8%BF%87spark-thrift-server%E8%AE%BF%E9%97%AESparkSql/</url>
      <content type="html"><![CDATA[<p>hue-spark-thriftserver-kerberos</p>
<h3 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h3><p>Kerberos项目最后要对基于Hue的TODP平台进行安全测试，在搭建配置的过程中踩了一些坑，现在把其中的配置与步骤进行总结，以免以后忘记。</p>
<p>其中用到以下代号：<br>40机器：hue平台所在的机器<br>76机器：spark thrift服务端口10010，hive-thrift-server服务端口10000<br>74机器：spark thrift服务端口10010，hive-thrift-server服务端口10000<br>TEST-BDD-HIVESERVER机器：负载均衡所在的机器，负载均衡机器需要配合开启10000和10010端口</p>
<p>在kerberos认证下, sparksql的thriftserver连接hiveserver2变得相对复杂，主要是因为各种kerberos认证出现各种问题。后来由于hive使用了负载均衡，所以spark-sql也需加入负载均衡，否则不能使用，就是这个负载均衡服务器的加入使得kerberos认证变得更加复杂，使得不明原理的新手在配置kerberos的keytab与principal时各种不匹配。这里是通过Hue可视化界面调用后台的sparksql,然后sparksql通过JDBC连接Hive的hiveServer2服务。</p>
<h3 id="40机器hue端配置"><a href="#40机器hue端配置" class="headerlink" title="40机器hue端配置"></a>40机器hue端配置</h3><p>进入40机器hue所在的目录<br><figure class="highlight bash"><figcaption><span>hue.ini</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/lib/hue/ </div><div class="line">$ vim desktop/conf/hue.ini</div></pre></td></tr></table></figure></p>
<p>修改hue的配置文件如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1119 [spark]</div><div class="line">...</div><div class="line">1134   <span class="comment"># spark-sql config</span></div><div class="line">1135   spark_sql_server_host=TEST-BDD-HIVESERVER</div><div class="line">1136   <span class="comment">## spark_sql_server_port=10010</span></div></pre></td></tr></table></figure></p>
<p>由于此处使用了负载均衡，所以上述TEST-BDD-HIVESERVER指向的是负载均衡所在的ip，最终会转发给两个spark-thrift-server</p>
<h3 id="Kerberos服务器端配置"><a href="#Kerberos服务器端配置" class="headerlink" title="Kerberos服务器端配置"></a>Kerberos服务器端配置</h3><p>生成类似 hive/test-bdd-hiveserver@HADOOP.CHINATELECOM.CN 的keytab，配置了负载均衡后，使用test-bdd-hiveserver</p>
<h3 id="76机器上的配置"><a href="#76机器上的配置" class="headerlink" title="76机器上的配置"></a>76机器上的配置</h3><p>76机器与74机器配置步骤一样，只是hive-site.xml需要改一处，将下面的 076改成 074即可<br><figure class="highlight bash"><figcaption><span>hive-site.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</div><div class="line">   &lt;value&gt;<span class="built_in">test</span>-bdd-076&lt;/value&gt;</div><div class="line">   &lt;description&gt;TCP port number to listen on, default 10000&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>其它都一样，所以在这里只写076的配置步骤</p>
<h4 id="从hive-keytab创建spark的keytab"><a href="#从hive-keytab创建spark的keytab" class="headerlink" title="从hive.keytab创建spark的keytab"></a>从hive.keytab创建spark的keytab</h4><p>然后在/etc/hive/conf/下创建spark需要的keytab，在这里使用hiveserver的keytab，将已有的hive.keytab_hiveserver 拷贝成 hive.keytab_sparkthrift，然后修改权限如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-rw------- 1 hive hive     424 8月  23 09:55 hive.keytab_hiveserver</div><div class="line">-rw------- 1 op   bigdata  424 9月   3 12:25 hive.keytab_sparkthrift</div></pre></td></tr></table></figure>
<p>修改好后用如下命令检查：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sudo klist -k hive.keytab_sparkthrift </div><div class="line">Keytab name: FILE:hive.keytab_sparkthrift</div><div class="line">KVNO Principal</div><div class="line">---- --------------------------------------------------------------------------</div><div class="line">   1 hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN</div><div class="line">   1 hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN</div><div class="line">   1 hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN</div><div class="line">   1 hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN</div><div class="line">   1 hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN</div></pre></td></tr></table></figure>
<p>如果klist是如上结果，就对了</p>
<h4 id="配置spark需要的hive-site-xml"><a href="#配置spark需要的hive-site-xml" class="headerlink" title="配置spark需要的hive-site.xml"></a>配置spark需要的hive-site.xml</h4><p>由于需要修改hive的一些配置，进入76机器spark所在的目录，将<code>/etc/hive/conf/</code>下的<code>hive-site.xml</code>拷贝到spark的conf下，赋予权限并修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo cp /etc/hive/conf/hive-site.xml <span class="variable">$SPARK_HOME</span>/conf/</div><div class="line">$ <span class="built_in">cd</span> <span class="variable">$SPARK_HOME</span></div><div class="line">$ sudo chmod op conf/hive-site.xml</div><div class="line">$ vim conf/hive-site.xml</div></pre></td></tr></table></figure></p>
<p>修改hive-site.xml,增加hive.server2.thrift.bind.host</p>
<figure class="highlight bash"><figcaption><span>hive-site.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!-- ZooKeeper conf--&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hive.server2.enable.doAs&lt;/name&gt;</div><div class="line">  &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</div><div class="line">  &lt;description&gt; Impersonate the connected user &lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hive.server2.thrift.port&lt;/name&gt;</div><div class="line">  &lt;value&gt;10010&lt;/value&gt;</div><div class="line">  &lt;description&gt;TCP port number to listen on, default 10000&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line"></div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</div><div class="line">   &lt;value&gt;<span class="built_in">test</span>-bdd-076&lt;/value&gt;</div><div class="line">   &lt;description&gt;TCP port number to listen on, default 10000&lt;/description&gt;</div><div class="line"> &lt;/property&gt;</div><div class="line"></div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hive.metastore.execute.setugi&lt;/name&gt;</div><div class="line">  &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hive.server2.authentication.kerberos.principal&lt;/name&gt;</div><div class="line">   &lt;value&gt;hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN&lt;/value&gt;</div><div class="line"> &lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hive.server2.authentication.kerberos.keytab&lt;/name&gt;</div><div class="line">  &lt;value&gt;/etc/hive/conf/hive.keytab_sparkthrift&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line"></div><div class="line"><span class="comment">#### 启动Spark-thrift-server</span></div><div class="line">``` bash</div><div class="line">$ <span class="built_in">cd</span> <span class="variable">$SPARK_HOME</span></div><div class="line">$ ./sbin/start-thriftserver.sh</div></pre></td></tr></table></figure>
<p>可以通过如下日志查看是否启动成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim logs/spark-op-org.apache.spark.sql.hive.thriftserver.HiveThriftServer2-1-TEST-BDD-076.out</div></pre></td></tr></table></figure></p>
<p>启动成功会看到如下日志:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> 96 16/09/05 13:41:25 INFO AbstractService: Service:HiveServer2 is started.</div><div class="line"> 97 16/09/05 13:41:25 INFO HiveThriftServer2: HiveThriftServer2 started</div><div class="line"> 98 16/09/05 13:41:25 INFO UserGroupInformation: Login successful <span class="keyword">for</span> user hive/<span class="built_in">test</span>-bdd-hiveserver@HADOOP.CHINATELECOM.CN using keytab file /etc/hive/conf/hive.keytab_sparkthrift</div><div class="line"> 99 16/09/05 13:41:25 INFO AbstractDelegationTokenSecretManager: Updating the current master key <span class="keyword">for</span> generating delegation tokens</div><div class="line">100 16/09/05 13:41:25 INFO TokenStoreDelegationTokenSecretManager: New master key with key id=0</div><div class="line">101 16/09/05 13:41:25 INFO TokenStoreDelegationTokenSecretManager: Starting expired delegation token remover thread, tokenRemoverScanInterval=60 min(s)</div><div class="line">102 16/09/05 13:41:25 INFO AbstractDelegationTokenSecretManager: Updating the current master key <span class="keyword">for</span> generating delegation tokens</div><div class="line">103 16/09/05 13:41:25 INFO TokenStoreDelegationTokenSecretManager: New master key with key id=1</div><div class="line">104 16/09/05 13:41:25 INFO ThriftCLIService: Starting ThriftBinaryCLIService on port 10010 with 5...500 worker threads</div></pre></td></tr></table></figure></p>
<h3 id="负载均衡机器的查看"><a href="#负载均衡机器的查看" class="headerlink" title="负载均衡机器的查看"></a>负载均衡机器的查看</h3><p>进入 67.121机器<br>输入 命令 <code>sudo ipvsadm -ln</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ sudo ipvsadm -ln</div><div class="line">IP Virtual Server version 1.2.1 (size=4194304)</div><div class="line">Prot LocalAddress:Port Scheduler Flags</div><div class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</div><div class="line">TCP  10.142.67.123:10000 wlc persistent 7200 synproxy</div><div class="line">  -&gt; 10.142.78.74:10000           FullNat 50     3          0         </div><div class="line">  -&gt; 10.142.78.76:10000           FullNat 50     0          0         </div><div class="line">TCP  10.142.67.123:10010 wlc persistent 7200 synproxy</div><div class="line">  -&gt; 10.142.78.74:10010           FullNat 50     0          0         </div><div class="line">  -&gt; 10.142.78.76:10010           FullNat 50     2          0</div></pre></td></tr></table></figure>
<p>就可以看到负载均衡的情况了：</p>
<h3 id="踩坑说明以及解决方案"><a href="#踩坑说明以及解决方案" class="headerlink" title="踩坑说明以及解决方案"></a>踩坑说明以及解决方案</h3><h4 id="缺少配置kerberos认证错误"><a href="#缺少配置kerberos认证错误" class="headerlink" title="缺少配置kerberos认证错误"></a>缺少配置kerberos认证错误</h4><p>需要在hive-site.xml文件中添加kerberos认证相关配置</p>
<h4 id="kerberos认证失败"><a href="#kerberos认证失败" class="headerlink" title="kerberos认证失败"></a>kerberos认证失败</h4><p>1)  在hive-site.xml中配置好kerberos认证，但是op用户下无法读取hive.keytab的问题，出现unable to login …given keytab/principal 以及Unable to obtain password from user。因为hive.keytab 是hive用户创建的，op用户无法读取，导致看似kerberos已经配置好，<br>但是程序没有读取权限，依旧认为没有配置好，这是会有在日志文件中会有NULLPOINT类似的错误提示，说明是没有读取权限。解决方案是复制hive.keytab到op用户下。<br>2）在hue界面连接spark时可能会出现10010端口不能连接的问题，这是sparkthrift没有启动导致的；<br>3）spark thriftserver明明已经启动，但是hue界面仍旧不能连接，出现TTransportException的错误，原因是kerberos配置没有配置正确，即没有配置kerberos认证的keytab与principal。hive/test-bdd-hiveserver必须与hive.keytab_hiveserver配套使用，同理，test-bdd-074或者 test-bdd-076必须与hive/test-bdd-74或者hive/test-bdd-76配套使用，否则出现认证失败的问题。</p>
<h4 id="hue的配置问题。"><a href="#hue的配置问题。" class="headerlink" title="hue的配置问题。"></a>hue的配置问题。</h4><p>在hue的desktop/conf目录下hue.ini文件中，主要配置spark_sql_server_host，也就是spark thriftserver所在主机，这里可以是负载均衡服务器TEST-BDD-HIVESERVER,spark_sql_server_port 是spark thriftserver的服务端口。<br>需要注意的是，加上kerberos认证后，主机名不能是ip地址的形式，需要FQDN的形式。hive的配置需要注意的是hive_server_host，这里绝对不能是hiveserver2的服务器的地址，一定是负载均衡服务器的地址，不然在hue界面连接HIVE时出现<br>Unable to access databases, Query Server or Metastore may be down.的错误以及GSS initial failed的错误，无法访问hive数据库。</p>
<h4 id="metastore的问题"><a href="#metastore的问题" class="headerlink" title="metastore的问题"></a>metastore的问题</h4><p>连接metastore也需要principal的认证。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">20 &lt;property&gt;</div><div class="line">221   &lt;name&gt;hive.metastore.sasl.enabled&lt;/name&gt;</div><div class="line">222   &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</div><div class="line">223   &lt;description&gt;If <span class="literal">true</span>, the metastore thrift interface will be secured with SASL. Clients must authenticate with Kerberos.&lt;/description&gt;</div><div class="line">224 &lt;/property&gt;</div><div class="line">225 &lt;property&gt;</div><div class="line">226   &lt;name&gt;hive.metastore.kerberos.principal&lt;/name&gt;</div><div class="line">227   &lt;value&gt;hive/_HOST@HADOOP.CHINATELECOM.CN&lt;/value&gt;</div><div class="line">228   &lt;description&gt;The service principal <span class="keyword">for</span> the metastore thrift server. The special string _HOST will be replaced automatically with the correct host name.&lt;/description&gt;</div><div class="line">229 &lt;/property&gt;</div></pre></td></tr></table></figure></p>
<p>之所以问题多多，主要原因是对kerberos+Hive+lvs整体原理没有搞清楚，以至于在配置过程中出现各种错误。我们搭建的hive集群有74,76两台主机，spark thriftserver也有74,76两台主机，负载均衡服务器在test-bdd-hiveserver上。在配置时，需要将spark-sql-server-host配置成test-bdd-hiveserver,因为对spark而言，74与76上的hiveserver是一个整体，不能配置成单一的主机，不然lvs可能会将服务分到另外一台主机上，造成主机配置失败。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark支持snappy压缩踩坑总结]]></title>
      <url>http://flume.cn/2016/08/15/spark%E6%94%AF%E6%8C%81snappy%E5%8E%8B%E7%BC%A9%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="配置snappy压缩"><a href="#配置snappy压缩" class="headerlink" title="配置snappy压缩"></a>配置snappy压缩</h3><p>首先在/usr/lib/hadoop/lib/目录下配置lzo相关的包，<br>然后在spark客户端配置如下：</p>
<figure class="highlight bash"><figcaption><span>spark-default.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spark.driver.extraClassPath /usr/lib/hadoop/lib/*</div><div class="line">spark.driver.extraLibraryPath /usr/lib/hadoop/lib/native</div><div class="line">spark.executor.extraClassPath /usr/lib/hadoop/lib/*</div><div class="line">spark.executor.extraLibraryPath /usr/lib/hadoop/lib/native</div></pre></td></tr></table></figure>
<p>如上配置，即可，但是为了得到这么小小的一点配置，浪费了三天的时间啊，网上的资料都是转载，无法解决问题。最新的官网的配置文件中并没有关于spark.executor.extraClassPath的配置，查了源码才得知，作为教训。以后出现问题要冷静思考，不要简单的去网上搜索，先判断问题出现的原因，知其所以然，必要时要去源码中查询，否则会浪费很多时间，走很多弯路。</p>
<h3 id="踩坑集锦"><a href="#踩坑集锦" class="headerlink" title="踩坑集锦"></a>踩坑集锦</h3><p>首先，会遇到这个错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Compression codec com.hadoop.compression.lzo.LzoCodec not found</div></pre></td></tr></table></figure>
<p>原因是spark-env.sh的配置文件缺少关联hadoop的配置语句</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> SPARK_LIBRARY_PATH=<span class="variable">$SPARK_LIBRARY_PATH</span>:/usr/lib/hadoop/lib/native/:/usr/lib/hadoop/lib/*</div></pre></td></tr></table></figure>
<p>然后yarn-cluster模式下snappy压缩总会报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="number">16</span>/<span class="number">08</span>/<span class="number">08</span> <span class="number">19</span>:<span class="number">05</span>:<span class="number">03</span> DEBUG util.NativeCodeLoader: java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</div><div class="line"><span class="number">16</span>/<span class="number">08</span>/<span class="number">08</span> <span class="number">19</span>:<span class="number">05</span>:<span class="number">03</span> WARN util.NativeCodeLoader: Unable to load <span class="keyword">native</span>-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes where applicable</div><div class="line"><span class="number">1</span>）</div><div class="line"><span class="number">16</span>/<span class="number">08</span>/<span class="number">08</span> <span class="number">19</span>:<span class="number">05</span>:<span class="number">03</span> DEBUG util.PerformanceAdvisory: Both <span class="keyword">short</span>-circuit local reads and UNIX domain socket are disabled.</div><div class="line"><span class="number">16</span>/<span class="number">08</span>/<span class="number">08</span> <span class="number">19</span>:<span class="number">05</span>:<span class="number">03</span> DEBUG sasl.DataTransferSaslUtil: DataTransferProtocol not using SaslPropertiesResolver, no QOP found in configuration <span class="keyword">for</span> dfs.data.transfer.protection</div><div class="line"><span class="number">16</span>/<span class="number">08</span>/<span class="number">08</span> <span class="number">19</span>:<span class="number">05</span>:<span class="number">03</span> ERROR lzo.GPLNativeCodeLoader: Could not load <span class="keyword">native</span> gpl library</div><div class="line">java.lang.UnsatisfiedLinkError: no gplcompression in java.library.path</div><div class="line"> at java.lang.ClassLoader.loadLibrary(ClassLoader.java:<span class="number">1886</span>)</div><div class="line"> at java.lang.Runtime.loadLibrary0(Runtime.java:<span class="number">849</span>)</div><div class="line"> at java.lang.System.loadLibrary(System.java:<span class="number">1088</span>)</div><div class="line"> at com.hadoop.compression.lzo.GPLNativeCodeLoader.&lt;clinit&gt;(GPLNativeCodeLoader.java:<span class="number">32</span>)</div><div class="line"> at com.hadoop.compression.lzo.LzoCodec.&lt;clinit&gt;(LzoCodec.java:<span class="number">71</span>)</div><div class="line"> at java.lang.Class.forName0(Native Method)</div><div class="line"> at java.lang.Class.forName(Class.java:<span class="number">274</span>)</div><div class="line"> at org.apache.hadoop.conf.Configuration.getClassByNameOrNull(Configuration.java:<span class="number">2013</span>)</div><div class="line"> at org.apache.hadoop.conf.Configuration.getClassByName(Configuration.java:<span class="number">1978</span>)</div><div class="line"> at org.apache.hadoop.io.compress.CompressionCodecFactory.getCodecClasses(CompressionCodecFactory.java:<span class="number">128</span>)</div><div class="line"> at org.apache.hadoop.io.compress.CompressionCodecFactory.&lt;init&gt;(CompressionCodecFactory.java:<span class="number">175</span>)</div><div class="line"> at org.apache.hadoop.mapred.TextInputFormat.configure(TextInputFormat.java:<span class="number">45</span>)</div><div class="line"> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div></pre></td></tr></table></figure>
<p>这个究其原因就是程序运行的那个节点找不到lzo解压的包导致的，官网中只说明了 spark.driver.extraClassPath，但并没有说明配置spark.executor.extraClassPath 与 spark.executor.extraLibraryPath，导致不管怎么根据网上博客或者官网配置配，executor还是找不到lzo压缩相关的包，后来聪哥通过源码查看才发现有这么一个参数配置，只是各类文档中都没有，加上就ok了~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的“钩子”]]></title>
      <url>http://flume.cn/2016/07/18/Java%E4%B8%AD%E7%9A%84%E2%80%9C%E9%92%A9%E5%AD%90%E2%80%9D/</url>
      <content type="html"><![CDATA[<p>最近看银辉大哥写的对hdfs中小文件打包成大文件的程序的时候，发现他在代码中巧妙地运用了“钩子”，是用匿名内部类来实现的，感觉很酷，所以决定好好向大神学习一下使用匿名内部类实现钩子的用法：</p>
<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>为了让我能够快速了解这个方法的使用，银辉大哥首先给我出个题：<br>比如上医院看病，一般会有　挂号，问诊，开药，付费，拿药　几个过程，但是不同的病科室不同，大夫不同，药方不同，付费方式不同，取药方式不同。写一个程序，打印不同的看病流程：如一个人感冒：挂呼吸科，看张大夫，开了砒霜，支付宝支付，快递拿药。<br>另外一个人胃痛，挂了内科，看了王大夫，开了鹤顶红，没有付钱，直接抢药。</p>
<h4 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h4><p>模板方法模式（Template Method）：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。该模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br>使用场景：<br>1、一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。<br>2、各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。即“重分解以一般化”，首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。<br>3、控制子类扩展。模板方法只在特定点调用“Hook Method（钩子方法）”操作，这样就只允许在这些点进行扩展。</p>
<img src="/2016/07/18/Java中的“钩子”/hook.jpg" alt="hook.jpg" title="">
<h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><h5 id="interface-GoHospital-java"><a href="#interface-GoHospital-java" class="headerlink" title="interface GoHospital.java:"></a>interface GoHospital.java:</h5><pre><code>/**
 * Created by Adam on 2016/5/27.
 */
public interface GoHospital extends Runnable{
    /**
     * 挂号
     * @return 科室名
     */
    void onRegister(ActionHook register);

    /**
     * 问诊
     * @return 病名
     */
    void onInterview(ActionHook interview);

    /**
     * 开药
     * @return 药名
     */
    void onMedicine(ActionHook medicine);

    /**
     * 付费
     * @return 付了多少钱
     */
    void onPay(ActionHook pay);

    /**
     * 返回取药方式
     * @return 取药方式
     */
    void onGetMedicine(ActionHook getMedicine);

}
</code></pre><h6 id="AbsGoHospital-java"><a href="#AbsGoHospital-java" class="headerlink" title="AbsGoHospital.java"></a>AbsGoHospital.java</h6><pre><code>/**
 * Created by Adam on 2016/5/27.
 */
abstract class AbsGoHospital implements GoHospital{
    private ActionHook register;
    private ActionHook intterview;
    private ActionHook medicine;
    private ActionHook pay;
    private ActionHook getMedicine;

    public void run(){
        if (register != null) {
            boolean isRegisterOk = register.exec();
            if (isRegisterOk &amp;&amp; intterview != null) {
                boolean isIntterviewOk = intterview.exec(isRegisterOk);
                if (isIntterviewOk &amp;&amp; medicine != null) {
                    boolean isMedicineOK = medicine.exec();
                    if (isMedicineOK &amp;&amp; pay != null) {
                        boolean isPayOk = pay.exec();
                        if (isPayOk &amp;&amp; getMedicine != null) {
                            boolean isGetMedicineOk = getMedicine.exec();
                        }
                    }
                }
            }
        }

    }



    /**
     * 挂号
     * @return 科室名
     */
    public void onRegister(ActionHook register) {
        this.register = register;
    }

    /**
     * 问诊
     * @return 病名
     */
    public void onInterview(ActionHook interview) {
        this.intterview = interview;
    }

    /**
     * 开药
     * @return 药名
     */
    public void onMedicine(ActionHook medicine) {
        this.medicine = medicine;
    }

    /**
     * 付费
     * @return 付了多少钱
     */
    public void onPay(ActionHook pay) {
        this.pay = pay;
    }

    /**
     * 返回取药方式
     * @return 取药方式
     */
    public void onGetMedicine(ActionHook getMedicine) {
        this.getMedicine = getMedicine;
    }

}
</code></pre><h6 id="定义一个钩子"><a href="#定义一个钩子" class="headerlink" title="定义一个钩子"></a>定义一个钩子</h6><pre><code>/**
 * Created by Adam on 2016/5/27.
 */
public interface ActionHook {
    /**
     * 钩子逻辑
     * @param args 任意参数
     */
    boolean exec(Object ... args);
}
</code></pre><h6 id="定义GoHostpital的实现类"><a href="#定义GoHostpital的实现类" class="headerlink" title="定义GoHostpital的实现类"></a>定义GoHostpital的实现类</h6><pre><code>/**
 * Created by Adam on 2016/5/27.
 */
public class XiaogangGoHopital extends AbsGoHospital {
    // todo 这里的字段，方法都可以用enum扩展，由于本例为了学习，所以略过
    private String name;
    private String diease;
    private String paymentPre;
    private String getMedicineWay;

    public XiaogangGoHopital(String name, String diease, String paymentPre, String getMedicineWay) {
        this.name = name;
        this.diease = diease;
        this.paymentPre = paymentPre;
        this.getMedicineWay = getMedicineWay;
    }

    @Override
    public String toString() {
        return &quot;XiaogangGoHopital{&quot; +
                &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +
                &quot;, diease=&apos;&quot; + diease + &apos;\&apos;&apos; +
                &quot;, paymentPre=&apos;&quot; + paymentPre + &apos;\&apos;&apos; +
                &quot;, getMedicineWay=&apos;&quot; + getMedicineWay + &apos;\&apos;&apos; +
                &apos;}&apos;;
    }

    public String getDiease() {
        return diease;
    }

    public void setDiease(String diease) {
        this.diease = diease;
    }

    public String getPaymentPre() {
        return paymentPre;
    }

    public void setPaymentPre(String paymentPre) {
        this.paymentPre = paymentPre;
    }

    public String getGetMedicineWay() {
        return getMedicineWay;
    }

    public void setGetMedicineWay(String getMedicineWay) {
        this.getMedicineWay = getMedicineWay;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public void onRegister(final ActionHook register) {
        super.onRegister(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                register.exec(args);
                System.out.println(name + &quot;骑电瓶车去的&quot;);
                return true;
            }
        });
    }
}
</code></pre><h6 id="LiGoHopital-实现类"><a href="#LiGoHopital-实现类" class="headerlink" title="LiGoHopital 实现类"></a>LiGoHopital 实现类</h6><pre><code>/**
 * Created by Adam on 2016/5/27.
 */
public class LiGoHopital extends AbsGoHospital {
    // todo 这里的字段，方法都可以用enum扩展，由于本例为了学习，所以略过
    private String name;
    private String diease;
    private String paymentPre;
    private String getMedicineWay;

    public LiGoHopital(String name, String diease, String paymentPre, String getMedicineWay) {
        this.name = name;
        this.diease = diease;
        this.paymentPre = paymentPre;
        this.getMedicineWay = getMedicineWay;
    }

    @Override
    public String toString() {
        return &quot;XiaogangGoHopital{&quot; +
                &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +
                &quot;, diease=&apos;&quot; + diease + &apos;\&apos;&apos; +
                &quot;, paymentPre=&apos;&quot; + paymentPre + &apos;\&apos;&apos; +
                &quot;, getMedicineWay=&apos;&quot; + getMedicineWay + &apos;\&apos;&apos; +
                &apos;}&apos;;
    }

    public String getDiease() {
        return diease;
    }

    public void setDiease(String diease) {
        this.diease = diease;
    }

    public String getPaymentPre() {
        return paymentPre;
    }

    public void setPaymentPre(String paymentPre) {
        this.paymentPre = paymentPre;
    }

    public String getGetMedicineWay() {
        return getMedicineWay;
    }

    public void setGetMedicineWay(String getMedicineWay) {
        this.getMedicineWay = getMedicineWay;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public void onRegister(final ActionHook register) {
        super.onRegister(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                register.exec(args);
                System.out.println(name + &quot;ta开车去的&quot;);
                return true;
            }
        });
    }

    @Override
    public void onPay(final ActionHook pay) {
        super.onPay(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                pay.exec();
                System.out.println(&quot;他不喜欢付钱&quot;);
                return true;
            }
        });
    }
}
</code></pre><h6 id="mainz测试函数"><a href="#mainz测试函数" class="headerlink" title="mainz测试函数"></a>mainz测试函数</h6><pre><code>/**
 * Created by Adam on 2016/5/27.
 */
public class Main {
    public static void main(String[] args) {
        XiaogangGoHopital xiaogangGoHopital = new XiaogangGoHopital(&quot;Gang&quot;, &quot;jiba&quot;, &quot;zhifubao&quot;, &quot;shunfeng&quot;);
        xiaogangGoHopital.onRegister(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;=====\n外科&quot;);
                return true;
            }
        });
        xiaogangGoHopital.onInterview(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(args[0]);
                System.out.println(&quot;右臂肌肉损伤&quot;);
                return true;
            }
        });
        xiaogangGoHopital.onMedicine(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;钙片&quot;);
                return true;
            }
        });
        xiaogangGoHopital.onPay(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;支付宝付了 123 元&quot;);
                return true;
            }
        });
        xiaogangGoHopital.onGetMedicine(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;顺风快递&quot;);
                return true;
            }
        });

        Thread thread = new Thread(xiaogangGoHopital);
        thread.start();



        LiGoHopital liGoHopital = new LiGoHopital(&quot;Li&quot;, &quot;jiba&quot;, &quot;zhifubao&quot;, &quot;shunfeng&quot;);
        liGoHopital.onRegister(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;=====\n外科&quot;);
                return true;
            }
        });
        liGoHopital.onInterview(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;右臂肌肉损伤&quot;);
                return true;
            }
        });
        liGoHopital.onMedicine(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;钙片&quot;);
                return true;
            }
        });
        liGoHopital.onPay(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;支付宝付了 123 元&quot;);
                return true;
            }
        });
        liGoHopital.onGetMedicine(new ActionHook() {
            @Override
            public boolean exec(Object... args) {
                System.out.println(&quot;顺风快递&quot;);
                return true;
            }
        });

        Thread thread2 = new Thread(liGoHopital);
        thread2.start();

    }
}
</code></pre><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>结果如下：</p>
<pre><code>=====
外科
Gang骑电瓶车去的
true
右臂肌肉损伤
钙片
支付宝付了 123 元
顺风快递
=====
外科
Lita开车去的
右臂肌肉损伤
钙片
支付宝付了 123 元
他不喜欢付钱
顺风快递
</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于工作任务蛮重，所以实现地很简单，详细代码可以参考hdfs小文件问题的归档程序；<br>理解设计模式，或者实现技巧，才是第一步，以后能够把它熟练运用才是最重要的！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用scaladiagrams工具构建scala项目的UML图]]></title>
      <url>http://flume.cn/2016/06/13/%E4%BD%BF%E7%94%A8scaladiagrams%E5%B7%A5%E5%85%B7%E6%9E%84%E5%BB%BAscala%E9%A1%B9%E7%9B%AE%E7%9A%84UML%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>阅读spark源码到storage这一块的时候，由于类的继承，调用之间的关系比较复杂，想要画一下UML图，idea自带的diagrams方法对java支持很好，但对scala的一些继承关系支持不佳，因此google了一下有没有可以画scala UML类图的工具，还真找到了：</p>
<p>我是在x64 windows10下面，使用gitbash工具作为shell命令行，亲测可用</p>
<h3 id="clone开源项目scaladiagrams并安装"><a href="#clone开源项目scaladiagrams并安装" class="headerlink" title="clone开源项目scaladiagrams并安装"></a>clone开源项目scaladiagrams并安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/mikeyhu/scaladiagrams.git</div><div class="line"><span class="built_in">cd</span> scaladiagrams</div><div class="line">./build</div></pre></td></tr></table></figure>
<h3 id="安装graphviz工具"><a href="#安装graphviz工具" class="headerlink" title="安装graphviz工具"></a>安装graphviz工具</h3><p>graphviz是一个开源的图形可视化软件，矢量图生成工具，与其他图形软件所不同，它的理念是“所想即所得”，通过dot语言来描述并绘制图形。<br><a href="http://www.graphviz.org/Download_windows.php" target="_blank" rel="external">http://www.graphviz.org/Download_windows.php</a><br>如上链接下载，然后安装即可，将安装路径加入path中，该工具的目的是通过scaladiagrams工具生成的依赖关系画图；</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="生成依赖关系文件dotFile"><a href="#生成依赖关系文件dotFile" class="headerlink" title="生成依赖关系文件dotFile"></a>生成依赖关系文件dotFile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./scaladiagrams --source <span class="string">"D:\spark-1.6.0\core\src\main\scala\org\apache\spark\storage"</span> &gt; dotFile</div></pre></td></tr></table></figure>
<p>dotFile文件就是依赖关系的文件：<br>官方命名为 dot语言，是一个表示图的语言，挺好玩的：</p>
<figure class="highlight scala"><figcaption><span>dot语言</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">digraph diagram &#123;</div><div class="line"><span class="string">"BlockException"</span> [style=filled, fillcolor=burlywood]</div><div class="line">  <span class="string">"BlockException"</span> -&gt; <span class="string">"Exception"</span>;</div><div class="line"></div><div class="line"><span class="string">"BlockFetchException"</span> [style=filled, fillcolor=burlywood]</div><div class="line">  <span class="string">"BlockFetchException"</span> -&gt; <span class="string">"SparkException"</span>;</div><div class="line"></div><div class="line"><span class="string">"BlockId"</span> [style=filled, fillcolor=darkorange]</div><div class="line">  </div><div class="line"></div><div class="line"><span class="string">"RDDBlockId"</span> [style=filled, fillcolor=burlywood]</div><div class="line">  <span class="string">"RDDBlockId"</span> -&gt; <span class="string">"BlockId"</span>;</div><div class="line"></div><div class="line">  。。。</div></pre></td></tr></table></figure>
<h4 id="使用graphviz工具画图"><a href="#使用graphviz工具画图" class="headerlink" title="使用graphviz工具画图"></a>使用graphviz工具画图</h4><p>生成svg文件，文件比较大的话建议用这个<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat dotFile | dot -Tsvg &gt; spark_storage.svg</div></pre></td></tr></table></figure></p>
<p>生成png文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat dotFile | dot -Tpng &gt; spark_storage.png</div></pre></td></tr></table></figure></p>
<p>画的效果部分截图如下（就是图有点扁平）：<br><img src="spark_storage_part.png" alt="spark_storage_part.png"></p>
<p>因为好玩，又画了一个spark_core的类图，太大了，不好看，为了部分解决这个问题，只要在dot文件的第一行加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rankdir=RL;</div></pre></td></tr></table></figure></p>
<p>即可使得图片稍微好看一点<br><img src="spark_storage_part2.png" alt="spark_storage_part2.png"></p>
<p>引用：<br><a href="http://stackoverflow.com/questions/7227952/generating-uml-diagram-from-scala-sources" target="_blank" rel="external">http://stackoverflow.com/questions/7227952/generating-uml-diagram-from-scala-sources</a><br><a href="https://github.com/mikeyhu/scaladiagrams" target="_blank" rel="external">https://github.com/mikeyhu/scaladiagrams</a><br><a href="http://www.graphviz.org/About.php" target="_blank" rel="external">http://www.graphviz.org/About.php</a><br><a href="http://www.graphviz.org/pdf/dotguide.pdf" target="_blank" rel="external">http://www.graphviz.org/pdf/dotguide.pdf</a><br><a href="http://www.tonyballantyne.com/graphs.html" target="_blank" rel="external">http://www.tonyballantyne.com/graphs.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala中_的用法]]></title>
      <url>http://flume.cn/2016/06/13/Scala%E4%B8%AD-%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在看Spark源码的过程中，遇到了很多对 下划线_的运用，后来经过查阅资料总结如下（感谢万能的知乎,StackOverFlow）：</p>
<ul>
<li><p>作为“通配符”，类似Java中的*。如import scala.math._</p>
</li>
<li><p>:<em>*作为一个整体，告诉编译器你希望将某个参数当作参数序列处理！例如val s = sum(1 to 5:</em><em>)就是将1 to 5当作参数序列处理。向函数或方法传入可变参数时不能直接传入Range或集合或数组对象，需要使用:_</em>转换才可传入<br>举个例子:</p>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(nums: <span class="type">Int</span>*) = &#123;</div><div class="line">	<span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> (num &lt;- nums) &#123;</div><div class="line">	    res += num</div><div class="line">	&#125;</div><div class="line">	res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述函数的参数是变长参数，如果直接调用 sum(1 to 5) 是不行的，这时候就需要使用 <code>sum(1 to 5:_*)</code>，这一招在spark源码中使用很多。</p>
<ul>
<li>指代一个集合中的每个元素。例如我们要在一个Array a中筛出偶数，并乘以2，可以用以下办法：<br>a.filter(<em>%2==0).map(2*</em>)。<br>又如要对缓冲数组ArrayBuffer b排序，可以这样：<br>val bSorted = b.sorted(_</li>
<li><p>在元组中，可以用方法_1, _2, _3访问组员。如a._2。其中句点可以用空格替代。</p>
</li>
<li><p>使用模式匹配可以用来获取元组的组员，例如]</p>
</li>
</ul>
<p>val (first, second, third) = t<br>但如果不是所有的部件都需要，那么可以在不需要的部件位置上使用<em>。比如上一例中val (first, second, </em>) = t</p>
<ul>
<li><p>还有一点，下划线_代表的是某一类型的默认值。<br>对于Int来说，它是0。<br>对于Double来说，它是0.0<br>对于引用类型，它是null。</p>
</li>
<li><p>访问tuple变量的某个元素时通过索引_n来取得第n个元素</p>
</li>
<li><p>类的setter方法，比如类A中定义了var f，则相当于定义了setter方法f<em>=，当然你可以自己定义f</em>=方法来完成更多的事情，比如设置前作一些判断或预处理之类的操作</p>
</li>
<li><p>用于将方法转换成函数，比如val f=sqrt _，以后直接调用f(250)就能求平方根了</p>
</li>
<li><p>Spark源码中，私有变量约定俗成以 _开头，比如： </p>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> _conf: <span class="type">SparkConf</span> = _</div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> _eventLogDir: <span class="type">Option</span>[<span class="type">URI</span>] = <span class="type">None</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> _eventLogCodec: <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">None</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> _env: <span class="type">SparkEnv</span> = _</div></pre></td></tr></table></figure>
<p>引用：</p>
<p><a href="https://www.zhihu.com/question/21622725/" target="_blank" rel="external">https://www.zhihu.com/question/21622725/</a><br><a href="http://stackoverflow.com/questions/8000903/what-are-all-the-uses-of-an-underscore-in-scala" target="_blank" rel="external">http://stackoverflow.com/questions/8000903/what-are-all-the-uses-of-an-underscore-in-scala</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala学习资料总结]]></title>
      <url>http://flume.cn/2016/05/20/Scala%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>还在路上，持续更新</p>
<p>以前对函数式编程很陌生，初学scala，感觉scala很难学，学习途中走了许多弯路，虽然目前本人只是连scala入门都算不上，希望能够分享一些资料和读后感给和我一样初学scala的同学，少一些搜集资料的时间，也希望能够抛砖引玉，也请更多高手们多多指教，随便修改本帖，有好资料随便贴上。</p>
<hr>
<h4 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h4><ul>
<li>1.1 快学Scala(Scala for the Impatient)</li>
</ul>
<p>只推荐这一本书，因为比较薄，看得时候也能看懂，但只是大概懂一点点<br>这本纸质书是李总买的公共书籍，也是本人学习scala的第一本书籍，因为读了一遍后并没有直接使用，故刚读完就把里面的知识给忘光了。直到最近需要模块地方知识翻第二遍的时候，才发现这本书写得蛮好的，从简单到困难都有提及，对我来说可以当成工具书。推荐给喜欢纸质书的同学。</p>
<p>本人这里有我从网上收集的每一章的课后答案，供大家下载使用：密码：7ry4</p>
<p><a href="http://pan.baidu.com/s/1cynlgU" target="_blank" rel="external">快学Scala 课后习题答案集合.rar</a></p>
<ul>
<li>1.2 Programming Scala 2nd edition (2015年出版）</li>
</ul>
<p>很有名，没看过，对我来说看起来太厚太慢了</p>
<h4 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h4><p>个人觉得scala的好的学习资料都在网上，只分享个人觉得好的，将我所知分享给各位：</p>
<ul>
<li>2.1 <a href="http://twitter.github.io/scala_school/" target="_blank" rel="external">Scala School</a></li>
</ul>
<p>吐血推荐，twitter的scala教学网站，言简意赅，真的非常非常好，我几经周转看到这个资料，有种相见恨晚的感觉。重要的是有中文版。</p>
<ul>
<li>2.2 <a href="http://www.scala-tour.com/#/welcome" target="_blank" rel="external">scala-tour</a></li>
</ul>
<p>网友做的scala学习网站，之前中文版有bug，现在中文版也很好用。是一个交互式的学习网站，右边是概念，左边直接是代码示例，可以直接修改并运行，很清晰，适合假期在家里学习。</p>
<ul>
<li>2.3 <a href="http://www.scala-lang.org/api/current/" target="_blank" rel="external">scala-api</a></li>
</ul>
<p>scala 官方API不解释，作为浏览器书签</p>
<ul>
<li>2.4 <a href="http://docs.scala-lang.org/cheatsheets/" target="_blank" rel="external">scala快查</a></li>
</ul>
<p>scala官方出的让你快速查阅的网页，就一页涵盖了基本所有的操作</p>
<ul>
<li>2.5 <a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">effective scala</a></li>
</ul>
<p>twitter的scala资深玩家讲述了一些scala编程需要注意的问题，在纠结用哪一种编程方式或者数据结构好的时候，这是一个很好的参考，有中文版</p>
<ul>
<li>2.6 <a href="http://hongjiang.info/scala/" target="_blank" rel="external">scala 说点什么</a></li>
</ul>
<p>hongjiang大神对scala的一些理解，写得很深入，之前很多scala的英文文档都是hongjiang大神翻译的</p>
<ul>
<li>2.7 <a href="http://www.tuicool.com/articles/2QFRZfE" target="_blank" rel="external">scala编程规范</a></li>
</ul>
<p>国人总结的scala编程规范，写得很全很详细，希望大家能够从中受到启发，写出优质的代码</p>
<ul>
<li>2.8 <a href="http://www.ibm.com/developerworks/cn/java/j-scala01228.html" target="_blank" rel="external">面向 Java 开发人员的 Scala 指南</a><br>面向 Java 开发人员的 Scala 指南</li>
</ul>
<h4 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h4><ul>
<li>3.1 Intellij Idea</li>
</ul>
<p>强烈推荐Intellij Idea（缺点是比较占内存），其对scala的支持是极好的，可以自动检测出你的代码中的一些问题，帮你看想看的源码，极好的单元测试的支持，遵循scala规范的自动格式化等功能</p>
<pre><code>IntelliJ IDEA https://www.jetbrains.com/idea/  
(请支持正版，下载后24小时内删除) http://idea.lanyus.com
</code></pre><p>Idea有一个scala学习的插件，左边是代码，右边是命令结果，学习效果比在shell中好很多。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[flume的http监控参数说明]]></title>
      <url>http://flume.cn/2016/05/18/flume%E7%9A%84http%E7%9B%91%E6%8E%A7%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>如果要启用http监控，需要在启动flume的时候添加如下命令：</p>
<pre><code>bin/flume-ng agent --conf conf --conf-file conf/avroToHdfs2.conf --name a1 -Dflume.monitoring.type=http -Dflume.monitoring.port=8533 -Dflume.root.logger=INFO,console
</code></pre><p>这样，在flume所在IP的8533端口，就可以接收到如下json串，可以在chrome浏览器上安装 JSONView这个插件，使得阅读这个json串更加方便。</p>
<p>对于一个source，一个channel和一个sink的agent监控如下：</p>
<p>其中 channel的ChannelFillPercentage值是比较具有明显特征的属性，代表channel满时的百分比，重点就在这个值，一般情况下，这个值小于0.01就代表很通畅，sink的速度比source的速度快，如果这个值超过了5，就代表肯定是sink的速度不够快，需要对sink进行调优，或者需要控制source的速率。如果这个值缓慢增加，增加到一定程度，就会出现数据丢失的情况。</p>
<p>结果: 其中src-1是子自定义的source名称</p>
<pre><code>{
&quot;SOURCE.src-1&quot;:{
    &quot;OpenConnectionCount&quot;:&quot;0&quot;,        //目前与客户端或sink保持连接的总数量(目前只有avro source展现该度量)
    &quot;Type&quot;:&quot;SOURCE&quot;,                    
    &quot;AppendBatchAcceptedCount&quot;:&quot;1355&quot;,    //成功提交到channel的批次的总数量
    &quot;AppendBatchReceivedCount&quot;:&quot;1355&quot;,    //接收到事件批次的总数量
    &quot;EventAcceptedCount&quot;:&quot;28286&quot;,    //成功写出到channel的事件总数量，且source返回success给创建事件的sink或RPC客户端系统
    &quot;AppendReceivedCount&quot;:&quot;0&quot;,        //每批只有一个事件的事件总数量(与RPC调用中的一个append调用相等)
    &quot;StopTime&quot;:&quot;0&quot;,            //source停止时自Epoch以来的毫秒值时间
    &quot;StartTime&quot;:&quot;1442566410435&quot;,    //source启动时自Epoch以来的毫秒值时间
    &quot;EventReceivedCount&quot;:&quot;28286&quot;,    //目前为止source已经接收到的事件总数量
    &quot;AppendAcceptedCount&quot;:&quot;0&quot;        //单独传入的事件到Channel且成功返回的事件总数量
},
&quot;CHANNEL.ch-1&quot;:{
    &quot;EventPutSuccessCount&quot;:&quot;28286&quot;,    //成功写入channel且提交的事件总数量
    &quot;ChannelFillPercentage&quot;:&quot;0.0&quot;,    //channel满时的百分比，重点就在这个值，一般情况下，这个值小于0.01就代表很通畅，sink的速度比source的速度快，如果这个值超过了5，就代表肯定是sink的速度不够快，需要对sink进行调优，或者需要控制source的速率。
    &quot;Type&quot;:&quot;CHANNEL&quot;,
    &quot;StopTime&quot;:&quot;0&quot;,            //channel停止时自Epoch以来的毫秒值时间
    &quot;EventPutAttemptCount&quot;:&quot;28286&quot;,    //Source尝试写入Channe的事件总数量
    &quot;ChannelSize&quot;:&quot;0&quot;,            //目前channel中事件的总数量
    &quot;StartTime&quot;:&quot;1442566410326&quot;,    //channel启动时自Epoch以来的毫秒值时间
    &quot;EventTakeSuccessCount&quot;:&quot;28286&quot;,    //sink成功读取的事件的总数量
    &quot;ChannelCapacity&quot;:&quot;1000000&quot;,       //channel的容量
    &quot;EventTakeAttemptCount&quot;:&quot;313734329512&quot; //sink尝试从channel拉取事件的总数量。这不意味着每次事件都被返回，因为sink拉取的时候channel可能没有任何数据
},
&quot;SINK.sink-1&quot;:{
    &quot;Type&quot;:&quot;SINK&quot;,
    &quot;ConnectionClosedCount&quot;:&quot;0&quot;,    //下一阶段或存储系统关闭的连接数量(如在HDFS中关闭一个文件)
    &quot;EventDrainSuccessCount&quot;:&quot;28286&quot;,    //sink成功写出到存储的事件总数量
    &quot;KafkaEventSendTimer&quot;:&quot;482493&quot;,    
    &quot;BatchCompleteCount&quot;:&quot;0&quot;,        //与最大批量尺寸相等的批量的数量
    &quot;ConnectionFailedCount&quot;:&quot;0&quot;,    //下一阶段或存储系统由于错误关闭的连接数量（如HDFS上一个新创建的文件因为超时而关闭）
    &quot;EventDrainAttemptCount&quot;:&quot;0&quot;,    //sink尝试写出到存储的事件总数量
    &quot;ConnectionCreatedCount&quot;:&quot;0&quot;,    //下一个阶段或存储系统创建的连接数量（如HDFS创建一个新文件）
    &quot;BatchEmptyCount&quot;:&quot;0&quot;,        //空的批量的数量，如果数量很大表示souce写数据比sink清理数据慢速度慢很多
    &quot;StopTime&quot;:&quot;0&quot;,            
    &quot;RollbackCount&quot;:&quot;9&quot;,            //
    &quot;StartTime&quot;:&quot;1442566411897&quot;,
    &quot;BatchUnderflowCount&quot;:&quot;0&quot;        //比sink配置使用的最大批量尺寸更小的批量的数量，如果该值很高也表示sink比souce更快
}
}
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[给未来的自己]]></title>
      <url>http://flume.cn/2012/11/11/%E7%BB%99%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      <content type="html"><![CDATA[<pre><code>—— 2012年秋于安大新区
</code></pre><!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=0 height=0 src="http://qqma.tingge123.com:823/mp3/2016-04-06/1459941003.mp3"></iframe> -->
<h2 id=""><a href="#" class="headerlink" title=""></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="http://qqma.tingge123.com:823/mp3/2016-04-06/1459941083.mp3"></iframe></h2><p>突然无名的落寞，对未来的迷茫，学业的压力，不自信的自信，也稍微有一点点陷入了比B哥还低级的纠结死循环，各种心绪缓缓积蓄，使人沉默，不过天天一起的基友室友一定不会这样认为，因为每天都会发明各种搞笑，笑得很猥琐……当然这个世界根本不可能有人能看出来……</p>
<p>过去的半年，最大的愿望就是自己能变得天真，单纯，幼稚，想了各种办法，看了些道家的调息养生法，有些效果，但是还是没有坚持下去，天真真的很难，否则不会有那么多人为了一丝内心的宁静归隐山林。当然我是极其世俗的，天天因为湖人输球而着急，因为皇马穆帅不用卡卡而愤恨，吃饭打水的路上还要计算最短的路线</p>
<p>好室友回来一天，真的很好。我从来实质上是不合群的，孤傲的本性也很愧对一些人，其实在意我对我好真心认为我好的人我怎么可能不知道，我身如浮萍，随风流落，一无所有，也无法给予什么，只能把这些感动记在心里。一年前这个时候天天思考什么是幸福，有了一点自己的答案：</p>
<p>“何谓幸福？每个人每时每刻都是幸福的，所谓幸福就是能意识到自己正沉浸在幸福之中并且加倍珍惜今天！”</p>
<p>深秋总是天蝎最喜欢的季节，其中的小波折，太跳跃性的感触以致于不想用文字来描述，不过天蝎总是带刺的，太容易最怕伤人伤己，当想玩真的时候，其实已经输了，更何况是这么貌似乐观开朗直接奇葩喜欢破釜沉舟的。我希望我的世界只有纯粹与简单，拒绝低俗凑合，我相信自己的主观能动性，再大的痛苦我也会笑着承受。</p>
<p>总是高估自己，过于乐观。也许什么都不是，一个晚上单曲循环听歌，《给未来的自己》，涛哥的AKG K7确实音质不错。放低姿态，相信所有已经做过的选择永远都是对的，快意回首，拂心莫停。</p>
<pre><code>《给未来的自己》

站在狂风的天台一望无际
这一座孤独的城市
在天空与高楼交界的尽头
谁追寻空旷的自由

阳光覆满这一刻宁静的我
隔绝了喧嚣和冷漠
川流不息的人游荡在街头
谁能听见谁的寂寞

找一个人惺惺相惜
找一颗心心心相印
在这个宇宙我是独一无二
没人能取代
不管怎样 怎样都会受伤
伤了又怎样
至少我很坚强
我很坦荡

夜幕笼罩灿烂的一片灯海
多少人多少种无奈
在星光里遗忘昨天的伤害
一觉醒来还有期待

我不放弃爱的勇气
我不怀疑会有真心
我要握住一个最美的梦
给未来的自己

一天一天 
 一天推翻一天
坚持的信仰
我会记住自己今天的模样

有一个人惺惺相惜
有一颗心心心相印
抛开过去我想认真去追寻
未来的自己

不管怎样 怎样都会受伤
伤了又怎样
至少我很坚强
我很坦荡

我不放弃爱的勇气
我不怀疑会有真心
我要握住一个最美的梦
给未来的自己

不管怎样 怎样都会受伤
伤了又怎样
至少我很坚强
我很坦荡

未来的你会懂我的疯狂
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[羁绊]]></title>
      <url>http://flume.cn/2010/09/12/%E7%BE%81%E7%BB%8A/</url>
      <content type="html"><![CDATA[<p>—— 2010年夏<br>—— 安大新区</p>
<hr>
<p>合肥的天亮的真早啊！以后晚上再也不喝咖啡了，现在时刻：5:03，天已亮了大半。这是我大学里第一次真正意义上的失眠，高考前夕和高考的那段时间曾有过几次，还有一次是来这边第一次去网吧包夜的时候，当然那个不算，因为我根本没有睡。</p>
<p>我一晚就这样静静地躺在床上，静静地听着室友的呼吸声伴随着打呼噜的rap，想着一些连我自己也搞不明白、想不清楚的事，然后听见了鸟鸣，车声，最后决定起来了，啊！好久没写日记了，是啊，我前些日子太平静太幸福了，就像大海里的小船。</p>
<p>最近脑海里出现最多的一个词：“羁绊”，也许是我最近疯狂地看 naruto（火影忍者）的原因吧，感觉不错，令我有些着迷了，有时候把我的另一个幻想空间移植到这个空间里来了，让室友都听不清楚我到底再说什么？什么是“羁绊”？什么是朋友？什么又是兄弟？当身边的帅哥们一个又一个陷入爱情的漩涡的时候，我的想法的确显得幼稚，我好像也并不适合做一个大学生的知心朋友，是啊，我什么都不会，不会抽烟，也不会喝酒，朋友过生日的时候我是最受鄙视的：“只吃不喝，真扫兴！”，看着然后喝得最多的拖着一副醉汹汹的脸，和喝的第二多的人纠缠在一起，然后就是“兄弟，朋友！”呵呵，学对面寝室那个傻逼的一句话：“原来是这样啊！原来这就是兄弟啊！”好了，看来我是要注定被这个社会所淘汰了，因为我不会隐藏自己的感情，我永远说不出那些恭维的话，我永远不会成为这些“兄弟”，就像我很难写完一篇入党申请书一样。</p>
<p>前天在去南体的路上，看到有一种不知道树，每一颗树上都之有一朵大花，洁白，很香，可我的确很反感，记得前些天这树上是有很多朵洁白的小花的，现在为什么变成了大花，难道为了自己的生长必须要限制旁边的花的生长么？我反对达尔文的“物竞天择，适者生存”，没有人性。</p>
<p>说起入党申请书，对我来说可真烦，其实随便抄两页就可以了，但我总是只写一半，当写到“我的理想”的时候，我就写不下去了，每个人都知道那上面写的是假话，却还写那劳什子干甚？谁把入党当成小学的时候定下的终生目标了？党虽然好，但这些话我真的说不出来，所以一般情况下这个时候我就会在稿子上乱画，画个写轮眼什么的，不过后来又后悔了，所以又写，写到一半又画，看来我是真的继承了爸爸这种性格了：“不会说话，处处吃亏！”。</p>
<p>我还是挺佩服鸣人的，在那么多的人鄙视的鄙视下依然能奋发图强，证明自己；佐助都要杀他了，但他还是要救佐助，想使佐助回心转意，不计回报地自愿付出，这就是羁绊，羁绊就像一根绳，可以使两个人的能力相近，又像是一根数据线，可以使人了解别人的内心，即使性格是天壤之别，志向相悖甚远，也能从眼神看到对方的内心，因为这些是建立在时间的基础上的，就像亲人一样，在大学里真正找到一个“羁绊”是非常困难的，这也许也是大学里恋爱疯狂的原因吧！……到目前为止，我认为火影忍者写得还算成功的，若岸本齐史最后要回归到现实的话，疾风传的结局应该是一场悲剧，差不多最后只有鸣人一个活着，我没有足够的说服力预测结局，但我相信我的想象能力，呵呵，还真挺令人期待！火影的每一个人都不错，我喜欢那个聪明的鹿丸，当然还有鼬、卡卡西、好色仙人……女生里我最喜欢雏田了，像我一样，不过真是太胆小了，最终应该会为鸣人而牺牲！如果作者想写好的话……不说了，真正的专家还在床上打呼噜呢！被他听到了就是我班门弄斧了。</p>
<p>我还是有点想爸爸妈妈，还有弟弟，哥哥，以前的朋友，都好久没有打电话了，妈妈，你还好吗？虽然说出来不算是很光彩的事，额，没啥滴，这点我还是看得很开的。</p>
<p>昨晚的那个梦真好啊，我没有进入我的那个世界，而是梦到了现实中的人，一群朦朦胧胧的人，好像见过，我们先在C205上自习，然后又一起上机，而且电脑都是新式的，就像我在创新实验是看到的变形金刚一样，今晚班委会我不小心唱歌了，不知道为什么，心里一直想、一直想、一直想，额，千万不能堕落啊，一切与学习为敌的东西我都不要！</p>
<p>天已全亮，鸟依旧鸣，我今天是我们寝室起得最早的，相信我有充足的精力，对付早上的物理实验还是没有问题的，呵呵，我其实几天前就有点想清楚了，像友情、爱情这类东西是没有答案的，就像三毛所说：“不要说，一说就错！”每一个人的性格不一样，看法也就不一样，就像我这种放荡不羁的性格，喜欢独自一个人，至少现在，是很难找到一个羁绊的，我不想被什么东西所束缚，我不是在英语课上说了嘛！我是一个自由飞翔的鹰，喜欢一个人独自飘。</p>
<p>世界依旧美好，又是一个鸟语花香的日子，这依然是一个充满爱的世界，我所需要做的，就是生活，啊！每一天真是值得人期待啊！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[天鹅湖之暮]]></title>
      <url>http://flume.cn/2010/01/06/%E5%A4%A9%E9%B9%85%E6%B9%96%E4%B9%8B%E6%9A%AE/</url>
      <content type="html"><![CDATA[<h4 id="注：-原名：《日记》"><a href="#注：-原名：《日记》" class="headerlink" title="注： 原名：《日记》"></a>注： 原名：《日记》</h4><pre><code>——2010.1.6日于安大新区
</code></pre><hr>
<p>本来想去翡翠湖的，但已经是晚上11点了，太晚了，就只好去天鹅湖转转。</p>
<p>不知为什么，今天又有了一个人转的欲望，这两天感觉总是不太好，不知道是作息不好还是昨天去市中心晕车的缘故。</p>
<p>今晚一下上了三个多小时的自习，虽然中途开了一些小差，但总体来说效果不错，相比之下，前几天太颓废了。</p>
<p>因为昨天刚买了mp3，所以今天是插了耳机的，显得格外安静，决定抛开所有的纠结，远离所有的虚伪，放下所有突兀的事，什么也不想，就在天鹅胡边轻轻地转转。</p>
<p>也许是因为我太安静了吧，今晚那对黑天鹅也没有出来，它们正在小房子里温馨地睡觉呢！决定今天不去打扰它俩了。湖面很平静，静得像一潭死水，本来就是一潭死水呵！总是沉默着，但不一定会永远沉默下去，也许可以忍受得了天鹅的叽叽喳喳，但很难忍受别人在后面人垃圾，谁这么没有道德，把垃圾扔进去的，是谁？湖面除了垃圾外其它什么都没有，但绝不显得空荡，湖面的草早已枯黄了，踩在上面软软的。记得夏天的时候，这儿还是有很多人的啊，现在只有我一个了，一个人更好，两个人在一起有肯能分开，一个人在一起就不会分开了，一切是这么得安静，让人流连。</p>
<p>转到一半的时候，几棵树突兀地垂在我面前，树枝像网一样，交结在一起，中间还有结，又让我想起了恶心的东西，现在一想，原来是垂柳，呵呵！原来夏天枝叶繁茂，相互拥簇，亲密相间的它们，当脱去繁华炫目的外衣后，也是一张张复杂的网呵！</p>
<p>湖边的路灯，闪着诱人的黄光，在湖面的倒影，一下伸得很长很长，难道幻想化成利剑，戳破着无尽的黑暗吗？路灯下有两个人正站着接吻，他们应该是情侣吧,好像不欢迎我这个不速之客，我可不想打扰他们，戴上帽子独自走开，说真的，我不喜欢接吻什么的（至少现在不喜欢），但我真的想要有一个，一个这样的朋友（女朋友），平时在一起学习啊，玩啊，总之在一起很愉快的，然后在这个时候，和我一起在湖边转，很少说话，心里各自想着各自的事情，但一点也不觉得尴尬，最好能拉着她软软的手，或一起靠在软软的草地上，或轻轻地抱着她……</p>
<p>就这样幻想着，这样轻轻地飘着，上完晚自习回来的人好奇地偷偷看着我，不知他们是怎样想的，我把帽子拉紧，让他们把我当怪物算了，反正他们又不认识我，反之我还有点沾沾自喜。唉，可怜的浸在现实的人啊，又怎么知道我的世界的美妙。这个感觉真好，虽然我又饿又困，但我还是不由自主地转下去，真不想回到那个地方，也许现在那对面正在“Fireinthehole”吧，也许现在他们三个又在说些无聊的废话吧，呵呵，还有人在看小说吧！</p>
<p>不小心在湖面上看到了我的倒影，哈哈！可真滑稽，像个巫师，真像“冰封王座”里面的不死族寺僧，寺僧最后是可以变隐形的，如果我可以隐形就好了，就没人看见我了，如果给我学两样技能，我是先学“白眼”呢还是先学“隐身术”呢……</p>
<p>啊！一天过得可真快，早上的我是寝室颓废、上课冷陌的我；下午的我是在对面寝室蹦来跳去、活泼但不可爱的我；晚上的我是认真上自习的我；而现在，又是沉浸在幻想中的我。连我都糊涂了，到底哪一个才是真正的我？</p>
<p>路上一直听着歌，其实也只听了四五首，除了西城的《my love》和肖邦的《什么什么大调交响曲》外，今天又发现了一首很好听的歌：仙剑的《一直很安静》，感觉和这首歌的调子有种共鸣。周杰伦的歌我这个时候是不听的，太扎耳，此情此景此歌，让我不由自主放慢了脚步。</p>
<p>不得不回去了，快要熄灯了，我饿了，但食堂的门早关了，超市也正好关门了，一切都安静了下来，只有路灯依然亮着，路灯是看到得最多的，也是最沉默的，当它看到我静静的身影时，会想些什么呢？</p>
<p>……</p>
<p>心情好多了，寝室门虚掩着，灯熄了，他们应该睡了吧，我调整了一下脸部肌肉，走进了现实……好久没写日记了……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[E20914023王小刚学期总结]]></title>
      <url>http://flume.cn/2009/12/28/E20914023%E7%8E%8B%E5%B0%8F%E5%88%9A%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>注： 辅导员要求写的学期总结。。。<br>—— 2009年冬于安大新区</p>
<p>　　大学的第一学期就这样过去了，我经历了很多：有第一次一个人在外生活的兴奋与迷茫；当班委参加各种活动的激情与失落；和永远难忘的考完试后的郁闷与悲伤……来到安大，感觉我这半年经历了比过去17年还多的东西，总之，大一的上半学期是永远难忘的，虽然以悲剧收场。</p>
<p>　　当我兴奋地来到安大，一切变得让我傻眼，几乎所有的东西都是第一次：第一次打水，第一次洗那么大的衣服，还有第一次进网吧，一切都是如此的新鲜以至我差点迷了路，但大学主要是学习啊！在这个时候我还是比较清醒，跟着室友跑去上自习，在学习上我就是一个十足的差生，能来到安大就很侥幸的我基础真的很差，室友的英语都比我高出的二三十分，当我们一起上课或者一起上自习的时候，就能看出来，我真的很佩服我的室友沈诗文，他做事很有效率，我们一起上自习，他总是会的比我多多了，我一直以沈诗文为我的目标，但我总是没有他厉害，没关系的，我一定好好努力，争取超过他。</p>
<p>　　这段时间我是极度低落的，考得太烂，虽然我不知道成绩，但考完试之后我知道我已经完蛋了，真想消失在这个世界，感觉自己这几个月的努力全部败在了那天早上，唉，不想了，“有的人总是回忆过去，幻想未来，却忘了现在……”我必须好好学习了，今年回家必须要恶补英语和C语言，高数当然也要补。早上背英语单词，和C语言，下午看C语言和高数，主要还是英语。以我现在的状况要预习下半学期的课是真有困难，我这个人是很没有决心的，但我已经找到了克服的方法，寒假必须得恶补了。我的目标是唯一的——考研，所以下一学期我会以学习为最主要目的，一切都是为考研而准备。相信自己，我能行的！</p>
<p>　　说活动嘛，我想我是成功的：合唱真爽，经过的突然的悲伤，然后又突然的喜悦，成绩不错就不说了</p>
<p>　　还记得“计科院足球队”在“雀巢”上飞奔的身影，进球后抱在一起的喜悦，失球后兄弟般的团结；还记得和本班的，外班的同学打篮球的激情；还有插花比赛，交了几个很好的朋友，还意外的得了省级奖</p>
<p>还有篮球友谊赛，辩论赛，运动会，口拓协会，象棋协会……太多了，我在这方面真充实。我想，虽然大学学习紧张，但如果你连一个活动都不参加，就太失败了。</p>
<p>　　作为体育委员，哇，真的挺爽的，既锻炼了自己，又认识了这么多的女生，本来内向的我都不内向了，我组织参加了很多活动啊：比如运动会，跳绳比赛，篮球友谊赛，班里同学周末高兴地打篮球，我能感觉到我的各方面能力的提高，如果我不挂科的话，我还想把体育委员当下去。</p>
<p>　　在安大，我认识了很多很多的朋友，比如我们寝室的沈诗文啊，王群啊，高龙啊，詹新成啊……太多了，感觉大学的朋友因为长时间在一起，关系真的很好，我们班的每一个人都给我留下很好的印象，不愧是一本大学啊！我们班的女生也人都很好，现在朋友一个一个得回家了，我都开始想了，我这个人学习不好，可在交朋友方面我还是挺自信的。</p>
<p>　　啊！不说了，寝室楼也快要关门了，一不小心就写多了，殷老师，提前祝你春节快乐！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[桂花真香]]></title>
      <url>http://flume.cn/2009/09/29/%E6%A1%82%E8%8A%B1%E7%9C%9F%E9%A6%99/</url>
      <content type="html"><![CDATA[<p>夏已消逝，秋意更浓，人们穿上了久违的长袖，大雁不时成群在天上飞过，桂花香也飘满了校园。</p>
<p>没来过南方的人永远想像不到桂花的香味，家在南方的人也不会感觉到桂花香的震撼，他们已经习惯了，因为很多东西当人们拥有时都不会去珍惜它。从北方来求学的我，站在秋天桂花香的风中，当多愁善感的人碰上多愁善感的事，不免得要多愁善感一番。</p>
<p>虽然家乡那边也有花，我也故作浪漫地闻过，但说实话我真没闻到过花香。当我来到南方，闻到桂花香时，才真正明白了花香的含义。桂花在暮夏时节就有了，那时只是一抹抹，一缕缕的，花香像调皮的小天使，随风飘荡，不经意间飞进鼻孔，当你使劲闻的时候，它却调皮地飞走了。而现在，大批的桂花跟随着秋姑娘的脚步轻轻走来，微风轻轻一吹，就会闻到浓浓的清香，”满城尽飘桂花香”，使劲闻吧！不必害怕把它惊走，多浪漫啊！我的心都醉了。</p>
<p>在桂花香的风中奔跑，路人用奇怪的眼光看我，我不在乎，应为我已沉浸在桂花香风中。真想化成风，一股微蓝的风，让别人看不见我，自由自在地在空中飞翔，空中陶醉，然后睡在桂花中。看！多小的桂花呀，一个个黄色的小花，像一个个黄色的小铃铛，在风的吹佛下，奏出悦耳的浪漫诗!</p>
<p>真想化成风，载着桂花香，飞到天上，飞到桂花树下私语的情侣旁，多浪漫的爱情啊!我为他们送去香甜；</p>
<p>真想化成风，飞到通渭，将桂花香带到家里，我轻轻触摸爸爸的脸，闻着妈妈洗完衣服的手上的肥皂香味，看着可爱的弟弟学习时的傻样,轻轻抚摸他柔软的头发；</p>
<p>真想化成风，飞到通渭一中，飞到教室里,为那些埋头苦读的兄弟们送去桂花香，真心祝福你们；</p>
<p>真想化成风，载着桂花香，飞到北京，西安，长春……飞到大学里和我一样离家的朋友旁，让他们也闻到桂花香，为他们驱散孤独。</p>
<p>如果可以，我会化成风，飞到一中，飞到200天以前的高三（九）班，看着那个坐在第二排戴眼镜的可爱男生，飞到他耳边，轻轻告诉他：</p>
<pre><code>&quot;勇敢点，不要让美好的高中留下遗憾。&quot;
&quot;乖点，再不要让父母生气了。&quot;
&quot;大度点，不要再与弟弟争了&quot;
......
</code></pre><p>真想化成风，一股微蓝的风，是秋天里浪漫的风，畅游在花香的海洋，载着花香，含着泪，在无人的时候，一个人独自飘。</p>
<p>——2009年秋</p>
<p>——安大新区</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://flume.cn/about/index.html</url>
      <content type="html"><![CDATA[<p>hi，你好</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[timeline]]></title>
      <url>http://flume.cn/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
